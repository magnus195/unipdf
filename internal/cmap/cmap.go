//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_d "bufio";_b "bytes";_c "encoding/hex";_e "errors";_g "fmt";
	_eb "github.com/magnus195/unipdf/v3/common";
	_bb "github.com/magnus195/unipdf/v3/core";
	_gd "github.com/magnus195/unipdf/v3/internal/cmap/bcmaps";_cf "io";_bc "sort";_a "strconv";_dd "strings";
_fd "unicode/utf16";);type cmapArray struct{Array []cmapObject ;};func (cmap *CMap )toBfData ()string {if len (cmap ._bfe )==0{return "";};_ebc :=make ([]CharCode ,0,len (cmap ._bfe ));for _dca :=range cmap ._bfe {_ebc =append (_ebc ,_dca );};_bc .Slice (_ebc ,func (_age ,_gea int )bool {return _ebc [_age ]< _ebc [_gea ]});
var _cec []charRange ;_cbd :=charRange {_ebc [0],_ebc [0]};_dbd :=cmap ._bfe [_ebc [0]];for _ ,_bd :=range _ebc [1:]{_gbe :=cmap ._bfe [_bd ];if _bd ==_cbd ._gdc +1&&_dg (_gbe )==_dg (_dbd )+1{_cbd ._gdc =_bd ;}else {_cec =append (_cec ,_cbd );_cbd ._dde ,_cbd ._gdc =_bd ,_bd ;
};_dbd =_gbe ;};_cec =append (_cec ,_cbd );var _ga []CharCode ;var _eaa []fbRange ;for _ ,_cae :=range _cec {if _cae ._dde ==_cae ._gdc {_ga =append (_ga ,_cae ._dde );}else {_eaa =append (_eaa ,fbRange {_ec :_cae ._dde ,_ab :_cae ._gdc ,_fb :cmap ._bfe [_cae ._dde ]});
};};_eb .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_cec ),len (_ga ),len (_eaa ));var _feed []string ;if len (_ga )> 0{_cdcd :=(len (_ga )+_eaaf -1)/_eaaf ;
for _ddga :=0;_ddga < _cdcd ;_ddga ++{_abg :=_bdbe (len (_ga )-_ddga *_eaaf ,_eaaf );_feed =append (_feed ,_g .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_abg ));for _afff :=0;_afff < _abg ;_afff ++{_dbc :=_ga [_ddga *_eaaf +_afff ];
_fed :=cmap ._bfe [_dbc ];_feed =append (_feed ,_g .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_dbc ,_ebda (_fed )));};_feed =append (_feed ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_eaa )> 0{_dcc :=(len (_eaa )+_eaaf -1)/_eaaf ;
for _egg :=0;_egg < _dcc ;_egg ++{_dba :=_bdbe (len (_eaa )-_egg *_eaaf ,_eaaf );_feed =append (_feed ,_g .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_dba ));for _bgf :=0;_bgf < _dba ;_bgf ++{_gec :=_eaa [_egg *_eaaf +_bgf ];
_feed =append (_feed ,_g .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_gec ._ec ,_gec ._ab ,_ebda (_gec ._fb )));};_feed =append (_feed ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};
return _dd .Join (_feed ,"\u000a");};func _daf (_aab string )(*CMap ,error ){_ge ,_egc :=_gd .Asset (_aab );if _egc !=nil {return nil ,_egc ;};return LoadCmapFromDataCID (_ge );};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._gb };func _ebda (_cfde string )string {_cbe :=[]rune (_cfde );
_eaad :=make ([]string ,len (_cbe ));for _efac ,_cg :=range _cbe {_eaad [_efac ]=_g .Sprintf ("\u0025\u0030\u0034\u0078",_cg );};return _g .Sprintf ("\u003c\u0025\u0073\u003e",_dd .Join (_eaad ,""));};func _cc (_aee bool )*CMap {_gf :=16;if _aee {_gf =8;
};return &CMap {_aa :_gf ,_ag :make (map[CharCode ]CharCode ),_df :make (map[CharCode ]CharCode ),_bfe :make (map[CharCode ]string ),_eg :make (map[string ]CharCode )};};type CharCode uint32 ;func (cmap *CMap )WMode ()(int ,bool ){return cmap ._ege ._aec ,cmap ._ege ._abc };
func (cmap *CMap )matchCode (_dddc []byte )(_dfg CharCode ,_adb int ,_ddda bool ){for _bg :=0;_bg < _ef ;_bg ++{if _bg < len (_dddc ){_dfg =_dfg <<8|CharCode (_dddc [_bg ]);_adb ++;};_ddda =cmap .inCodespace (_dfg ,_bg +1);if _ddda {return _dfg ,_adb ,true ;
};};_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dddc ,string (_dddc ),cmap );
return 0,0,false ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fef ,_cac :=cmap ._ag [code ];return _fef ,_cac ;};type CMap struct{*cMapParser ;_bf string ;_aa int ;_eae int ;_ae string ;_db string ;_gb CIDSystemInfo ;_ff []Codespace ;
_ag map[CharCode ]CharCode ;_df map[CharCode ]CharCode ;_bfe map[CharCode ]string ;_eg map[string ]CharCode ;_cb []byte ;_abb *_bb .PdfObjectStream ;_ege integer ;};func (cmap *CMap )String ()string {_fac :=cmap ._gb ;_fdb :=[]string {_g .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._aa ),_g .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._eae )};
if cmap ._ae !=""{_fdb =append (_fdb ,_g .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ae ));};if cmap ._db !=""{_fdb =append (_fdb ,_g .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._db ));
};_fdb =append (_fdb ,_g .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_fac .String ()));if len (cmap ._ff )> 0{_fdb =append (_fdb ,_g .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ff )));
};if len (cmap ._bfe )> 0{_fdb =append (_fdb ,_g .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._bfe )));};return _g .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._bf ,_dd .Join (_fdb ,"\u0020"));
};type charRange struct{_dde CharCode ;_gdc CharCode ;};func (cmap *CMap )parseType ()error {_eaee :=0;_bgde :=false ;for _gde :=0;_gde < 3&&!_bgde ;_gde ++{_feg ,_cadc :=cmap .parseObject ();if _cadc !=nil {return _cadc ;};switch _fbgf :=_feg .(type ){case cmapOperand :switch _fbgf .Operand {case "\u0064\u0065\u0066":_bgde =true ;
default:_eb .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_feg );return ErrBadCMap ;};case cmapInt :_eaee =int (_fbgf ._bcgd );
};};cmap ._eae =_eaee ;return nil ;};type fbRange struct{_ec CharCode ;_ab CharCode ;_fb string ;};func (cmap *CMap )parseBfrange ()error {for {var _ceg CharCode ;_cgbb ,_bbc :=cmap .parseObject ();if _bbc !=nil {if _bbc ==_cf .EOF {break ;};return _bbc ;
};switch _ecd :=_cgbb .(type ){case cmapOperand :if _ecd .Operand ==_gcg {return nil ;};return _e .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_ceg =_cefd (_ecd );default:return _e .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _cedg CharCode ;_cgbb ,_bbc =cmap .parseObject ();if _bbc !=nil {if _bbc ==_cf .EOF {break ;};return _bbc ;};switch _eefa :=_cgbb .(type ){case cmapOperand :_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_cedg =_cefd (_eefa );if _cedg > 0xffff{_cedg =0xffff;};default:_eb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cgbb );return ErrBadCMap ;
};_cgbb ,_bbc =cmap .parseObject ();if _bbc !=nil {if _bbc ==_cf .EOF {break ;};return _bbc ;};switch _cdbd :=_cgbb .(type ){case cmapArray :if len (_cdbd .Array )!=int (_cedg -_ceg )+1{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _gaff :=_ceg ;_gaff <=_cedg ;_gaff ++{_gffe :=_cdbd .Array [_gaff -_ceg ];_edb ,_cgg :=_gffe .(cmapHexString );if !_cgg {return _e .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_cdca :=_gag (_edb );cmap ._bfe [_gaff ]=string (_cdca );};case cmapHexString :_abgf :=_gag (_cdbd );_bcce :=len (_abgf );for _afga :=_ceg ;_afga <=_cedg ;_afga ++{cmap ._bfe [_afga ]=string (_abgf );if _bcce > 0{_abgf [_bcce -1]++;}else {_eb .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_afga );
};if _afga ==1<<32-1{break ;};};default:_eb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cgbb );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )Type ()int {return cmap ._eae };
const (_eaaf =100;_cdcc ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_ccg ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type cmapOperand struct{Operand string ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_eb .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_cc (isSimple );cmap .cMapParser =_cga (data );_da :=cmap .parse ();if _da !=nil {return nil ,_da ;};if len (cmap ._ff )==0{if cmap ._db !=""{return cmap ,nil ;};_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_fgb ,_ggee :=cmap ._eg [s ];return _fgb ,_ggee ;};func _cbfc ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _aac ,_cffg :=cmap ._bfe [code ];
_cffg {return _aac ,true ;};return MissingCodeString ,false ;};func (_gdca *cMapParser )parseOperand ()(cmapOperand ,error ){_gbga :=cmapOperand {};_fff :=_b .Buffer {};for {_caa ,_cadd :=_gdca ._eag .Peek (1);if _cadd !=nil {if _cadd ==_cf .EOF {break ;
};return _gbga ,_cadd ;};if _bb .IsDelimiter (_caa [0]){break ;};if _bb .IsWhiteSpace (_caa [0]){break ;};_dbdd ,_ :=_gdca ._eag .ReadByte ();_fff .WriteByte (_dbdd );};if _fff .Len ()==0{return _gbga ,_g .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_gbga .Operand =_fff .String ();return _gbga ,nil ;};func _gegf (_aba cmapHexString )rune {_fab :=_gag (_aba );if _ffa :=len (_fab );_ffa ==0{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_aba );
return MissingCodeRune ;};if len (_fab )> 1{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_aba ,_fab );
};return _fab [0];};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gc :=make (map[CharCode ]string ,len (codeToRune ));for _fa ,_af :=range codeToRune {_gc [_fa ]=string (_af );};cmap :=&CMap {_bf :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_eae :2,_aa :16,_gb :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ff :[]Codespace {{Low :0,High :0xffff}},_bfe :_gc ,_eg :make (map[string ]CharCode ,len (codeToRune )),_ag :make (map[CharCode ]CharCode ,len (codeToRune )),_df :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapDict struct{Dict map[string ]cmapObject ;};type cMapParser struct{_eag *_d .Reader };func (cmap *CMap )parseName ()error {_gbc :="";_ed :=false ;for _bgd :=0;_bgd < 20&&!_ed ;_bgd ++{_eab ,_dfb :=cmap .parseObject ();
if _dfb !=nil {return _dfb ;};switch _fea :=_eab .(type ){case cmapOperand :switch _fea .Operand {case "\u0064\u0065\u0066":_ed =true ;default:_eb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_eab ,_gbc );
if _gbc !=""{_gbc =_g .Sprintf ("\u0025\u0073\u0020%\u0073",_gbc ,_fea .Operand );};_eb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_gbc );
};case cmapName :_gbc =_fea .Name ;};};if !_ed {_eb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._bf =_gbc ;return nil ;};func (cmap *CMap )parseBfchar ()error {for {_dfa ,_aef :=cmap .parseObject ();
if _aef !=nil {if _aef ==_cf .EOF {break ;};return _aef ;};var _cef CharCode ;switch _cfc :=_dfa .(type ){case cmapOperand :if _cfc .Operand ==_acb {return nil ;};return _e .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_cef =_cefd (_cfc );default:return _e .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_dfa ,_aef =cmap .parseObject ();if _aef !=nil {if _aef ==_cf .EOF {break ;};return _aef ;};var _fge []rune ;
switch _bged :=_dfa .(type ){case cmapOperand :if _bged .Operand ==_acb {return nil ;};_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_bged );
return ErrBadCMap ;case cmapHexString :_fge =_gag (_bged );case cmapName :_eb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_bged );_fge =[]rune {MissingCodeRune };
default:_eb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_dfa );return ErrBadCMap ;};cmap ._bfe [_cef ]=string (_fge );};return nil ;};type cmapHexString struct{_bac int ;
_gbcb []byte ;};func (cmap *CMap )parseCIDRange ()error {for {_adga ,_cfdd :=cmap .parseObject ();if _cfdd !=nil {if _cfdd ==_cf .EOF {break ;};return _cfdd ;};_gaf ,_gfbg :=_adga .(cmapHexString );if !_gfbg {if _gdeg ,_cgb :=_adga .(cmapOperand );_cgb {if _gdeg .Operand ==_efdg {return nil ;
};return _e .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_dbde :=_cefd (_gaf );
_adga ,_cfdd =cmap .parseObject ();if _cfdd !=nil {if _cfdd ==_cf .EOF {break ;};return _cfdd ;};_bcc ,_gfbg :=_adga .(cmapHexString );if !_gfbg {return _e .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_gaf ._gbcb )!=len (_bcc ._gbcb ){return _e .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_efd :=_cefd (_bcc );
if _dbde > _efd {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_dbde ,_efd );
return ErrBadCMap ;};_adga ,_cfdd =cmap .parseObject ();if _cfdd !=nil {if _cfdd ==_cf .EOF {break ;};return _cfdd ;};_ageb ,_gfbg :=_adga .(cmapInt );if !_gfbg {return _e .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ageb ._bcgd < 0{return _e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_cbabb :=_ageb ._bcgd ;for _eed :=_dbde ;_eed <=_efd ;_eed ++{cmap ._ag [_eed ]=CharCode (_cbabb );
_cbabb ++;};_eb .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_dbde ,_efd ,_ageb ._bcgd );};return nil ;};func (cmap *CMap )Name ()string {return cmap ._bf };
func (cmap *CMap )parseVersion ()error {_cba :="";_cdaa :=false ;for _gaa :=0;_gaa < 3&&!_cdaa ;_gaa ++{_cbed ,_fcc :=cmap .parseObject ();if _fcc !=nil {return _fcc ;};switch _fgbg :=_cbed .(type ){case cmapOperand :switch _fgbg .Operand {case "\u0064\u0065\u0066":_cdaa =true ;
default:_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_cbed );
return ErrBadCMap ;};case cmapInt :_cba =_g .Sprintf ("\u0025\u0064",_fgbg ._bcgd );case cmapFloat :_cba =_g .Sprintf ("\u0025\u0066",_fgbg ._gbaef );case cmapString :_cba =_fgbg .String ;default:_eb .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_cbed );
};};cmap ._ae =_cba ;return nil ;};func (_bbge *cMapParser )parseHexString ()(cmapHexString ,error ){_bbge ._eag .ReadByte ();_gfd :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_ace :=_b .Buffer {};for {_bbge .skipSpaces ();_ebgf ,_edd :=_bbge ._eag .Peek (1);if _edd !=nil {return cmapHexString {},_edd ;};if _ebgf [0]=='>'{_bbge ._eag .ReadByte ();break ;};_cde ,_ :=_bbge ._eag .ReadByte ();if _b .IndexByte (_gfd ,_cde )>=0{_ace .WriteByte (_cde );
};};if _ace .Len ()%2==1{_eb .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_ace .String ());_ace .WriteByte ('0');};_gfeb :=_ace .Len ()/2;
_acg ,_ :=_c .DecodeString (_ace .String ());return cmapHexString {_bac :_gfeb ,_gbcb :_acg },nil ;};func (cmap *CMap )parse ()error {var _eecb cmapObject ;for {_gbd ,_abd :=cmap .parseObject ();if _abd !=nil {if _abd ==_cf .EOF {break ;};_eb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_abd );
return _abd ;};switch _ffc :=_gbd .(type ){case cmapOperand :_ecc :=_ffc ;switch _ecc .Operand {case _cbeg :_ced :=cmap .parseCodespaceRange ();if _ced !=nil {return _ced ;};case _deb :_bcb :=cmap .parseCIDRange ();if _bcb !=nil {return _bcb ;};case _dcb :_egga :=cmap .parseBfchar ();
if _egga !=nil {return _egga ;};case _agc :_ccd :=cmap .parseBfrange ();if _ccd !=nil {return _ccd ;};case _cce :if _eecb ==nil {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_afg ,_bbg :=_eecb .(cmapName );if !_bbg {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_eecb );
return ErrBadCMap ;};cmap ._db =_afg .Name ;case _ba :_gead :=cmap .parseSystemInfo ();if _gead !=nil {return _gead ;};};case cmapName :_cgd :=_ffc ;switch _cgd .Name {case _ba :_dge :=cmap .parseSystemInfo ();if _dge !=nil {return _dge ;};case _cecf :_dadc :=cmap .parseName ();
if _dadc !=nil {return _dadc ;};case _fgcb :_dce :=cmap .parseType ();if _dce !=nil {return _dce ;};case _cdaad :_afgd :=cmap .parseVersion ();if _afgd !=nil {return _afgd ;};case _aabd :if _abd =cmap .parseWMode ();_abd !=nil {return _abd ;};};};_eecb =_gbd ;
};return nil ;};func IsPredefinedCMap (name string )bool {return _gd .AssetExists (name )};func NewCIDSystemInfo (obj _bb .PdfObject )(_abf CIDSystemInfo ,_ea error ){_ead ,_ecf :=_bb .GetDict (obj );if !_ecf {return CIDSystemInfo {},_bb .ErrTypeError ;
};_ce ,_ecf :=_bb .GetStringVal (_ead .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_ecf {return CIDSystemInfo {},_bb .ErrTypeError ;};_fe ,_ecf :=_bb .GetStringVal (_ead .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_ecf {return CIDSystemInfo {},_bb .ErrTypeError ;
};_gg ,_ecf :=_bb .GetIntVal (_ead .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_ecf {return CIDSystemInfo {},_bb .ErrTypeError ;};return CIDSystemInfo {Registry :_ce ,Ordering :_fe ,Supplement :_gg },nil ;};type cmapFloat struct{_gbaef float64 };
func (cmap *CMap )inCodespace (_gbg CharCode ,_bff int )bool {for _ ,_ebdb :=range cmap ._ff {if _ebdb .Low <=_gbg &&_gbg <=_ebdb .High &&_bff ==_ebdb .NumBytes {return true ;};};return false ;};func (_cfd *CIDSystemInfo )String ()string {return _g .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_cfd .Registry ,_cfd .Ordering ,_cfd .Supplement );
};var (ErrBadCMap =_e .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_e .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_e .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func (_dfe *cMapParser )parseComment ()(string ,error ){var _ecda _b .Buffer ;_ ,_dbaf :=_dfe .skipSpaces ();if _dbaf !=nil {return _ecda .String (),_dbaf ;};_faad :=true ;for {_egd ,_dccg :=_dfe ._eag .Peek (1);if _dccg !=nil {_eb .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_dccg );
return _ecda .String (),_dccg ;};if _faad &&_egd [0]!='%'{return _ecda .String (),ErrBadCMapComment ;};_faad =false ;if (_egd [0]!='\r')&&(_egd [0]!='\n'){_gga ,_ :=_dfe ._eag .ReadByte ();_ecda .WriteByte (_gga );}else {break ;};};return _ecda .String (),nil ;
};type cmapInt struct{_bcgd int64 };func (_fadb *cMapParser )parseObject ()(cmapObject ,error ){_fadb .skipSpaces ();for {_ebb ,_cdd :=_fadb ._eag .Peek (2);if _cdd !=nil {return nil ,_cdd ;};if _ebb [0]=='%'{_fadb .parseComment ();_fadb .skipSpaces ();
continue ;}else if _ebb [0]=='/'{_gafg ,_dda :=_fadb .parseName ();return _gafg ,_dda ;}else if _ebb [0]=='('{_dcfa ,_dcfd :=_fadb .parseString ();return _dcfa ,_dcfd ;}else if _ebb [0]=='['{_bdba ,_dbf :=_fadb .parseArray ();return _bdba ,_dbf ;}else if (_ebb [0]=='<')&&(_ebb [1]=='<'){_gbce ,_gafc :=_fadb .parseDict ();
return _gbce ,_gafc ;}else if _ebb [0]=='<'{_bgea ,_cbge :=_fadb .parseHexString ();return _bgea ,_cbge ;}else if _bb .IsDecimalDigit (_ebb [0])||(_ebb [0]=='-'&&_bb .IsDecimalDigit (_ebb [1])){_daa ,_edcc :=_fadb .parseNumber ();if _edcc !=nil {return nil ,_edcc ;
};return _daa ,nil ;}else {_aaa ,_eaaa :=_fadb .parseOperand ();if _eaaa !=nil {return nil ,_eaaa ;};return _aaa ,nil ;};};};func _dg (_bbf string )rune {_bga :=[]rune (_bbf );return _bga [len (_bga )-1]};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_cfe :=_daf (name );
if _cfe !=nil {return nil ,_cfe ;};if cmap ._db ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_afa ,_cfe :=_daf (cmap ._db );if _cfe !=nil {return nil ,_cfe ;};for _dad ,_ffd :=range _afa ._ag {if _ ,_ad :=cmap ._ag [_dad ];!_ad {cmap ._ag [_dad ]=_ffd ;
};};cmap ._ff =append (cmap ._ff ,_afa ._ff ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseWMode ()error {var _faa int ;_fgcf :=false ;for _fc :=0;_fc < 3&&!_fgcf ;_fc ++{_geg ,_edc :=cmap .parseObject ();if _edc !=nil {return _edc ;
};switch _aeed :=_geg .(type ){case cmapOperand :switch _aeed .Operand {case "\u0064\u0065\u0066":_fgcf =true ;default:_eb .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_geg );
return ErrBadCMap ;};case cmapInt :_faa =int (_aeed ._bcgd );};};cmap ._ege =integer {_abc :true ,_aec :_faa };return nil ;};func (_ecg *cMapParser )parseNumber ()(cmapObject ,error ){_eabd ,_ddae :=_bb .ParseNumber (_ecg ._eag );if _ddae !=nil {return nil ,_ddae ;
};switch _gce :=_eabd .(type ){case *_bb .PdfObjectFloat :return cmapFloat {float64 (*_gce )},nil ;case *_bb .PdfObjectInteger :return cmapInt {int64 (*_gce )},nil ;};return nil ,_g .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_eabd );
};func (_bdf *cMapParser )parseString ()(cmapString ,error ){_bdf ._eag .ReadByte ();_bcg :=_b .Buffer {};_ebee :=1;for {_eca ,_edbd :=_bdf ._eag .Peek (1);if _edbd !=nil {return cmapString {_bcg .String ()},_edbd ;};if _eca [0]=='\\'{_bdf ._eag .ReadByte ();
_gda ,_dga :=_bdf ._eag .ReadByte ();if _dga !=nil {return cmapString {_bcg .String ()},_dga ;};if _bb .IsOctalDigit (_gda ){_daff ,_dafb :=_bdf ._eag .Peek (2);if _dafb !=nil {return cmapString {_bcg .String ()},_dafb ;};var _ggac []byte ;_ggac =append (_ggac ,_gda );
for _ ,_fdfa :=range _daff {if _bb .IsOctalDigit (_fdfa ){_ggac =append (_ggac ,_fdfa );}else {break ;};};_bdf ._eag .Discard (len (_ggac )-1);_eb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_ggac );
_fdd ,_dafb :=_a .ParseUint (string (_ggac ),8,32);if _dafb !=nil {return cmapString {_bcg .String ()},_dafb ;};_bcg .WriteByte (byte (_fdd ));continue ;};switch _gda {case 'n':_bcg .WriteByte ('\n');case 'r':_bcg .WriteByte ('\r');case 't':_bcg .WriteByte ('\t');
case 'b':_bcg .WriteByte ('\b');case 'f':_bcg .WriteByte ('\f');case '(':_bcg .WriteByte ('(');case ')':_bcg .WriteByte (')');case '\\':_bcg .WriteByte ('\\');};continue ;}else if _eca [0]=='('{_ebee ++;}else if _eca [0]==')'{_ebee --;if _ebee ==0{_bdf ._eag .ReadByte ();
break ;};};_faaa ,_ :=_bdf ._eag .ReadByte ();_bcg .WriteByte (_faaa );};return cmapString {_bcg .String ()},nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_gff ,_fee :=cmap .BytesToCharcodes (data );
if !_fee {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_fg :=make ([]string ,len (_gff ));var _efe []CharCode ;for _ac ,_efa :=range _gff {_eec ,_cad :=cmap ._bfe [_efa ];if !_cad {_efe =append (_efe ,_efa );_eec =MissingCodeString ;};_fg [_ac ]=_eec ;};_cbg :=_dd .Join (_fg ,"");if len (_efe )> 0{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_gff ,len (_efe ),_efe ,_cbg ,cmap );
};return _cbg ,len (_efe );};func (cmap *CMap )Stream ()(*_bb .PdfObjectStream ,error ){if cmap ._abb !=nil {return cmap ._abb ,nil ;};_gba ,_fgc :=_bb .MakeStream (cmap .Bytes (),_bb .NewFlateEncoder ());if _fgc !=nil {return nil ,_fgc ;};cmap ._abb =_gba ;
return cmap ._abb ,nil ;};func _gag (_ggg cmapHexString )[]rune {if len (_ggg ._gbcb )==1{return []rune {rune (_ggg ._gbcb [0])};};_gad :=_ggg ._gbcb ;if len (_gad )%2!=0{_gad =append (_gad ,0);_eb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_ggg ,_gad );
};_afe :=len (_gad )>>1;_aad :=make ([]uint16 ,_afe );for _acge :=0;_acge < _afe ;_acge ++{_aad [_acge ]=uint16 (_gad [_acge <<1])<<8+uint16 (_gad [_acge <<1+1]);};_ecaa :=_fd .Decode (_aad );return _ecaa ;};func (cmap *CMap )NBits ()int {return cmap ._aa };
func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _ddb []CharCode ;if cmap ._aa ==8{for _ ,_geb :=range data {_ddb =append (_ddb ,CharCode (_geb ));};return _ddb ,true ;};for _gfe :=0;_gfe < len (data );{_cdb ,_ddf ,_adfb :=cmap .matchCode (data [_gfe :]);
if !_adfb {_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_gfe ,data ,string (data ));
return _ddb ,false ;};_ddb =append (_ddb ,_cdb );_gfe +=_ddf ;};return _ddb ,true ;};func _cga (_gaba []byte )*cMapParser {_cfg :=cMapParser {};_dgd :=_b .NewBuffer (_gaba );_cfg ._eag =_d .NewReader (_dgd );return &_cfg ;};type cmapName struct{Name string ;
};const (_ba ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_be ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_eedf ="\u0065n\u0064\u0063\u006d\u0061\u0070";_cbeg ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_bbe ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_dcb ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_acb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_agc ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_gcg ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_deb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_efdg ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cce ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_aabd ="\u0057\u004d\u006fd\u0065";_cecf ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_fgcb ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_cdaad ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_cdc ,_fbg :=cmap ._df [cid ];
return _cdc ,_fbg ;};func (cmap *CMap )parseCodespaceRange ()error {for {_gaeb ,_aga :=cmap .parseObject ();if _aga !=nil {if _aga ==_cf .EOF {break ;};return _aga ;};_fdc ,_bge :=_gaeb .(cmapHexString );if !_bge {if _gdg ,_cgdd :=_gaeb .(cmapOperand );
_cgdd {if _gdg .Operand ==_bbe {return nil ;};return _e .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_gaeb ,_aga =cmap .parseObject ();if _aga !=nil {if _aga ==_cf .EOF {break ;};return _aga ;};_fad ,_bge :=_gaeb .(cmapHexString );
if !_bge {return _e .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_fdc ._gbcb )!=len (_fad ._gbcb ){return _e .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_de :=_cefd (_fdc );_fdad :=_cefd (_fad );if _fdad < _de {_eb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_de ,_fdad );
return ErrBadCMap ;};_aged :=_fad ._bac ;_aae :=Codespace {NumBytes :_aged ,Low :_de ,High :_fdad };cmap ._ff =append (cmap ._ff ,_aae );_eb .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_de ,_fdad );
};if len (cmap ._ff )==0{_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )Bytes ()[]byte {_eb .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._cb )> 0{return cmap ._cb ;};cmap ._cb =[]byte (_dd .Join ([]string {_cdcc ,cmap .toBfData (),_ccg },"\u000a"));return cmap ._cb ;};func (cmap *CMap )parseSystemInfo ()error {_bdc :=false ;_edf :=false ;_bdb :="";_bcbd :=false ;_cdf :=CIDSystemInfo {};
for _dfgb :=0;_dfgb < 50&&!_bcbd ;_dfgb ++{_ccb ,_ggf :=cmap .parseObject ();if _ggf !=nil {return _ggf ;};switch _gab :=_ccb .(type ){case cmapDict :_cbab :=_gab .Dict ;_bdbd ,_dgb :=_cbab ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dgb {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_fbe ,_dgb :=_bdbd .(cmapString );if !_dgb {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cdf .Registry =_fbe .String ;
_bdbd ,_dgb =_cbab ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_dgb {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fbe ,_dgb =_bdbd .(cmapString );
if !_dgb {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cdf .Ordering =_fbe .String ;_afbb ,_dgb :=_cbab ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_dgb {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_acf ,_dgb :=_afbb .(cmapInt );if !_dgb {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cdf .Supplement =int (_acf ._bcgd );_bcbd =true ;case cmapOperand :switch _gab .Operand {case "\u0062\u0065\u0067i\u006e":_bdc =true ;case "\u0065\u006e\u0064":_bcbd =true ;case "\u0064\u0065\u0066":_edf =false ;};case cmapName :if _bdc {_bdb =_gab .Name ;
_edf =true ;};case cmapString :if _edf {switch _bdb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_cdf .Registry =_gab .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_cdf .Ordering =_gab .String ;};};case cmapInt :if _edf {switch _bdb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_cdf .Supplement =int (_gab ._bcgd );
};};};};if !_bcbd {_eb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._gb =_cdf ;return nil ;};func (_dfga *cMapParser )parseArray ()(cmapArray ,error ){_eaga :=cmapArray {};_eaga .Array =[]cmapObject {};_dfga ._eag .ReadByte ();for {_dfga .skipSpaces ();_dddad ,_eeg :=_dfga ._eag .Peek (1);if _eeg !=nil {return _eaga ,_eeg ;
};if _dddad [0]==']'{_dfga ._eag .ReadByte ();break ;};_ebec ,_eeg :=_dfga .parseObject ();if _eeg !=nil {return _eaga ,_eeg ;};_eaga .Array =append (_eaga .Array ,_ebec );};return _eaga ,nil ;};const (_ef =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune );
);func (_gdgg *cMapParser )parseDict ()(cmapDict ,error ){_eb .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_bab :=_cbfc ();_eeda ,_ :=_gdgg ._eag .ReadByte ();if _eeda !='<'{return _bab ,ErrBadCMapDict ;
};_eeda ,_ =_gdgg ._eag .ReadByte ();if _eeda !='<'{return _bab ,ErrBadCMapDict ;};for {_gdgg .skipSpaces ();_bdd ,_befd :=_gdgg ._eag .Peek (2);if _befd !=nil {return _bab ,_befd ;};if (_bdd [0]=='>')&&(_bdd [1]=='>'){_gdgg ._eag .ReadByte ();_gdgg ._eag .ReadByte ();
break ;};_cdeb ,_befd :=_gdgg .parseName ();_eb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cdeb .Name );if _befd !=nil {_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_befd );
return _bab ,_befd ;};_gdgg .skipSpaces ();_baa ,_befd :=_gdgg .parseObject ();if _befd !=nil {return _bab ,_befd ;};_bab .Dict [_cdeb .Name ]=_baa ;_gdgg .skipSpaces ();_bdd ,_befd =_gdgg ._eag .Peek (3);if _befd !=nil {return _bab ,_befd ;};if string (_bdd )=="\u0064\u0065\u0066"{_gdgg ._eag .Discard (3);
};};return _bab ,nil ;};type cmapString struct{String string ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (_eda *cMapParser )parseName ()(cmapName ,error ){_bgac :="";_gbae :=false ;for {_baf ,_gcb :=_eda ._eag .Peek (1);
if _gcb ==_cf .EOF {break ;};if _gcb !=nil {return cmapName {_bgac },_gcb ;};if !_gbae {if _baf [0]=='/'{_gbae =true ;_eda ._eag .ReadByte ();}else {_eb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_baf ,_baf );
return cmapName {_bgac },_g .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_baf [0]);};}else {if _bb .IsWhiteSpace (_baf [0]){break ;}else if (_baf [0]=='/')||(_baf [0]=='[')||(_baf [0]=='(')||(_baf [0]==']')||(_baf [0]=='<')||(_baf [0]=='>'){break ;
}else if _baf [0]=='#'{_eee ,_bbgf :=_eda ._eag .Peek (3);if _bbgf !=nil {return cmapName {_bgac },_bbgf ;};_eda ._eag .Discard (3);_gcdg ,_bbgf :=_c .DecodeString (string (_eee [1:3]));if _bbgf !=nil {return cmapName {_bgac },_bbgf ;};_bgac +=string (_gcdg );
}else {_bbd ,_ :=_eda ._eag .ReadByte ();_bgac +=string (_bbd );};};};return cmapName {_bgac },nil ;};type cmapObject interface{};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (_eggb *cMapParser )skipSpaces ()(int ,error ){_gbgd :=0;
for {_bef ,_gfbc :=_eggb ._eag .Peek (1);if _gfbc !=nil {return 0,_gfbc ;};if _bb .IsWhiteSpace (_bef [0]){_eggb ._eag .ReadByte ();_gbgd ++;}else {break ;};};return _gbgd ,nil ;};func _bdbe (_cab ,_bfca int )int {if _cab < _bfca {return _cab ;};return _bfca ;
};type integer struct{_abc bool ;_aec int ;};func (cmap *CMap )computeInverseMappings (){for _cff ,_fde :=range cmap ._ag {if _fdf ,_gcd :=cmap ._df [_fde ];!_gcd ||(_gcd &&_fdf > _cff ){cmap ._df [_fde ]=_cff ;};};for _ee ,_adf :=range cmap ._bfe {if _gge ,_dfc :=cmap ._eg [_adf ];
!_dfc ||(_dfc &&_gge > _ee ){cmap ._eg [_adf ]=_ee ;};};_bc .Slice (cmap ._ff ,func (_ggc ,_gfb int )bool {return cmap ._ff [_ggc ].Low < cmap ._ff [_gfb ].Low });};func _cefd (_beg cmapHexString )CharCode {_cgaa :=CharCode (0);for _ ,_ggb :=range _beg ._gbcb {_cgaa <<=8;
_cgaa |=CharCode (_ggb );};return _cgaa ;};