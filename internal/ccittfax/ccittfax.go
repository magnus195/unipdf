//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";
	_e "github.com/magnus195/unipdf/v3/internal/bitwise";_fa "io";_c "math";);func (_cc tiffType )String ()string {switch _cc {case _dee :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _ffd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _fab :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func init (){_g =&treeNode {_fded :true ,_fcgb :_fe };
_a =&treeNode {_fcgb :_fee ,_ccg :_g };_a ._dec =_a ;_df =&tree {_bfc :&treeNode {}};if _dg :=_df .fillWithNode (12,0,_a );_dg !=nil {panic (_dg .Error ());};if _gf :=_df .fillWithNode (12,1,_g );_gf !=nil {panic (_gf .Error ());};_fb =&tree {_bfc :&treeNode {}};
for _gb :=0;_gb < len (_fg );_gb ++{for _ae :=0;_ae < len (_fg [_gb ]);_ae ++{if _de :=_fb .fill (_gb +2,int (_fg [_gb ][_ae ]),int (_ff [_gb ][_ae ]));_de !=nil {panic (_de .Error ());};};};if _gc :=_fb .fillWithNode (12,0,_a );_gc !=nil {panic (_gc .Error ());
};if _eb :=_fb .fillWithNode (12,1,_g );_eb !=nil {panic (_eb .Error ());};_fad =&tree {_bfc :&treeNode {}};for _ab :=0;_ab < len (_fd );_ab ++{for _ed :=0;_ed < len (_fd [_ab ]);_ed ++{if _aba :=_fad .fill (_ab +4,int (_fd [_ab ][_ed ]),int (_bc [_ab ][_ed ]));
_aba !=nil {panic (_aba .Error ());};};};if _ee :=_fad .fillWithNode (12,0,_a );_ee !=nil {panic (_ee .Error ());};if _gcc :=_fad .fillWithNode (12,1,_g );_gcc !=nil {panic (_gcc .Error ());};_ce =&tree {_bfc :&treeNode {}};if _gfa :=_ce .fill (4,1,_ga );
_gfa !=nil {panic (_gfa .Error ());};if _be :=_ce .fill (3,1,_fbb );_be !=nil {panic (_be .Error ());};if _fba :=_ce .fill (1,1,0);_fba !=nil {panic (_fba .Error ());};if _bed :=_ce .fill (3,3,1);_bed !=nil {panic (_bed .Error ());};if _cf :=_ce .fill (6,3,2);
_cf !=nil {panic (_cf .Error ());};if _ea :=_ce .fill (7,3,3);_ea !=nil {panic (_ea .Error ());};if _dd :=_ce .fill (3,2,-1);_dd !=nil {panic (_dd .Error ());};if _ec :=_ce .fill (6,2,-2);_ec !=nil {panic (_ec .Error ());};if _dff :=_ce .fill (7,2,-3);
_dff !=nil {panic (_dff .Error ());};};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_ggae *Encoder )Encode (pixels [][]byte )[]byte {if _ggae .BlackIs1 {_cab =0;
_ddf =1;}else {_cab =1;_ddf =0;};if _ggae .K ==0{return _ggae .encodeG31D (pixels );};if _ggae .K > 0{return _ggae .encodeG32D (pixels );};if _ggae .K < 0{return _ggae .encodeG4 (pixels );};return nil ;};func _cfcg (_feef []byte ,_bbd bool ,_fade int )(int ,int ){_dffd :=0;
for _fade < len (_feef ){if _bbd {if _feef [_fade ]!=_cab {break ;};}else {if _feef [_fade ]!=_ddf {break ;};};_dffd ++;_fade ++;};return _dffd ,_fade ;};func _edad (_gfca ,_dcab []byte ,_befb ,_dcb ,_ege int )([]byte ,int ,int ){_gda :=_efe (_gfca ,_ege );
_gcgdg :=_dcb >=0&&_gfca [_dcb ]==_cab ||_dcb ==-1;_dcab ,_befb =_eac (_dcab ,_befb ,_db );var _bada int ;if _dcb > -1{_bada =_ege -_dcb ;}else {_bada =_ege -_dcb -1;};_dcab ,_befb =_fac (_dcab ,_befb ,_bada ,_gcgdg );_gcgdg =!_gcgdg ;_fdb :=_gda -_ege ;
_dcab ,_befb =_fac (_dcab ,_befb ,_fdb ,_gcgdg );_dcb =_gda ;return _dcab ,_befb ,_dcb ;};func _gfbd (_fdg int )([]byte ,int ){var _dcf []byte ;for _agc :=0;_agc < 2;_agc ++{_dcf ,_fdg =_eac (_dcf ,_fdg ,_af );};return _dcf ,_fdg %8;};func (_effg *Decoder )looseFetchEOL ()(bool ,error ){_aaa ,_caf :=_effg ._cea .ReadBits (12);
if _caf !=nil {return false ,_caf ;};switch _aaa {case 0x1:return true ,nil ;case 0x0:for {_gbb ,_bf :=_effg ._cea .ReadBool ();if _bf !=nil {return false ,_bf ;};if _gbb {return true ,nil ;};};default:return false ,nil ;};};func init (){_eed =make (map[int ]code );
_eed [0]=code {Code :13<<8|3<<6,BitsWritten :10};_eed [1]=code {Code :2<<(5+8),BitsWritten :3};_eed [2]=code {Code :3<<(6+8),BitsWritten :2};_eed [3]=code {Code :2<<(6+8),BitsWritten :2};_eed [4]=code {Code :3<<(5+8),BitsWritten :3};_eed [5]=code {Code :3<<(4+8),BitsWritten :4};
_eed [6]=code {Code :2<<(4+8),BitsWritten :4};_eed [7]=code {Code :3<<(3+8),BitsWritten :5};_eed [8]=code {Code :5<<(2+8),BitsWritten :6};_eed [9]=code {Code :4<<(2+8),BitsWritten :6};_eed [10]=code {Code :4<<(1+8),BitsWritten :7};_eed [11]=code {Code :5<<(1+8),BitsWritten :7};
_eed [12]=code {Code :7<<(1+8),BitsWritten :7};_eed [13]=code {Code :4<<8,BitsWritten :8};_eed [14]=code {Code :7<<8,BitsWritten :8};_eed [15]=code {Code :12<<8,BitsWritten :9};_eed [16]=code {Code :5<<8|3<<6,BitsWritten :10};_eed [17]=code {Code :6<<8,BitsWritten :10};
_eed [18]=code {Code :2<<8,BitsWritten :10};_eed [19]=code {Code :12<<8|7<<5,BitsWritten :11};_eed [20]=code {Code :13<<8,BitsWritten :11};_eed [21]=code {Code :13<<8|4<<5,BitsWritten :11};_eed [22]=code {Code :6<<8|7<<5,BitsWritten :11};_eed [23]=code {Code :5<<8,BitsWritten :11};
_eed [24]=code {Code :2<<8|7<<5,BitsWritten :11};_eed [25]=code {Code :3<<8,BitsWritten :11};_eed [26]=code {Code :12<<8|10<<4,BitsWritten :12};_eed [27]=code {Code :12<<8|11<<4,BitsWritten :12};_eed [28]=code {Code :12<<8|12<<4,BitsWritten :12};_eed [29]=code {Code :12<<8|13<<4,BitsWritten :12};
_eed [30]=code {Code :6<<8|8<<4,BitsWritten :12};_eed [31]=code {Code :6<<8|9<<4,BitsWritten :12};_eed [32]=code {Code :6<<8|10<<4,BitsWritten :12};_eed [33]=code {Code :6<<8|11<<4,BitsWritten :12};_eed [34]=code {Code :13<<8|2<<4,BitsWritten :12};_eed [35]=code {Code :13<<8|3<<4,BitsWritten :12};
_eed [36]=code {Code :13<<8|4<<4,BitsWritten :12};_eed [37]=code {Code :13<<8|5<<4,BitsWritten :12};_eed [38]=code {Code :13<<8|6<<4,BitsWritten :12};_eed [39]=code {Code :13<<8|7<<4,BitsWritten :12};_eed [40]=code {Code :6<<8|12<<4,BitsWritten :12};_eed [41]=code {Code :6<<8|13<<4,BitsWritten :12};
_eed [42]=code {Code :13<<8|10<<4,BitsWritten :12};_eed [43]=code {Code :13<<8|11<<4,BitsWritten :12};_eed [44]=code {Code :5<<8|4<<4,BitsWritten :12};_eed [45]=code {Code :5<<8|5<<4,BitsWritten :12};_eed [46]=code {Code :5<<8|6<<4,BitsWritten :12};_eed [47]=code {Code :5<<8|7<<4,BitsWritten :12};
_eed [48]=code {Code :6<<8|4<<4,BitsWritten :12};_eed [49]=code {Code :6<<8|5<<4,BitsWritten :12};_eed [50]=code {Code :5<<8|2<<4,BitsWritten :12};_eed [51]=code {Code :5<<8|3<<4,BitsWritten :12};_eed [52]=code {Code :2<<8|4<<4,BitsWritten :12};_eed [53]=code {Code :3<<8|7<<4,BitsWritten :12};
_eed [54]=code {Code :3<<8|8<<4,BitsWritten :12};_eed [55]=code {Code :2<<8|7<<4,BitsWritten :12};_eed [56]=code {Code :2<<8|8<<4,BitsWritten :12};_eed [57]=code {Code :5<<8|8<<4,BitsWritten :12};_eed [58]=code {Code :5<<8|9<<4,BitsWritten :12};_eed [59]=code {Code :2<<8|11<<4,BitsWritten :12};
_eed [60]=code {Code :2<<8|12<<4,BitsWritten :12};_eed [61]=code {Code :5<<8|10<<4,BitsWritten :12};_eed [62]=code {Code :6<<8|6<<4,BitsWritten :12};_eed [63]=code {Code :6<<8|7<<4,BitsWritten :12};_gad =make (map[int ]code );_gad [0]=code {Code :53<<8,BitsWritten :8};
_gad [1]=code {Code :7<<(2+8),BitsWritten :6};_gad [2]=code {Code :7<<(4+8),BitsWritten :4};_gad [3]=code {Code :8<<(4+8),BitsWritten :4};_gad [4]=code {Code :11<<(4+8),BitsWritten :4};_gad [5]=code {Code :12<<(4+8),BitsWritten :4};_gad [6]=code {Code :14<<(4+8),BitsWritten :4};
_gad [7]=code {Code :15<<(4+8),BitsWritten :4};_gad [8]=code {Code :19<<(3+8),BitsWritten :5};_gad [9]=code {Code :20<<(3+8),BitsWritten :5};_gad [10]=code {Code :7<<(3+8),BitsWritten :5};_gad [11]=code {Code :8<<(3+8),BitsWritten :5};_gad [12]=code {Code :8<<(2+8),BitsWritten :6};
_gad [13]=code {Code :3<<(2+8),BitsWritten :6};_gad [14]=code {Code :52<<(2+8),BitsWritten :6};_gad [15]=code {Code :53<<(2+8),BitsWritten :6};_gad [16]=code {Code :42<<(2+8),BitsWritten :6};_gad [17]=code {Code :43<<(2+8),BitsWritten :6};_gad [18]=code {Code :39<<(1+8),BitsWritten :7};
_gad [19]=code {Code :12<<(1+8),BitsWritten :7};_gad [20]=code {Code :8<<(1+8),BitsWritten :7};_gad [21]=code {Code :23<<(1+8),BitsWritten :7};_gad [22]=code {Code :3<<(1+8),BitsWritten :7};_gad [23]=code {Code :4<<(1+8),BitsWritten :7};_gad [24]=code {Code :40<<(1+8),BitsWritten :7};
_gad [25]=code {Code :43<<(1+8),BitsWritten :7};_gad [26]=code {Code :19<<(1+8),BitsWritten :7};_gad [27]=code {Code :36<<(1+8),BitsWritten :7};_gad [28]=code {Code :24<<(1+8),BitsWritten :7};_gad [29]=code {Code :2<<8,BitsWritten :8};_gad [30]=code {Code :3<<8,BitsWritten :8};
_gad [31]=code {Code :26<<8,BitsWritten :8};_gad [32]=code {Code :27<<8,BitsWritten :8};_gad [33]=code {Code :18<<8,BitsWritten :8};_gad [34]=code {Code :19<<8,BitsWritten :8};_gad [35]=code {Code :20<<8,BitsWritten :8};_gad [36]=code {Code :21<<8,BitsWritten :8};
_gad [37]=code {Code :22<<8,BitsWritten :8};_gad [38]=code {Code :23<<8,BitsWritten :8};_gad [39]=code {Code :40<<8,BitsWritten :8};_gad [40]=code {Code :41<<8,BitsWritten :8};_gad [41]=code {Code :42<<8,BitsWritten :8};_gad [42]=code {Code :43<<8,BitsWritten :8};
_gad [43]=code {Code :44<<8,BitsWritten :8};_gad [44]=code {Code :45<<8,BitsWritten :8};_gad [45]=code {Code :4<<8,BitsWritten :8};_gad [46]=code {Code :5<<8,BitsWritten :8};_gad [47]=code {Code :10<<8,BitsWritten :8};_gad [48]=code {Code :11<<8,BitsWritten :8};
_gad [49]=code {Code :82<<8,BitsWritten :8};_gad [50]=code {Code :83<<8,BitsWritten :8};_gad [51]=code {Code :84<<8,BitsWritten :8};_gad [52]=code {Code :85<<8,BitsWritten :8};_gad [53]=code {Code :36<<8,BitsWritten :8};_gad [54]=code {Code :37<<8,BitsWritten :8};
_gad [55]=code {Code :88<<8,BitsWritten :8};_gad [56]=code {Code :89<<8,BitsWritten :8};_gad [57]=code {Code :90<<8,BitsWritten :8};_gad [58]=code {Code :91<<8,BitsWritten :8};_gad [59]=code {Code :74<<8,BitsWritten :8};_gad [60]=code {Code :75<<8,BitsWritten :8};
_gad [61]=code {Code :50<<8,BitsWritten :8};_gad [62]=code {Code :51<<8,BitsWritten :8};_gad [63]=code {Code :52<<8,BitsWritten :8};_gff =make (map[int ]code );_gff [64]=code {Code :3<<8|3<<6,BitsWritten :10};_gff [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_gff [192]=code {Code :12<<8|9<<4,BitsWritten :12};_gff [256]=code {Code :5<<8|11<<4,BitsWritten :12};_gff [320]=code {Code :3<<8|3<<4,BitsWritten :12};_gff [384]=code {Code :3<<8|4<<4,BitsWritten :12};_gff [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_gff [512]=code {Code :3<<8|12<<3,BitsWritten :13};_gff [576]=code {Code :3<<8|13<<3,BitsWritten :13};_gff [640]=code {Code :2<<8|10<<3,BitsWritten :13};_gff [704]=code {Code :2<<8|11<<3,BitsWritten :13};_gff [768]=code {Code :2<<8|12<<3,BitsWritten :13};
_gff [832]=code {Code :2<<8|13<<3,BitsWritten :13};_gff [896]=code {Code :3<<8|18<<3,BitsWritten :13};_gff [960]=code {Code :3<<8|19<<3,BitsWritten :13};_gff [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_gff [1088]=code {Code :3<<8|21<<3,BitsWritten :13};
_gff [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_gff [1216]=code {Code :119<<3,BitsWritten :13};_gff [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_gff [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_gff [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_gff [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_gff [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_gff [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_gff [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_gff [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_gbg =make (map[int ]code );_gbg [64]=code {Code :27<<(3+8),BitsWritten :5};_gbg [128]=code {Code :18<<(3+8),BitsWritten :5};_gbg [192]=code {Code :23<<(2+8),BitsWritten :6};_gbg [256]=code {Code :55<<(1+8),BitsWritten :7};_gbg [320]=code {Code :54<<8,BitsWritten :8};
_gbg [384]=code {Code :55<<8,BitsWritten :8};_gbg [448]=code {Code :100<<8,BitsWritten :8};_gbg [512]=code {Code :101<<8,BitsWritten :8};_gbg [576]=code {Code :104<<8,BitsWritten :8};_gbg [640]=code {Code :103<<8,BitsWritten :8};_gbg [704]=code {Code :102<<8,BitsWritten :9};
_gbg [768]=code {Code :102<<8|1<<7,BitsWritten :9};_gbg [832]=code {Code :105<<8,BitsWritten :9};_gbg [896]=code {Code :105<<8|1<<7,BitsWritten :9};_gbg [960]=code {Code :106<<8,BitsWritten :9};_gbg [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_gbg [1088]=code {Code :107<<8,BitsWritten :9};
_gbg [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_gbg [1216]=code {Code :108<<8,BitsWritten :9};_gbg [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_gbg [1344]=code {Code :109<<8,BitsWritten :9};_gbg [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_gbg [1472]=code {Code :76<<8,BitsWritten :9};
_gbg [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_gbg [1600]=code {Code :77<<8,BitsWritten :9};_gbg [1664]=code {Code :24<<(2+8),BitsWritten :6};_gbg [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_cd =make (map[int ]code );_cd [1792]=code {Code :1<<8,BitsWritten :11};
_cd [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_cd [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_cd [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_cd [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_cd [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_cd [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_cd [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_cd [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_cd [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_cd [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_cd [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_cd [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ba =make (map[int ]byte );_ba [0]=0xFF;_ba [1]=0xFE;_ba [2]=0xFC;_ba [3]=0xF8;_ba [4]=0xF0;_ba [5]=0xE0;_ba [6]=0xC0;_ba [7]=0x80;_ba [8]=0x00;};func (_dcg *Decoder )decodeRun (_cgf *tree )(int ,error ){var _dgcf int ;
_fga :=_cgf ._bfc ;for {_gaa ,_fcb :=_dcg ._cea .ReadBool ();if _fcb !=nil {return 0,_fcb ;};_fga =_fga .walk (_gaa );if _fga ==nil {return 0,_f .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _fga ._fded {_dgcf +=_fga ._fcgb ;switch {case _fga ._fcgb >=64:_fga =_cgf ._bfc ;case _fga ._fcgb >=0:return _dgcf ,nil ;default:return _dcg ._bg ,nil ;};};};};func _gec (_adcb [][]byte )[][]byte {_bdeb :=make ([]byte ,len (_adcb [0]));for _aada :=range _bdeb {_bdeb [_aada ]=_cab ;
};_adcb =append (_adcb ,[]byte {});for _bea :=len (_adcb )-1;_bea > 0;_bea --{_adcb [_bea ]=_adcb [_bea -1];};_adcb [0]=_bdeb ;return _adcb ;};func (_aef *Encoder )encodeG31D (_bafb [][]byte )[]byte {var _acf []byte ;_dba :=0;for _cedb :=range _bafb {if _aef .Rows > 0&&!_aef .EndOfBlock &&_cedb ==_aef .Rows {break ;
};_egb ,_fbdc :=_eefd (_bafb [_cedb ],_dba ,_af );_acf =_aef .appendEncodedRow (_acf ,_egb ,_dba );if _aef .EncodedByteAlign {_fbdc =0;};_dba =_fbdc ;};if _aef .EndOfBlock {_ace ,_ :=_eeg (_dba );_acf =_aef .appendEncodedRow (_acf ,_ace ,_dba );};return _acf ;
};type Decoder struct{_bg int ;_cce int ;_fbd int ;_aed []byte ;_baf int ;_ecf bool ;_fcg bool ;_ced bool ;_bcc bool ;_gd bool ;_ac bool ;_bcg bool ;_ddc int ;_dfe int ;_adc []int ;_ffe []int ;_ge int ;_gbf int ;_cee int ;_dbf int ;_cea *_e .Reader ;_bd tiffType ;
_gcg error ;};func (_cb *Decoder )getNextChangingElement (_cfg int ,_dfb bool )int {_dad :=0;if !_dfb {_dad =1;};_ddag :=int (uint32 (_cb ._dbf )&0xFFFFFFFE)+_dad ;if _ddag > 2{_ddag -=2;};if _cfg ==0{return _ddag ;};for _fbae :=_ddag ;_fbae < _cb ._ge ;
_fbae +=2{if _cfg < _cb ._adc [_fbae ]{_cb ._dbf =_fbae ;return _fbae ;};};return -1;};func (_ecd *Decoder )decode2D ()error {_ecd ._ge =_ecd ._gbf ;_ecd ._ffe ,_ecd ._adc =_ecd ._adc ,_ecd ._ffe ;_eab :=true ;var (_aad bool ;_eba int ;_dce error ;);_ecd ._gbf =0;
_cega :for _eba < _ecd ._bg {_eeda :=_ce ._bfc ;for {_aad ,_dce =_ecd ._cea .ReadBool ();if _dce !=nil {return _dce ;};_eeda =_eeda .walk (_aad );if _eeda ==nil {continue _cega ;};if !_eeda ._fded {continue ;};switch _eeda ._fcgb {case _fbb :var _eec int ;
if _eab {_eec ,_dce =_ecd .decodeRun (_fad );}else {_eec ,_dce =_ecd .decodeRun (_fb );};if _dce !=nil {return _dce ;};_eba +=_eec ;_ecd ._ffe [_ecd ._gbf ]=_eba ;_ecd ._gbf ++;if _eab {_eec ,_dce =_ecd .decodeRun (_fb );}else {_eec ,_dce =_ecd .decodeRun (_fad );
};if _dce !=nil {return _dce ;};_eba +=_eec ;_ecd ._ffe [_ecd ._gbf ]=_eba ;_ecd ._gbf ++;case _ga :_afb :=_ecd .getNextChangingElement (_eba ,_eab )+1;if _afb >=_ecd ._ge {_eba =_ecd ._bg ;}else {_eba =_ecd ._adc [_afb ];};default:_edg :=_ecd .getNextChangingElement (_eba ,_eab );
if _edg >=_ecd ._ge ||_edg ==-1{_eba =_ecd ._bg +_eeda ._fcgb ;}else {_eba =_ecd ._adc [_edg ]+_eeda ._fcgb ;};_ecd ._ffe [_ecd ._gbf ]=_eba ;_ecd ._gbf ++;_eab =!_eab ;};continue _cega ;};};return nil ;};var _fd =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func _eefd (_cbf []byte ,_ecdc int ,_aca code )([]byte ,int ){_aadg :=true ;var _eca []byte ;_eca ,_ecdc =_eac (nil ,_ecdc ,_aca );_ffab :=0;var _caag int ;for _ffab < len (_cbf ){_caag ,_ffab =_cfcg (_cbf ,_aadg ,_ffab );_eca ,_ecdc =_fac (_eca ,_ecdc ,_caag ,_aadg );
_aadg =!_aadg ;};return _eca ,_ecdc %8;};func _eaba (_faaa int )([]byte ,int ){var _ffff []byte ;for _cdf :=0;_cdf < 6;_cdf ++{_ffff ,_faaa =_eac (_ffff ,_faaa ,_abc );};return _ffff ,_faaa %8;};type tiffType int ;func _bbe (_dge []byte ,_dfeb int )([]byte ,int ){return _eac (_dge ,_dfeb ,_ca )};
func (_bdb *Encoder )appendEncodedRow (_cdgg ,_cbb []byte ,_daa int )[]byte {if len (_cdgg )> 0&&_daa !=0&&!_bdb .EncodedByteAlign {_cdgg [len (_cdgg )-1]=_cdgg [len (_cdgg )-1]|_cbb [0];_cdgg =append (_cdgg ,_cbb [1:]...);}else {_cdgg =append (_cdgg ,_cbb ...);
};return _cdgg ;};func (_cebb *Decoder )tryFetchRTC2D ()(_ddg error ){_cebb ._cea .Mark ();var _gbd bool ;for _cde :=0;_cde < 5;_cde ++{_gbd ,_ddg =_cebb .tryFetchEOL1 ();if _ddg !=nil {if _f .Is (_ddg ,_fa .EOF ){if _cde ==0{break ;};return _gfb ;};};
if _gbd {continue ;};if _cde > 0{return _gfb ;};break ;};if _gbd {return _fa .EOF ;};_cebb ._cea .Reset ();return _ddg ;};func (_bccb *Decoder )decoderRowType41D ()error {if _bccb ._bcg {_bccb ._cea .Align ();};_bccb ._cea .Mark ();var (_aac bool ;_ded error ;
);if _bccb ._gd {_aac ,_ded =_bccb .tryFetchEOL ();if _ded !=nil {return _ded ;};if !_aac {return _fc ;};}else {_aac ,_ded =_bccb .looseFetchEOL ();if _ded !=nil {return _ded ;};};if !_aac {_bccb ._cea .Reset ();};if _aac &&_bccb ._ac {_bccb ._cea .Mark ();
for _degb :=0;_degb < 5;_degb ++{_aac ,_ded =_bccb .tryFetchEOL ();if _ded !=nil {if _f .Is (_ded ,_fa .EOF ){if _degb ==0{break ;};return _gfb ;};};if _aac {continue ;};if _degb > 0{return _gfb ;};break ;};if _aac {return _fa .EOF ;};_bccb ._cea .Reset ();
};if _ded =_bccb .decode1D ();_ded !=nil {return _ded ;};return nil ;};func (_da *Decoder )decodeRowType6 ()error {if _da ._bcg {_da ._cea .Align ();};if _da ._ac {_da ._cea .Mark ();_gbea ,_abd :=_da .tryFetchEOL ();if _abd !=nil {return _abd ;};if _gbea {_gbea ,_abd =_da .tryFetchEOL ();
if _abd !=nil {return _abd ;};if _gbea {return _fa .EOF ;};};_da ._cea .Reset ();};return _da .decode2D ();};var (_g *treeNode ;_a *treeNode ;_fb *tree ;_fad *tree ;_df *tree ;_ce *tree ;_fe =-2000;_fee =-1000;_ga =-3000;_fbb =-4000;);func _efe (_dcc []byte ,_cbc int )int {if _cbc >=len (_dcc ){return _cbc ;
};if _cbc < -1{_cbc =-1;};var _eda byte ;if _cbc > -1{_eda =_dcc [_cbc ];}else {_eda =_cab ;};_dfd :=_cbc +1;for _dfd < len (_dcc ){if _dcc [_dfd ]!=_eda {break ;};_dfd ++;};return _dfd ;};func (_efgc *Decoder )decodeG32D ()error {_efgc ._ge =_efgc ._gbf ;
_efgc ._ffe ,_efgc ._adc =_efgc ._adc ,_efgc ._ffe ;_gbe :=true ;var (_fdd bool ;_fde int ;_abe error ;);_efgc ._gbf =0;_gcf :for _fde < _efgc ._bg {_deeg :=_ce ._bfc ;for {_fdd ,_abe =_efgc ._cea .ReadBool ();if _abe !=nil {return _abe ;};_deeg =_deeg .walk (_fdd );
if _deeg ==nil {continue _gcf ;};if !_deeg ._fded {continue ;};switch _deeg ._fcgb {case _fbb :var _cebf int ;if _gbe {_cebf ,_abe =_efgc .decodeRun (_fad );}else {_cebf ,_abe =_efgc .decodeRun (_fb );};if _abe !=nil {return _abe ;};_fde +=_cebf ;_efgc ._ffe [_efgc ._gbf ]=_fde ;
_efgc ._gbf ++;if _gbe {_cebf ,_abe =_efgc .decodeRun (_fb );}else {_cebf ,_abe =_efgc .decodeRun (_fad );};if _abe !=nil {return _abe ;};_fde +=_cebf ;_efgc ._ffe [_efgc ._gbf ]=_fde ;_efgc ._gbf ++;case _ga :_caa :=_efgc .getNextChangingElement (_fde ,_gbe )+1;
if _caa >=_efgc ._ge {_fde =_efgc ._bg ;}else {_fde =_efgc ._adc [_caa ];};default:_gee :=_efgc .getNextChangingElement (_fde ,_gbe );if _gee >=_efgc ._ge ||_gee ==-1{_fde =_efgc ._bg +_deeg ._fcgb ;}else {_fde =_efgc ._adc [_gee ]+_deeg ._fcgb ;};_efgc ._ffe [_efgc ._gbf ]=_fde ;
_efgc ._gbf ++;_gbe =!_gbe ;};continue _gcf ;};};return nil ;};func _dab (_dfbc ,_dbc int )code {var _ecaf code ;switch _dbc -_dfbc {case -1:_ecaf =_dgb ;case -2:_ecaf =_ad ;case -3:_ecaf =_cad ;case 0:_ecaf =_bb ;case 1:_ecaf =_bbf ;case 2:_ecaf =_ef ;
case 3:_ecaf =_eg ;};return _ecaf ;};func (_bde *Decoder )decodeRowType4 ()error {if !_bde ._ecf {return _bde .decoderRowType41D ();};if _bde ._bcg {_bde ._cea .Align ();};_bde ._cea .Mark ();_ag ,_dc :=_bde .tryFetchEOL ();if _dc !=nil {return _dc ;};
if !_ag &&_bde ._gd {_bde ._cee ++;if _bde ._cee > _bde ._baf {return _fc ;};_bde ._cea .Reset ();};if !_ag {_bde ._cea .Reset ();};_fbe ,_dc :=_bde ._cea .ReadBool ();if _dc !=nil {return _dc ;};if _fbe {if _ag &&_bde ._ac {if _dc =_bde .tryFetchRTC2D ();
_dc !=nil {return _dc ;};};_dc =_bde .decode1D ();}else {_dc =_bde .decode2D ();};if _dc !=nil {return _dc ;};return nil ;};func (_dgbd *Decoder )tryFetchEOL ()(bool ,error ){_gccf ,_fbed :=_dgbd ._cea .ReadBits (12);if _fbed !=nil {return false ,_fbed ;
};return _gccf ==0x1,nil ;};func (_gdc *Decoder )decode1D ()error {var (_faa int ;_abca error ;);_dbd :=true ;_gdc ._gbf =0;for {var _faae int ;if _dbd {_faae ,_abca =_gdc .decodeRun (_fad );}else {_faae ,_abca =_gdc .decodeRun (_fb );};if _abca !=nil {return _abca ;
};_faa +=_faae ;_gdc ._ffe [_gdc ._gbf ]=_faa ;_gdc ._gbf ++;_dbd =!_dbd ;if _faa >=_gdc ._bg {break ;};};return nil ;};func _bfe (_aec ,_bac []byte ,_gcgd int )int {_gdg :=_efe (_bac ,_gcgd );if _gdg < len (_bac )&&(_gcgd ==-1&&_bac [_gdg ]==_cab ||_gcgd >=0&&_gcgd < len (_aec )&&_aec [_gcgd ]==_bac [_gdg ]||_gcgd >=len (_aec )&&_aec [_gcgd -1]!=_bac [_gdg ]){_gdg =_efe (_bac ,_gdg );
};return _gdg ;};type treeNode struct{_dec *treeNode ;_ccg *treeNode ;_fcgb int ;_efeb bool ;_fded bool ;};var _ff =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func _gca (_feb ,_dde []byte ,_cec int ,_acd bool )int {_begc :=_efe (_dde ,_cec );if _begc < len (_dde )&&(_cec ==-1&&_dde [_begc ]==_cab ||_cec >=0&&_cec < len (_feb )&&_feb [_cec ]==_dde [_begc ]||_cec >=len (_feb )&&_acd &&_dde [_begc ]==_cab ||_cec >=len (_feb )&&!_acd &&_dde [_begc ]==_ddf ){_begc =_efe (_dde ,_begc );
};return _begc ;};func (_bfb *tree )fillWithNode (_ecga ,_acda int ,_dcfe *treeNode )error {_bdd :=_bfb ._bfc ;for _gcb :=0;_gcb < _ecga ;_gcb ++{_ccfg :=uint (_ecga -1-_gcb );_acg :=((_acda >>_ccfg )&1)!=0;_acc :=_bdd .walk (_acg );if _acc !=nil {if _acc ._fded {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_bdd =_acc ;continue ;};if _gcb ==_ecga -1{_acc =_dcfe ;}else {_acc =&treeNode {};};if _acda ==0{_acc ._efeb =true ;};_bdd .set (_acg ,_acc );_bdd =_acc ;};return nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_deg :=&Decoder {_cea :_e .NewReader (data ),_bg :options .Columns ,_cce :options .Rows ,_baf :options .DamagedRowsBeforeError ,_aed :make ([]byte ,(options .Columns +7)/8),_adc :make ([]int ,options .Columns +2),_ffe :make ([]int ,options .Columns +2),_bcg :options .EncodedByteAligned ,_bcc :options .BlackIsOne ,_gd :options .EndOfLine ,_ac :options .EndOfBlock };
switch {case options .K ==0:_deg ._bd =_ffd ;if len (data )< 20{return nil ,_f .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_gg :=data [:20];if _gg [0]!=0||(_gg [1]>>4!=1&&_gg [1]!=1){_deg ._bd =_dee ;
_afg :=(uint16 (_gg [0])<<8+uint16 (_gg [1]&0xff))>>4;for _cg :=12;_cg < 160;_cg ++{_afg =(_afg <<1)+uint16 ((_gg [_cg /8]>>uint16 (7-(_cg %8)))&0x01);if _afg &0xfff==1{_deg ._bd =_ffd ;break ;};};};case options .K < 0:_deg ._bd =_fab ;case options .K > 0:_deg ._bd =_ffd ;
_deg ._ecf =true ;};switch _deg ._bd {case _dee ,_ffd ,_fab :default:return nil ,_f .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _deg ,nil ;};var _fg =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func _eeg (_fefg int )([]byte ,int ){var _cfb []byte ;for _bbfa :=0;_bbfa < 6;_bbfa ++{_cfb ,_fefg =_eac (_cfb ,_fefg ,_af );};return _cfb ,_fefg %8;};type code struct{Code uint16 ;BitsWritten int ;};func (_gga *Decoder )decodeRow ()(_efg error ){if !_gga ._ac &&_gga ._cce > 0&&_gga ._cce ==_gga ._fbd {return _fa .EOF ;
};switch _gga ._bd {case _dee :_efg =_gga .decodeRowType2 ();case _ffd :_efg =_gga .decodeRowType4 ();case _fab :_efg =_gga .decodeRowType6 ();};if _efg !=nil {return _efg ;};_cfc :=0;_bgb :=true ;_gga ._dbf =0;for _gfc :=0;_gfc < _gga ._gbf ;_gfc ++{_cfe :=_gga ._bg ;
if _gfc !=_gga ._gbf {_cfe =_gga ._ffe [_gfc ];};if _cfe > _gga ._bg {_cfe =_gga ._bg ;};_aa :=_cfc /8;for _cfc %8!=0&&_cfe -_cfc > 0{var _bdg byte ;if !_bgb {_bdg =1<<uint (7-(_cfc %8));};_gga ._aed [_aa ]|=_bdg ;_cfc ++;};if _cfc %8==0{_aa =_cfc /8;var _ceb byte ;
if !_bgb {_ceb =0xff;};for _cfe -_cfc > 7{_gga ._aed [_aa ]=_ceb ;_cfc +=8;_aa ++;};};for _cfe -_cfc > 0{if _cfc %8==0{_gga ._aed [_aa ]=0;};var _aaf byte ;if !_bgb {_aaf =1<<uint (7-(_cfc %8));};_gga ._aed [_aa ]|=_aaf ;_cfc ++;};_bgb =!_bgb ;};if _cfc !=_gga ._bg {return _f .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_gga ._ddc =(_cfc +7)/8;_gga ._fbd ++;return nil ;};func _eac (_fgce []byte ,_fcbc int ,_feeb code )([]byte ,int ){_ega :=0;for _ega < _feeb .BitsWritten {_eabd :=_fcbc /8;_bad :=_fcbc %8;if _eabd >=len (_fgce ){_fgce =append (_fgce ,0);};_fca :=8-_bad ;
_dag :=_feeb .BitsWritten -_ega ;if _fca > _dag {_fca =_dag ;};if _ega < 8{_fgce [_eabd ]=_fgce [_eabd ]|byte (_feeb .Code >>uint (8+_bad -_ega ))&_ba [8-_fca -_bad ];}else {_fgce [_eabd ]=_fgce [_eabd ]|(byte (_feeb .Code <<uint (_ega -8))&_ba [8-_fca ])>>uint (_bad );
};_fcbc +=_fca ;_ega +=_fca ;};return _fgce ,_fcbc ;};func (_eff *Decoder )fetch ()error {if _eff ._ddc ==-1{return nil ;};if _eff ._dfe < _eff ._ddc {return nil ;};_eff ._ddc =0;_dea :=_eff .decodeRow ();if _dea !=nil {if !_f .Is (_dea ,_fa .EOF ){return _dea ;
};if _eff ._ddc !=0{return _dea ;};_eff ._ddc =-1;};_eff ._dfe =0;return nil ;};var _bc =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_fadb *treeNode )set (_gaaf bool ,_cgg *treeNode ){if !_gaaf {_fadb ._dec =_cgg ;}else {_fadb ._ccg =_cgg ;
};};var (_cab byte =1;_ddf byte =0;);func (_cgfg *treeNode )walk (_fce bool )*treeNode {if _fce {return _cgfg ._ccg ;};return _cgfg ._dec ;};func _faf (_dfgc int ,_egd bool )(code ,int ,bool ){if _dfgc < 64{if _egd {return _gad [_dfgc ],0,true ;};return _eed [_dfgc ],0,true ;
};_ecc :=_dfgc /64;if _ecc > 40{return _cd [2560],_dfgc -2560,false ;};if _ecc > 27{return _cd [_ecc *64],_dfgc -_ecc *64,false ;};if _egd {return _gbg [_ecc *64],_dfgc -_ecc *64,false ;};return _gff [_ecc *64],_dfgc -_ecc *64,false ;};type tree struct{_bfc *treeNode };
func _fac (_bgg []byte ,_edb int ,_ccb int ,_dcfa bool )([]byte ,int ){var (_dcgg code ;_cdg bool ;);for !_cdg {_dcgg ,_ccb ,_cdg =_faf (_ccb ,_dcfa );_bgg ,_edb =_eac (_bgg ,_edb ,_dcgg );};return _bgg ,_edb ;};func (_bdga *Encoder )encodeG4 (_ffa [][]byte )[]byte {_dfc :=make ([][]byte ,len (_ffa ));
copy (_dfc ,_ffa );_dfc =_gec (_dfc );var _feeg []byte ;var _aeg int ;for _ead :=1;_ead < len (_dfc );_ead ++{if _bdga .Rows > 0&&!_bdga .EndOfBlock &&_ead ==(_bdga .Rows +1){break ;};var _aede []byte ;var _fgc ,_ccf ,_cbg int ;_bbg :=_aeg ;_fed :=-1;for _fed < len (_dfc [_ead ]){_fgc =_efe (_dfc [_ead ],_fed );
_ccf =_bfe (_dfc [_ead ],_dfc [_ead -1],_fed );_cbg =_efe (_dfc [_ead -1],_ccf );if _cbg < _fgc {_aede ,_bbg =_eac (_aede ,_bbg ,_ca );_fed =_cbg ;}else {if _c .Abs (float64 (_ccf -_fgc ))> 3{_aede ,_bbg ,_fed =_edad (_dfc [_ead ],_aede ,_bbg ,_fed ,_fgc );
}else {_aede ,_bbg =_gdga (_aede ,_bbg ,_fgc ,_ccf );_fed =_fgc ;};};};_feeg =_bdga .appendEncodedRow (_feeg ,_aede ,_aeg );if _bdga .EncodedByteAlign {_bbg =0;};_aeg =_bbg %8;};if _bdga .EndOfBlock {_fef ,_ :=_gfbd (_aeg );_feeg =_bdga .appendEncodedRow (_feeg ,_fef ,_aeg );
};return _feeg ;};var (_gfb =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_fc =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_fdde *Decoder )tryFetchEOL1 ()(bool ,error ){_geb ,_ddd :=_fdde ._cea .ReadBits (13);if _ddd !=nil {return false ,_ddd ;};return _geb ==0x3,nil ;};var (_eed map[int ]code ;_gad map[int ]code ;_gff map[int ]code ;_gbg map[int ]code ;_cd map[int ]code ;
_ba map[int ]byte ;_af =code {Code :1<<4,BitsWritten :12};_abc =code {Code :3<<3,BitsWritten :13};_dfg =code {Code :2<<3,BitsWritten :13};_ca =code {Code :1<<12,BitsWritten :4};_db =code {Code :1<<13,BitsWritten :3};_bb =code {Code :1<<15,BitsWritten :1};
_dgb =code {Code :3<<13,BitsWritten :3};_ad =code {Code :3<<10,BitsWritten :6};_cad =code {Code :3<<9,BitsWritten :7};_bbf =code {Code :2<<13,BitsWritten :3};_ef =code {Code :2<<10,BitsWritten :6};_eg =code {Code :2<<9,BitsWritten :7};);const (_ tiffType =iota ;
_dee ;_ffd ;_fab ;);func (_deec *Encoder )encodeG32D (_cfec [][]byte )[]byte {var _cgc []byte ;var _ede int ;for _dca :=0;_dca < len (_cfec );_dca +=_deec .K {if _deec .Rows > 0&&!_deec .EndOfBlock &&_dca ==_deec .Rows {break ;};_bef ,_fadg :=_eefd (_cfec [_dca ],_ede ,_abc );
_cgc =_deec .appendEncodedRow (_cgc ,_bef ,_ede );if _deec .EncodedByteAlign {_fadg =0;};_ede =_fadg ;for _adcg :=_dca +1;_adcg < (_dca +_deec .K )&&_adcg < len (_cfec );_adcg ++{if _deec .Rows > 0&&!_deec .EndOfBlock &&_adcg ==_deec .Rows {break ;};_ffc ,_bee :=_eac (nil ,_ede ,_dfg );
var _dead ,_afbg ,_gbfb int ;_gaag :=-1;for _gaag < len (_cfec [_adcg ]){_dead =_efe (_cfec [_adcg ],_gaag );_afbg =_bfe (_cfec [_adcg ],_cfec [_adcg -1],_gaag );_gbfb =_efe (_cfec [_adcg -1],_afbg );if _gbfb < _dead {_ffc ,_bee =_bbe (_ffc ,_bee );_gaag =_gbfb ;
}else {if _c .Abs (float64 (_afbg -_dead ))> 3{_ffc ,_bee ,_gaag =_edad (_cfec [_adcg ],_ffc ,_bee ,_gaag ,_dead );}else {_ffc ,_bee =_gdga (_ffc ,_bee ,_dead ,_afbg );_gaag =_dead ;};};};_cgc =_deec .appendEncodedRow (_cgc ,_ffc ,_ede );if _deec .EncodedByteAlign {_bee =0;
};_ede =_bee %8;};};if _deec .EndOfBlock {_effb ,_ :=_eaba (_ede );_cgc =_deec .appendEncodedRow (_cgc ,_effb ,_ede );};return _cgc ;};func (_edf *Decoder )decodeRowType2 ()error {if _edf ._bcg {_edf ._cea .Align ();};if _dgc :=_edf .decode1D ();_dgc !=nil {return _dgc ;
};return nil ;};func (_ccbe *tree )fill (_gdcg ,_bafbc ,_ebaf int )error {_faac :=_ccbe ._bfc ;for _ccd :=0;_ccd < _gdcg ;_ccd ++{_febf :=_gdcg -1-_ccd ;_eegb :=((_bafbc >>uint (_febf ))&1)!=0;_bgdc :=_faac .walk (_eegb );if _bgdc !=nil {if _bgdc ._fded {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_faac =_bgdc ;continue ;};_bgdc =&treeNode {};if _ccd ==_gdcg -1{_bgdc ._fcgb =_ebaf ;_bgdc ._fded =true ;};if _bafbc ==0{_bgdc ._efeb =true ;};_faac .set (_eegb ,_bgdc );_faac =_bgdc ;};return nil ;};func _gdga (_gdf []byte ,_dfff ,_cbd ,_gebb int )([]byte ,int ){_aeb :=_dab (_cbd ,_gebb );
_gdf ,_dfff =_eac (_gdf ,_dfff ,_aeb );return _gdf ,_dfff ;};func (_aedc *Decoder )Read (in []byte )(int ,error ){if _aedc ._gcg !=nil {return 0,_aedc ._gcg ;};_bgd :=len (in );var (_dda int ;_fff int ;);for _bgd !=0{if _aedc ._dfe >=_aedc ._ddc {if _ceg :=_aedc .fetch ();
_ceg !=nil {_aedc ._gcg =_ceg ;return 0,_ceg ;};};if _aedc ._ddc ==-1{return _dda ,_fa .EOF ;};switch {case _bgd <=_aedc ._ddc -_aedc ._dfe :_eef :=_aedc ._aed [_aedc ._dfe :_aedc ._dfe +_bgd ];for _ ,_geg :=range _eef {if !_aedc ._bcc {_geg =^_geg ;};
in [_fff ]=_geg ;_fff ++;};_dda +=len (_eef );_aedc ._dfe +=len (_eef );return _dda ,nil ;default:_bgc :=_aedc ._aed [_aedc ._dfe :];for _ ,_gfd :=range _bgc {if !_aedc ._bcc {_gfd =^_gfd ;};in [_fff ]=_gfd ;_fff ++;};_dda +=len (_bgc );_aedc ._dfe +=len (_bgc );
_bgd -=len (_bgc );};};return _dda ,nil ;};