//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _de "github.com/magnus195/unipdf/v3/internal/jbig2/errors";func Abs (v int )int {if v > 0{return v ;};return -v ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;
};func (_cc *Stack )Push (v interface{}){_cc .Data =append (_cc .Data ,v )};func (_ffg *Stack )Pop ()(_fge interface{},_ef bool ){_fge ,_ef =_ffg .peek ();if !_ef {return nil ,_ef ;};_ffg .Data =_ffg .Data [:_ffg .top ()];return _fge ,true ;};func (_f *IntSlice )Add (v int )error {if _f ==nil {return _de .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_f =append (*_f ,v );return nil ;};func (_agc *Stack )peek ()(interface{},bool ){_dg :=_agc .top ();if _dg ==-1{return nil ,false ;};return _agc .Data [_dg ],true ;};func (_ff *Stack )Peek ()(_fgc interface{},_fc bool ){return _ff .peek ()};func (_db *IntSlice )Copy ()*IntSlice {_ge :=IntSlice (make ([]int ,len (*_db )));
copy (_ge ,*_db );return &_ge ;};func (_ad *NumSlice )Add (v float32 ){*_ad =append (*_ad ,v )};func NewNumSlice (i int )*NumSlice {_fb :=NumSlice (make ([]float32 ,i ));return &_fb };func (_ag NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ag )-1{return 0,_de .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ag [i ],nil ;};type IntsMap map[uint64 ][]int ;func Max (x ,y int )int {if x > y {return x ;};return y ;};type NumSlice []float32 ;func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_fg *NumSlice )AddInt (v int ){*_fg =append (*_fg ,float32 (v ))};
func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_c IntsMap )Get (key uint64 )(int ,bool ){_g ,_ce :=_c [key ];if !_ce {return 0,false ;};if len (_g )==0{return 0,false ;};return _g [0],true ;};func (_e NumSlice )GetInt (i int )(int ,error ){const _dbf ="\u0047\u0065\u0074\u0049\u006e\u0074";
if i < 0||i > len (_e )-1{return 0,_de .Errorf (_dbf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_agf :=_e [i ];return int (_agf +Sign (_agf )*0.5),nil ;
};func (_bb IntSlice )Get (index int )(int ,error ){if index > len (_bb )-1{return 0,_de .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _bb [index ],nil ;};func (_b IntsMap )Add (key uint64 ,value int ){_b [key ]=append (_b [key ],value )};type IntSlice []int ;func (_cf *Stack )Len ()int {return len (_cf .Data )};func (_cec *Stack )top ()int {return len (_cec .Data )-1};type Stack struct{Data []interface{};
Aux *Stack ;};func (_aa IntSlice )Size ()int {return len (_aa )};func (_ca NumSlice )GetIntSlice ()[]int {_dc :=make ([]int ,len (_ca ));for _bc ,_ded :=range _ca {_dc [_bc ]=int (_ded );};return _dc ;};func NewIntSlice (i int )*IntSlice {_af :=IntSlice (make ([]int ,i ));
return &_af };func (_ac IntsMap )Delete (key uint64 ){delete (_ac ,key )};func (_gb IntsMap )GetSlice (key uint64 )([]int ,bool ){_a ,_ba :=_gb [key ];if !_ba {return nil ,false ;};return _a ,true ;};