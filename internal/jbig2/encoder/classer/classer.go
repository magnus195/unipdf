//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (
	_df "github.com/magnus195/unipdf/v3/common";
	_g "github.com/magnus195/unipdf/v3/internal/jbig2/basic";
	_b "github.com/magnus195/unipdf/v3/internal/jbig2/bitmap";
	_eb "github.com/magnus195/unipdf/v3/internal/jbig2/errors";_ef "image";_d "math";
);const JbAddedPixels =6;func (_bcc Settings )Validate ()error {const _gfbc ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";if _bcc .Thresh < 0.4||_bcc .Thresh > 0.98{return _eb .Error (_gfbc ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _bcc .WeightFactor < 0.0||_bcc .WeightFactor > 1.0{return _eb .Error (_gfbc ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bcc .RankHaus < 0.5||_bcc .RankHaus > 1.0{return _eb .Error (_gfbc ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bcc .SizeHaus < 1||_bcc .SizeHaus > 10{return _eb .Error (_gfbc ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _bcc .Components {case _b .ComponentConn ,_b .ComponentCharacters ,_b .ComponentWords :default:return _eb .Error (_gfbc ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};func (_aaf *Classer )getULCorners (_efb *_b .Bitmap ,_bfa *_b .Boxes )error {const _ebe ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _efb ==nil {return _eb .Error (_ebe ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bfa ==nil {return _eb .Error (_ebe ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _aaf .PtaUL ==nil {_aaf .PtaUL =&_b .Points {};
};_ae :=len (*_bfa );var (_ed ,_fd ,_be ,_dd int ;_aec ,_cbe ,_fg ,_aea float32 ;_eg error ;_de *_ef .Rectangle ;_ffa *_b .Bitmap ;_bfg _ef .Point ;);for _bg :=0;_bg < _ae ;_bg ++{_ed =_aaf .BaseIndex +_bg ;if _aec ,_cbe ,_eg =_aaf .CentroidPoints .GetGeometry (_ed );
_eg !=nil {return _eb .Wrap (_eg ,_ebe ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");};if _fd ,_eg =_aaf .ClassIDs .Get (_ed );_eg !=nil {return _eb .Wrap (_eg ,_ebe ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");
};if _fg ,_aea ,_eg =_aaf .CentroidPointsTemplates .GetGeometry (_fd );_eg !=nil {return _eb .Wrap (_eg ,_ebe ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_gfe :=_fg -_aec ;
_edd :=_aea -_cbe ;if _gfe >=0{_be =int (_gfe +0.5);}else {_be =int (_gfe -0.5);};if _edd >=0{_dd =int (_edd +0.5);}else {_dd =int (_edd -0.5);};if _de ,_eg =_bfa .Get (_bg );_eg !=nil {return _eb .Wrap (_eg ,_ebe ,"");};_cbed ,_dc :=_de .Min .X ,_de .Min .Y ;
_ffa ,_eg =_aaf .UndilatedTemplates .GetBitmap (_fd );if _eg !=nil {return _eb .Wrap (_eg ,_ebe ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_bfg ,_eg =_fbd (_efb ,_cbed ,_dc ,_be ,_dd ,_ffa );if _eg !=nil {return _eb .Wrap (_eg ,_ebe ,"");};_aaf .PtaUL .AddPoint (float32 (_cbed -_be +_bfg .X ),float32 (_dc -_dd +_bfg .Y ));};return nil ;};func (_fba *Classer )addPageComponents (_fa *_b .Bitmap ,_fee *_b .Boxes ,_ebg *_b .Bitmaps ,_ac int ,_aac Method )error {const _abf ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _fa ==nil {return _eb .Error (_abf ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _fee ==nil ||_ebg ==nil ||len (*_fee )==0{_df .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_fa );
return nil ;};var _gd error ;switch _aac {case RankHaus :_gd =_fba .classifyRankHaus (_fee ,_ebg ,_ac );case Correlation :_gd =_fba .classifyCorrelation (_fee ,_ebg ,_ac );default:_df .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_aac );
return _eb .Error (_abf ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _gd !=nil {return _eb .Wrap (_gd ,_abf ,"");};if _gd =_fba .getULCorners (_fa ,_fee );_gd !=nil {return _eb .Wrap (_gd ,_abf ,"");
};_ff :=len (*_fee );_fba .BaseIndex +=_ff ;if _gd =_fba .ComponentsNumber .Add (_ff );_gd !=nil {return _eb .Wrap (_gd ,_abf ,"");};return nil ;};const (MaxDiffWidth =2;MaxDiffHeight =2;);func (_eea *Classer )classifyRankHouseNonOne (_ggef *_b .Boxes ,_gbgd ,_eadg ,_fdc *_b .Bitmaps ,_ced *_b .Points ,_ffd *_g .NumSlice ,_bggg int )(_ggg error ){const _ceb ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_gaa ,_aeb ,_eddb ,_cecb float32 ;_dgdd ,_febd ,_dbc int ;_cad ,_acg ,_af ,_eag ,_gfc *_b .Bitmap ;_cdcg ,_ade bool ;);_fge :=_b .MakePixelSumTab8 ();for _da :=0;_da < len (_gbgd .Values );_da ++{if _acg ,_ggg =_eadg .GetBitmap (_da );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _dgdd ,_ggg =_ffd .GetInt (_da );_ggg !=nil {_df .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_da ,_ggg );
};if _af ,_ggg =_fdc .GetBitmap (_da );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _gaa ,_aeb ,_ggg =_ced .GetGeometry (_da );_ggg !=nil {return _eb .Wrapf (_ggg ,_ceb ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_gfed :=len (_eea .UndilatedTemplates .Values );_cdcg =false ;_efg :=_acegb (_eea ,_acg );for _dbc =_efg .Next ();_dbc > -1;{if _eag ,_ggg =_eea .UndilatedTemplates .GetBitmap (_dbc );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _febd ,_ggg =_eea .FgTemplates .GetInt (_dbc );_ggg !=nil {_df .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_dbc ,_ggg );
};if _gfc ,_ggg =_eea .DilatedTemplates .GetBitmap (_dbc );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _eddb ,_cecb ,_ggg =_eea .CentroidPointsTemplates .GetGeometry (_dbc );
_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_ade ,_ggg =_b .RankHausTest (_acg ,_af ,_eag ,_gfc ,_gaa -_eddb ,_aeb -_cecb ,MaxDiffWidth ,MaxDiffHeight ,_dgdd ,_febd ,float32 (_eea .Settings .RankHaus ),_fge );
if _ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"");};if _ade {_cdcg =true ;if _ggg =_eea .ClassIDs .Add (_dbc );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"");};if _ggg =_eea .ComponentPageNumbers .Add (_bggg );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"");
};if _eea .Settings .KeepClassInstances {_eae ,_gcfd :=_eea .ClassInstances .GetBitmaps (_dbc );if _gcfd !=nil {return _eb .Wrap (_gcfd ,_ceb ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _cad ,_gcfd =_gbgd .GetBitmap (_da );_gcfd !=nil {return _eb .Wrap (_gcfd ,_ceb ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_eae .Values =append (_eae .Values ,_cad );_ddb ,_gcfd :=_ggef .Get (_da );if _gcfd !=nil {return _eb .Wrap (_gcfd ,_ceb ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_eae .Boxes =append (_eae .Boxes ,_ddb );};break ;};};if !_cdcg {if _ggg =_eea .ClassIDs .Add (_gfed );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _ggg =_eea .ComponentPageNumbers .Add (_bggg );_ggg !=nil {return _eb .Wrap (_ggg ,_ceb ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ceca :=&_b .Bitmaps {};_cad =_gbgd .Values [_da ];_ceca .AddBitmap (_cad );_fac ,_efee :=_cad .Width ,_cad .Height ;_eea .TemplatesSize .Add (uint64 (_fac )*uint64 (_efee ),_gfed );_eaga ,_aaae :=_ggef .Get (_da );if _aaae !=nil {return _eb .Wrap (_aaae ,_ceb ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ceca .AddBox (_eaga );_eea .ClassInstances .AddBitmaps (_ceca );_eea .CentroidPointsTemplates .AddPoint (_gaa ,_aeb );_eea .UndilatedTemplates .AddBitmap (_acg );_eea .DilatedTemplates .AddBitmap (_af );_eea .FgTemplates .AddInt (_dgdd );};};_eea .NumberOfClasses =len (_eea .UndilatedTemplates .Values );
return nil ;};func _acegb (_ebaf *Classer ,_dcda *_b .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_dcda .Width ,Height :_dcda .Height ,Classer :_ebaf };};func _fbd (_bfb *_b .Bitmap ,_cd ,_bec ,_eab ,_ba int ,_gg *_b .Bitmap )(_bff _ef .Point ,_cga error ){const _adg ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _bfb ==nil {return _bff ,_eb .Error (_adg ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _gg ==nil {return _bff ,_eb .Error (_adg ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_efe ,_ded :=_gg .Width ,_gg .Height ;_becc ,_deb :=_cd -_eab -JbAddedPixels ,_bec -_ba -JbAddedPixels ;_df .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_cd ,_bec ,_efe ,_ded ,_becc ,_deb );
_feg ,_cga :=_b .Rect (_becc ,_deb ,_efe ,_ded );if _cga !=nil {return _bff ,_eb .Wrap (_cga ,_adg ,"");};_cc ,_ ,_cga :=_bfb .ClipRectangle (_feg );if _cga !=nil {_df .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_feg );
return _bff ,_eb .Wrap (_cga ,_adg ,"");};_cf :=_b .New (_cc .Width ,_cc .Height );_bfd :=_d .MaxInt32 ;var _bdd ,_fdb ,_gfb ,_fdg ,_bb int ;for _bdd =-1;_bdd <=1;_bdd ++{for _fdb =-1;_fdb <=1;_fdb ++{if _ ,_cga =_b .Copy (_cf ,_cc );_cga !=nil {return _bff ,_eb .Wrap (_cga ,_adg ,"");
};if _cga =_cf .RasterOperation (_fdb ,_bdd ,_efe ,_ded ,_b .PixSrcXorDst ,_gg ,0,0);_cga !=nil {return _bff ,_eb .Wrap (_cga ,_adg ,"");};_gfb =_cf .CountPixels ();if _gfb < _bfd {_fdg =_fdb ;_bb =_bdd ;_bfd =_gfb ;};};};_bff .X =_fdg ;_bff .Y =_bb ;return _bff ,nil ;
};func (_edf *Classer )verifyMethod (_dg Method )error {if _dg !=RankHaus &&_dg !=Correlation {return _eb .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};func (_bbg *Settings )SetDefault (){if _bbg .MaxCompWidth ==0{switch _bbg .Components {case _b .ComponentConn :_bbg .MaxCompWidth =MaxConnCompWidth ;
case _b .ComponentCharacters :_bbg .MaxCompWidth =MaxCharCompWidth ;case _b .ComponentWords :_bbg .MaxCompWidth =MaxWordCompWidth ;};};if _bbg .MaxCompHeight ==0{_bbg .MaxCompHeight =MaxCompHeight ;};if _bbg .Thresh ==0.0{_bbg .Thresh =0.9;};if _bbg .WeightFactor ==0.0{_bbg .WeightFactor =0.75;
};if _bbg .RankHaus ==0.0{_bbg .RankHaus =0.97;};if _bbg .SizeHaus ==0{_bbg .SizeHaus =2;};};func (_aee *Classer )classifyRankHouseOne (_ged *_b .Boxes ,_cde ,_egg ,_aca *_b .Bitmaps ,_ggeg *_b .Points ,_eggg int )(_cfd error ){const _ebc ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_dcc ,_bc ,_bfef ,_fcf float32 ;_gac int ;_bdc ,_cbf ,_eca ,_geg ,_feda *_b .Bitmap ;_cfb ,_ccaf bool ;);for _add :=0;_add < len (_cde .Values );_add ++{_cbf =_egg .Values [_add ];_eca =_aca .Values [_add ];_dcc ,_bc ,_cfd =_ggeg .GetGeometry (_add );
if _cfd !=nil {return _eb .Wrapf (_cfd ,_ebc ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_gef :=len (_aee .UndilatedTemplates .Values );_cfb =false ;_dgd :=_acegb (_aee ,_cbf );for _gac =_dgd .Next ();_gac > -1;
{_geg ,_cfd =_aee .UndilatedTemplates .GetBitmap (_gac );if _cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"\u0062\u006d\u0033");};_feda ,_cfd =_aee .DilatedTemplates .GetBitmap (_gac );if _cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"\u0062\u006d\u0034");};_bfef ,_fcf ,_cfd =_aee .CentroidPointsTemplates .GetGeometry (_gac );
if _cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_ccaf ,_cfd =_b .HausTest (_cbf ,_eca ,_geg ,_feda ,_dcc -_bfef ,_bc -_fcf ,MaxDiffWidth ,MaxDiffHeight );
if _cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"");};if _ccaf {_cfb =true ;if _cfd =_aee .ClassIDs .Add (_gac );_cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"");};if _cfd =_aee .ComponentPageNumbers .Add (_eggg );_cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"");
};if _aee .Settings .KeepClassInstances {_faac ,_efde :=_aee .ClassInstances .GetBitmaps (_gac );if _efde !=nil {return _eb .Wrap (_efde ,_ebc ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_bdc ,_efde =_cde .GetBitmap (_add );if _efde !=nil {return _eb .Wrap (_efde ,_ebc ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_faac .AddBitmap (_bdc );_cgb ,_efde :=_ged .Get (_add );if _efde !=nil {return _eb .Wrap (_efde ,_ebc ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_faac .AddBox (_cgb );};break ;};};if !_cfb {if _cfd =_aee .ClassIDs .Add (_gef );_cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"");
};if _cfd =_aee .ComponentPageNumbers .Add (_eggg );_cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"");};_ccdb :=&_b .Bitmaps {};_bdc ,_cfd =_cde .GetBitmap (_add );if _cfd !=nil {return _eb .Wrap (_cfd ,_ebc ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ccdb .Values =append (_ccdb .Values ,_bdc );
_cdd ,_dce :=_bdc .Width ,_bdc .Height ;_aee .TemplatesSize .Add (uint64 (_dce )*uint64 (_cdd ),_gef );_fca ,_bdda :=_ged .Get (_add );if _bdda !=nil {return _eb .Wrap (_bdda ,_ebc ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ccdb .AddBox (_fca );_aee .ClassInstances .AddBitmaps (_ccdb );
_aee .CentroidPointsTemplates .AddPoint (_dcc ,_bc );_aee .UndilatedTemplates .AddBitmap (_cbf );_aee .DilatedTemplates .AddBitmap (_eca );};};return nil ;};func (_faa *Classer )classifyCorrelation (_bge *_b .Boxes ,_cca *_b .Bitmaps ,_ag int )error {const _gb ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";
if _bge ==nil {return _eb .Error (_gb ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _cca ==nil {return _eb .Error (_gb ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_aeaa :=len (_cca .Values );if _aeaa ==0{_df .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_dcd ,_fgf *_b .Bitmap ;_ce error ;);_gcf :=&_b .Bitmaps {Values :make ([]*_b .Bitmap ,_aeaa )};for _dfc ,_aad :=range _cca .Values {_fgf ,_ce =_aad .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _ce !=nil {return _eb .Wrap (_ce ,_gb ,"");
};_gcf .Values [_dfc ]=_fgf ;};_bad :=_faa .FgTemplates ;_ebbf :=_b .MakePixelSumTab8 ();_fdbf :=_b .MakePixelCentroidTab8 ();_faf :=make ([]int ,_aeaa );_gge :=make ([][]int ,_aeaa );_fed :=_b .Points (make ([]_b .Point ,_aeaa ));_aae :=&_fed ;var (_dfa ,_ead int ;
_ccd ,_dge ,_ee int ;_acc ,_badc int ;_gbg byte ;);for _fgc ,_ffg :=range _gcf .Values {_gge [_fgc ]=make ([]int ,_ffg .Height );_dfa =0;_ead =0;_dge =(_ffg .Height -1)*_ffg .RowStride ;_ccd =0;for _badc =_ffg .Height -1;_badc >=0;_badc ,_dge =_badc -1,_dge -_ffg .RowStride {_gge [_fgc ][_badc ]=_ccd ;
_ee =0;for _acc =0;_acc < _ffg .RowStride ;_acc ++{_gbg =_ffg .Data [_dge +_acc ];_ee +=_ebbf [_gbg ];_dfa +=_fdbf [_gbg ]+_acc *8*_ebbf [_gbg ];};_ccd +=_ee ;_ead +=_ee *_badc ;};_faf [_fgc ]=_ccd ;if _ccd > 0{(*_aae )[_fgc ]=_b .Point {X :float32 (_dfa )/float32 (_ccd ),Y :float32 (_ead )/float32 (_ccd )};
}else {(*_aae )[_fgc ]=_b .Point {X :float32 (_ffg .Width )/float32 (2),Y :float32 (_ffg .Height )/float32 (2)};};};if _ce =_faa .CentroidPoints .Add (_aae );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_ggf ,_bgg ,_db int ;_ga float64 ;_gea ,_bfc ,_fec ,_baf float32 ;_ca ,_cfe _b .Point ;_ffc bool ;_cdc *similarTemplatesFinder ;_ec int ;_dbe *_b .Bitmap ;_gcb *_ef .Rectangle ;_ccb *_b .Bitmaps ;);for _ec ,_fgf =range _gcf .Values {_bgg =_faf [_ec ];
if _gea ,_bfc ,_ce =_aae .GetGeometry (_ec );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_ffc =false ;_dedf :=len (_faa .UndilatedTemplates .Values );_cdc =_acegb (_faa ,_fgf );for _dec :=_cdc .Next ();_dec > -1;{if _dbe ,_ce =_faa .UndilatedTemplates .GetBitmap (_dec );
_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _db ,_ce =_bad .GetInt (_dec );_ce !=nil {_df .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ce );
};if _fec ,_baf ,_ce =_faa .CentroidPointsTemplates .GetGeometry (_dec );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _faa .Settings .WeightFactor > 0.0{if _ggf ,_ce =_faa .TemplateAreas .Get (_dec );_ce !=nil {_df .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_ce );
};_ga =_faa .Settings .Thresh +(1.0-_faa .Settings .Thresh )*_faa .Settings .WeightFactor *float64 (_db )/float64 (_ggf );}else {_ga =_faa .Settings .Thresh ;};_aaa ,_fbf :=_b .CorrelationScoreThresholded (_fgf ,_dbe ,_bgg ,_db ,_ca .X -_cfe .X ,_ca .Y -_cfe .Y ,MaxDiffWidth ,MaxDiffHeight ,_ebbf ,_gge [_ec ],float32 (_ga ));
if _fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"");};if _ebb {var (_gfeb ,_gbf float64 ;_egb ,_abe int ;);_gfeb ,_fbf =_b .CorrelationScore (_fgf ,_dbe ,_bgg ,_db ,_gea -_fec ,_bfc -_baf ,MaxDiffWidth ,MaxDiffHeight ,_ebbf );if _fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_gbf ,_fbf =_b .CorrelationScoreSimple (_fgf ,_dbe ,_bgg ,_db ,_gea -_fec ,_bfc -_baf ,MaxDiffWidth ,MaxDiffHeight ,_ebbf );if _fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_egb =int (_d .Sqrt (_gfeb *float64 (_bgg )*float64 (_db )));_abe =int (_d .Sqrt (_gbf *float64 (_bgg )*float64 (_db )));if (_gfeb >=_ga )!=(_gbf >=_ga ){return _eb .Errorf (_gb ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_egb ,_gfeb ,_gfeb >=_ga ,_abe ,_gbf ,_gbf >=_ga ,_gfeb -_gbf );
};if _gfeb >=_ga !=_aaa {return _eb .Errorf (_gb ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_gfeb ,_gfeb *float64 (_bgg )*float64 (_db ),_egb ,_ga ,float32 (_ga )*float32 (_bgg )*float32 (_db ),_aaa );
};};if _aaa {_ffc =true ;if _fbf =_faa .ClassIDs .Add (_dec );_fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _fbf =_faa .ComponentPageNumbers .Add (_ag );_fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _faa .Settings .KeepClassInstances {if _dcd ,_fbf =_cca .GetBitmap (_ec );_fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _ccb ,_fbf =_faa .ClassInstances .GetBitmaps (_dec );
_fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_ccb .AddBitmap (_dcd );if _gcb ,_fbf =_bge .Get (_ec );_fbf !=nil {return _eb .Wrap (_fbf ,_gb ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_ccb .AddBox (_gcb );};break ;};};if !_ffc {if _ce =_faa .ClassIDs .Add (_dedf );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _ce =_faa .ComponentPageNumbers .Add (_ag );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ccb =&_b .Bitmaps {};if _dcd ,_ce =_cca .GetBitmap (_ec );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ccb .AddBitmap (_dcd );_gfde ,_efd :=_dcd .Width ,_dcd .Height ;_cee :=uint64 (_efd )*uint64 (_gfde );_faa .TemplatesSize .Add (_cee ,_dedf );
if _gcb ,_ce =_bge .Get (_ec );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ccb .AddBox (_gcb );_faa .ClassInstances .AddBitmaps (_ccb );_faa .CentroidPointsTemplates .AddPoint (_gea ,_bfc );_faa .FgTemplates .AddInt (_bgg );
_faa .UndilatedTemplates .AddBitmap (_dcd );_ggf =(_fgf .Width -2*JbAddedPixels )*(_fgf .Height -2*JbAddedPixels );if _ce =_faa .TemplateAreas .Add (_ggf );_ce !=nil {return _eb .Wrap (_ce ,_gb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_faa .NumberOfClasses =len (_faa .UndilatedTemplates .Values );
return nil ;};func (_dfg *Classer )classifyRankHaus (_aba *_b .Boxes ,_feb *_b .Bitmaps ,_abag int )error {const _ace ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";if _aba ==nil {return _eb .Error (_ace ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _feb ==nil {return _eb .Error (_ace ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_cec :=len (_feb .Values );if _cec ==0{return _eb .Error (_ace ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");
};_cgc :=_feb .CountPixels ();_dca :=_dfg .Settings .SizeHaus ;_ccbc :=_b .SelCreateBrick (_dca ,_dca ,_dca /2,_dca /2,_b .SelHit );_bfe :=&_b .Bitmaps {Values :make ([]*_b .Bitmap ,_cec )};_gcfa :=&_b .Bitmaps {Values :make ([]*_b .Bitmap ,_cec )};var (_dcf ,_ecf ,_dfac *_b .Bitmap ;
_aafd error ;);for _feec :=0;_feec < _cec ;_feec ++{_dcf ,_aafd =_feb .GetBitmap (_feec );if _aafd !=nil {return _eb .Wrap (_aafd ,_ace ,"");};_ecf ,_aafd =_dcf .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _aafd !=nil {return _eb .Wrap (_aafd ,_ace ,"");
};_dfac ,_aafd =_b .Dilate (nil ,_ecf ,_ccbc );if _aafd !=nil {return _eb .Wrap (_aafd ,_ace ,"");};_bfe .Values [_cec ]=_ecf ;_gcfa .Values [_cec ]=_dfac ;};_aceg ,_aafd :=_b .Centroids (_bfe .Values );if _aafd !=nil {return _eb .Wrap (_aafd ,_ace ,"");
};if _aafd =_aceg .Add (_dfg .CentroidPoints );_aafd !=nil {_df .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");};if _dfg .Settings .RankHaus ==1.0{_aafd =_dfg .classifyRankHouseOne (_aba ,_feb ,_bfe ,_gcfa ,_aceg ,_abag );
}else {_aafd =_dfg .classifyRankHouseNonOne (_aba ,_feb ,_bfe ,_gcfa ,_aceg ,_cgc ,_abag );};if _aafd !=nil {return _eb .Wrap (_aafd ,_ace ,"");};return nil ;};func (_f *Classer )AddPage (inputPage *_b .Bitmap ,pageNumber int ,method Method )(_fb error ){const _bd ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";
_f .Widths [pageNumber ]=inputPage .Width ;_f .Heights [pageNumber ]=inputPage .Height ;if _fb =_f .verifyMethod (method );_fb !=nil {return _eb .Wrap (_fb ,_bd ,"");};_fe ,_c ,_fb :=inputPage .GetComponents (_f .Settings .Components ,_f .Settings .MaxCompWidth ,_f .Settings .MaxCompHeight );
if _fb !=nil {return _eb .Wrap (_fb ,_bd ,"");};_df .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_fe );if _fb =_f .addPageComponents (inputPage ,_c ,_fe ,pageNumber ,method );_fb !=nil {return _eb .Wrap (_fb ,_bd ,"");
};return nil ;};func (_eed *similarTemplatesFinder )Next ()int {var (_bccb ,_gec ,_bdf ,_gcg int ;_gag bool ;_fgb *_b .Bitmap ;_gae error ;);for {if _eed .Index >=25{return -1;};_gec =_eed .Width +TwoByTwoWalk [2*_eed .Index ];_bccb =_eed .Height +TwoByTwoWalk [2*_eed .Index +1];
if _bccb < 1||_gec < 1{_eed .Index ++;continue ;};if len (_eed .CurrentNumbers )==0{_eed .CurrentNumbers ,_gag =_eed .Classer .TemplatesSize .GetSlice (uint64 (_gec )*uint64 (_bccb ));if !_gag {_eed .Index ++;continue ;};_eed .N =0;};_bdf =len (_eed .CurrentNumbers );
for ;_eed .N < _bdf ;_eed .N ++{_gcg =_eed .CurrentNumbers [_eed .N ];_fgb ,_gae =_eed .Classer .DilatedTemplates .GetBitmap (_gcg );if _gae !=nil {_df .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _fgb .Width -2*JbAddedPixels ==_gec &&_fgb .Height -2*JbAddedPixels ==_bccb {return _gcg ;};};_eed .Index ++;_eed .CurrentNumbers =nil ;};};func DefaultSettings ()Settings {_bffa :=&Settings {};_bffa .SetDefault ();return *_bffa };func (_gc *Classer )ComputeLLCorners ()(_fc error ){const _ad ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _gc .PtaUL ==nil {return _eb .Error (_ad ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};_ge :=len (*_gc .PtaUL );_gc .PtaLL =&_b .Points {};var (_cg ,_aa float32 ;_bf ,_gf int ;
_ab *_b .Bitmap ;);for _cb :=0;_cb < _ge ;_cb ++{_cg ,_aa ,_fc =_gc .PtaUL .GetGeometry (_cb );if _fc !=nil {_df .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fc );
return _eb .Wrap (_fc ,_ad ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_bf ,_fc =_gc .ClassIDs .Get (_cb );if _fc !=nil {_df .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_fc );
return _eb .Wrap (_fc ,_ad ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_ab ,_fc =_gc .UndilatedTemplates .GetBitmap (_bf );if _fc !=nil {_df .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_fc );
return _eb .Wrap (_fc ,_ad ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_gf =_ab .Height ;_gc .PtaLL .AddPoint (_cg ,_aa +float32 (_gf ));};return nil ;};type Classer struct{BaseIndex int ;
Settings Settings ;ComponentsNumber *_g .IntSlice ;TemplateAreas *_g .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_b .BitmapsArray ;UndilatedTemplates *_b .Bitmaps ;DilatedTemplates *_b .Bitmaps ;TemplatesSize _g .IntsMap ;
FgTemplates *_g .NumSlice ;CentroidPoints *_b .Points ;CentroidPointsTemplates *_b .Points ;ClassIDs *_g .IntSlice ;ComponentPageNumbers *_g .IntSlice ;PtaUL *_b .Points ;PtaLL *_b .Points ;};const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;
MaxCompHeight =120;);const (RankHaus Method =iota ;Correlation ;);func Init (settings Settings )(*Classer ,error ){const _ea ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";_eba :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_g .IntsMap {},TemplateAreas :&_g .IntSlice {},ComponentPageNumbers :&_g .IntSlice {},ClassIDs :&_g .IntSlice {},ComponentsNumber :&_g .IntSlice {},CentroidPoints :&_b .Points {},CentroidPointsTemplates :&_b .Points {},UndilatedTemplates :&_b .Bitmaps {},DilatedTemplates :&_b .Bitmaps {},ClassInstances :&_b .BitmapsArray {},FgTemplates :&_g .NumSlice {}};
if _a :=_eba .Settings .Validate ();_a !=nil {return nil ,_eb .Wrap (_a ,_ea ,"");};return _eba ,nil ;};type Method int ;var _ebb bool ;type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;
KeepClassInstances bool ;Components _b .Component ;Method Method ;};