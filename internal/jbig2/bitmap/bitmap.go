//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_fge "encoding/binary";_f "github.com/stretchr/testify/require";
	_b "github.com/magnus195/unipdf/v3/common";
	_g "github.com/magnus195/unipdf/v3/internal/bitwise";
	_ffa "github.com/magnus195/unipdf/v3/internal/imageutil";
	_de "github.com/magnus195/unipdf/v3/internal/jbig2/basic";
	_c "github.com/magnus195/unipdf/v3/internal/jbig2/errors";_cb "image";_fb "math";_ff "sort";_cc "strings";_fg "testing";);func _gdbg (_ecfc ,_gcef *Bitmap ,_ddded ,_acgd int )(_bddgg error ){const _bccde ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_bcde ,_ecd ,_bfac ,_bcgg int ;_bafe ,_fage ,_cfdcg ,_ddeb ,_fgbfbd ,_gaag ,_agdc byte ;);for _bcde =0;_bcde < _ddded ;_bcde ++{_bfac =_bcde *_ecfc .RowStride ;_bcgg =_bcde *_gcef .RowStride ;for _ecd =0;_ecd < _acgd ;_ecd ++{_bafe ,_bddgg =_ecfc .GetByte (_bfac +_ecd );
if _bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_fage ,_bddgg =_gcef .GetByte (_bcgg +_ecd );if _bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _bcde > 0{_cfdcg ,_bddgg =_ecfc .GetByte (_bfac -_ecfc .RowStride +_ecd );if _bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0069\u0020\u003e \u0030");};_bafe |=_cfdcg ;};if _ecd > 0{_ddeb ,_bddgg =_ecfc .GetByte (_bfac +_ecd -1);if _bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u006a\u0020\u003e \u0030");
};_bafe |=_ddeb <<7;};_bafe &=_fage ;if _bafe ==0||(^_bafe )==0{if _bddgg =_ecfc .SetByte (_bfac +_ecd ,_bafe );_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_agdc =_bafe ;_bafe =(_bafe |(_bafe >>1)|(_bafe <<1))&_fage ;if (_bafe ^_agdc )==0{if _bddgg =_ecfc .SetByte (_bfac +_ecd ,_bafe );_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _bcde =_ddded -1;_bcde >=0;_bcde --{_bfac =_bcde *_ecfc .RowStride ;_bcgg =_bcde *_gcef .RowStride ;for _ecd =_acgd -1;_ecd >=0;_ecd --{if _bafe ,_bddgg =_ecfc .GetByte (_bfac +_ecd );_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _fage ,_bddgg =_gcef .GetByte (_bcgg +_ecd );_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bcde < _ddded -1{if _fgbfbd ,_bddgg =_ecfc .GetByte (_bfac +_ecfc .RowStride +_ecd );
_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_bafe |=_fgbfbd ;};if _ecd < _acgd -1{if _gaag ,_bddgg =_ecfc .GetByte (_bfac +_ecd +1);_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_bafe |=_gaag >>7;};_bafe &=_fage ;if _bafe ==0||(^_bafe )==0{if _bddgg =_ecfc .SetByte (_bfac +_ecd ,_bafe );_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_agdc =_bafe ;_bafe =(_bafe |(_bafe >>1)|(_bafe <<1))&_fage ;if (_bafe ^_agdc )==0{if _bddgg =_ecfc .SetByte (_bfac +_ecd ,_bafe );_bddgg !=nil {return _c .Wrap (_bddgg ,_bccde ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_dcad *Bitmap )GetVanillaData ()[]byte {if _dcad .Color ==Chocolate {_dcad .inverseData ();};return _dcad .Data ;};func _dee ()(_gcf [256]uint32 ){for _gdg :=0;_gdg < 256;_gdg ++{if _gdg &0x01!=0{_gcf [_gdg ]|=0xf;};
if _gdg &0x02!=0{_gcf [_gdg ]|=0xf0;};if _gdg &0x04!=0{_gcf [_gdg ]|=0xf00;};if _gdg &0x08!=0{_gcf [_gdg ]|=0xf000;};if _gdg &0x10!=0{_gcf [_gdg ]|=0xf0000;};if _gdg &0x20!=0{_gcf [_gdg ]|=0xf00000;};if _gdg &0x40!=0{_gcf [_gdg ]|=0xf000000;};if _gdg &0x80!=0{_gcf [_gdg ]|=0xf0000000;
};};return _gcf ;};type byWidth Bitmaps ;var (_dfec =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gfafb =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_dae *Bitmap )SetPixel (x ,y int ,pixel byte )error {_dage :=_dae .GetByteIndex (x ,y );
if _dage > len (_dae .Data )-1{return _c .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_dage );};_fdc :=_dae .GetBitOffset (x );
_bdeb :=uint (7-_fdc );_bbe :=_dae .Data [_dage ];var _cbdec byte ;if pixel ==1{_cbdec =_bbe |(pixel &0x01<<_bdeb );}else {_cbdec =_bbe &^(1<<_bdeb );};_dae .Data [_dage ]=_cbdec ;return nil ;};func TstWriteSymbols (t *_fg .T ,bms *Bitmaps ,src *Bitmap ){for _ageg :=0;
_ageg < bms .Size ();_ageg ++{_bfcf :=bms .Values [_ageg ];_gdbb :=bms .Boxes [_ageg ];_efgf :=src .RasterOperation (_gdbb .Min .X ,_gdbb .Min .Y ,_bfcf .Width ,_bfcf .Height ,PixSrc ,_bfcf ,0,0);_f .NoError (t ,_efgf );};};func (_ecee *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _ggcc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_ecee .IntSlice .Size (){return 0,_c .Errorf (_ggcc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_ecee .XAtIndex (i )),nil ;};func (_faae *Bitmap )setBit (_ebab int ){_faae .Data [(_ebab >>3)]|=0x80>>uint (_ebab &7)};func _faac (_ede ,_gacg *Bitmap ,_adcd ,_cace int )(*Bitmap ,error ){const _eebg ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _gacg ==nil {_b .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_c .Error (_eebg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _adcd < 1||_cace < 1{return nil ,_c .Error (_eebg ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _adcd ==1&&_cace ==1{_aacea ,_gcaa :=_bceg (_ede ,_gacg );if _gcaa !=nil {return nil ,_c .Wrap (_gcaa ,_eebg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aacea ,nil ;};if _adcd ==1||_cace ==1{_beded :=SelCreateBrick (_cace ,_adcd ,_cace /2,_adcd /2,SelHit );_dggfd ,_bfdc :=_bfcb (_ede ,_gacg ,_beded );if _bfdc !=nil {return nil ,_c .Wrap (_bfdc ,_eebg ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dggfd ,nil ;};_bfae :=SelCreateBrick (1,_adcd ,0,_adcd /2,SelHit );_gaeg :=SelCreateBrick (_cace ,1,_cace /2,0,SelHit );_eadgg ,_cdde :=_bfcb (nil ,_gacg ,_bfae );if _cdde !=nil {return nil ,_c .Wrap (_cdde ,_eebg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ede ,_cdde =_bfcb (_ede ,_eadgg ,_gaeg );if _cdde !=nil {return nil ,_c .Wrap (_cdde ,_eebg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ede ,nil ;};func _bde (_cga ,_feb *Bitmap ,_ffac int ,_gdge []byte ,_cbde int )(_feff error ){const _ecf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_cba ,_bdg ,_ecb ,_bcb ,_bgc ,_eg ,_dab ,_bec int ;_fgb ,_egf uint32 ;_ffg ,_fea byte ;_dbc uint16 ;);_feac :=make ([]byte ,4);_eba :=make ([]byte ,4);for _ecb =0;_ecb < _cga .Height -1;_ecb ,_bcb =_ecb +2,_bcb +1{_cba =_ecb *_cga .RowStride ;_bdg =_bcb *_feb .RowStride ;
for _bgc ,_eg =0,0;_bgc < _cbde ;_bgc ,_eg =_bgc +4,_eg +1{for _dab =0;_dab < 4;_dab ++{_bec =_cba +_bgc +_dab ;if _bec <=len (_cga .Data )-1&&_bec < _cba +_cga .RowStride {_feac [_dab ]=_cga .Data [_bec ];}else {_feac [_dab ]=0x00;};_bec =_cba +_cga .RowStride +_bgc +_dab ;
if _bec <=len (_cga .Data )-1&&_bec < _cba +(2*_cga .RowStride ){_eba [_dab ]=_cga .Data [_bec ];}else {_eba [_dab ]=0x00;};};_fgb =_fge .BigEndian .Uint32 (_feac );_egf =_fge .BigEndian .Uint32 (_eba );_egf |=_fgb ;_egf |=_egf <<1;_egf &=0xaaaaaaaa;_fgb =_egf |(_egf <<7);
_ffg =byte (_fgb >>24);_fea =byte ((_fgb >>8)&0xff);_bec =_bdg +_eg ;if _bec +1==len (_feb .Data )-1||_bec +1>=_bdg +_feb .RowStride {_feb .Data [_bec ]=_gdge [_ffg ];}else {_dbc =(uint16 (_gdge [_ffg ])<<8)|uint16 (_gdge [_fea ]);if _feff =_feb .setTwoBytes (_bec ,_dbc );
_feff !=nil {return _c .Wrapf (_feff ,_ecf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bec );};_eg ++;};};
};return nil ;};type fillSegment struct{_cbag int ;_bbebf int ;_gcbbd int ;_ecdb int ;};func _geff (_daa ,_cfgc int )*Bitmap {return &Bitmap {Width :_daa ,Height :_cfgc ,RowStride :(_daa +7)>>3};};func (_eeee *Bitmaps )Size ()int {return len (_eeee .Values )};
func (_ace *Bitmap )setTwoBytes (_cbefb int ,_bfbf uint16 )error {if _cbefb +1> len (_ace .Data )-1{return _c .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cbefb );
};_ace .Data [_cbefb ]=byte ((_bfbf &0xff00)>>8);_ace .Data [_cbefb +1]=byte (_bfbf &0xff);return nil ;};func (_fcbg *ClassedPoints )validateIntSlice ()error {const _caegd ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_aege :=range _fcbg .IntSlice {if _aege >=(_fcbg .Points .Size ()){return _c .Errorf (_caegd ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_aege ,_fcbg .Points .Size ());
};};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_bgcad bool ,_ecbb error ){const _ffag ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_fgec ,_eead :=p1 .Width ,p1 .Height ;_ffcg ,_fgaf :=p3 .Width ,p3 .Height ;if _de .Abs (_fgec -_ffcg )> maxDiffW {return false ,nil ;};if _de .Abs (_eead -_fgaf )> maxDiffH {return false ,nil ;};_dgg :=int (float32 (area1 )*(1.0-rank )+0.5);_adec :=int (float32 (area3 )*(1.0-rank )+0.5);
var _ecgc ,_eced int ;if delX >=0{_ecgc =int (delX +0.5);}else {_ecgc =int (delX -0.5);};if delY >=0{_eced =int (delY +0.5);}else {_eced =int (delY -0.5);};_bgaaa :=p1 .CreateTemplate ();if _ecbb =_bgaaa .RasterOperation (0,0,_fgec ,_eead ,PixSrc ,p1 ,0,0);
_ecbb !=nil {return false ,_c .Wrap (_ecbb ,_ffag ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ecbb =_bgaaa .RasterOperation (_ecgc ,_eced ,_fgec ,_eead ,PixNotSrcAndDst ,p4 ,0,0);_ecbb !=nil {return false ,_c .Wrap (_ecbb ,_ffag ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_bgcad ,_ecbb =_bgaaa .ThresholdPixelSum (_dgg ,tab8 );if _ecbb !=nil {return false ,_c .Wrap (_ecbb ,_ffag ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _bgcad {return false ,nil ;};if _ecbb =_bgaaa .RasterOperation (_ecgc ,_eced ,_ffcg ,_fgaf ,PixSrc ,p3 ,0,0);
_ecbb !=nil {return false ,_c .Wrap (_ecbb ,_ffag ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ecbb =_bgaaa .RasterOperation (0,0,_ffcg ,_fgaf ,PixNotSrcAndDst ,p2 ,0,0);_ecbb !=nil {return false ,_c .Wrap (_ecbb ,_ffag ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_bgcad ,_ecbb =_bgaaa .ThresholdPixelSum (_adec ,tab8 );if _ecbb !=nil {return false ,_c .Wrap (_ecbb ,_ffag ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_bgcad ,nil ;};func init (){for _adf :=0;_adf < 256;_adf ++{_ga [_adf ]=uint8 (_adf &0x1)+(uint8 (_adf >>1)&0x1)+(uint8 (_adf >>2)&0x1)+(uint8 (_adf >>3)&0x1)+(uint8 (_adf >>4)&0x1)+(uint8 (_adf >>5)&0x1)+(uint8 (_adf >>6)&0x1)+(uint8 (_adf >>7)&0x1);
};};func (_aaea *Bitmap )thresholdPixelSum (_gdda int )bool {var (_bcfe int ;_becgg uint8 ;_cgcc byte ;_cbec int ;);_ffef :=_aaea .RowStride ;_faef :=uint (_aaea .Width &0x07);if _faef !=0{_becgg =uint8 ((0xff<<(8-_faef ))&0xff);_ffef --;};for _gdfg :=0;
_gdfg < _aaea .Height ;_gdfg ++{for _cbec =0;_cbec < _ffef ;_cbec ++{_cgcc =_aaea .Data [_gdfg *_aaea .RowStride +_cbec ];_bcfe +=int (_ga [_cgcc ]);};if _faef !=0{_cgcc =_aaea .Data [_gdfg *_aaea .RowStride +_cbec ]&_becgg ;_bcfe +=int (_ga [_cgcc ]);
};if _bcfe > _gdda {return true ;};};return false ;};func (_cbdf *Bitmap )CountPixels ()int {return _cbdf .countPixels ()};type Boxes []*_cb .Rectangle ;func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _ebae ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_c .Error (_ebae ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_c .Error (_ebae ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_c .Error (_ebae ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_c .Error (_ebae ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_c .Error (_ebae ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_geec ,_gfce :=bm1 .Width ,bm1 .Height ;_deba ,_egdae :=bm2 .Width ,bm2 .Height ;if _de .Abs (_geec -_deba )> maxDiffW {return false ,nil ;};if _de .Abs (_gfce -_egdae )> maxDiffH {return false ,nil ;};_bbad :=int (delX +_de .Sign (delX )*0.5);_egag :=int (delY +_de .Sign (delY )*0.5);
_gdfgc :=int (_fb .Ceil (_fb .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_defc :=bm2 .RowStride ;_gegg :=_eccb (_egag ,0);_bccg :=_fcge (_egdae +_egag ,_gfce );_fdad :=bm1 .RowStride *_gegg ;_faga :=bm2 .RowStride *(_gegg -_egag );
var _begb int ;if _bccg <=_gfce {_begb =downcount [_bccg -1];};_cdea :=_eccb (_bbad ,0);_gda :=_fcge (_deba +_bbad ,_geec );var _bgca ,_dgdf int ;if _bbad >=8{_bgca =_bbad >>3;_fdad +=_bgca ;_cdea -=_bgca <<3;_gda -=_bgca <<3;_bbad &=7;}else if _bbad <=-8{_dgdf =-((_bbad +7)>>3);
_faga +=_dgdf ;_defc -=_dgdf ;_bbad +=_dgdf <<3;};var (_fabbe ,_gbf ,_gaa int ;_dfe ,_bbbd ,_cabd byte ;);if _cdea >=_gda ||_gegg >=_bccg {return false ,nil ;};_faada :=(_gda +7)>>3;switch {case _bbad ==0:for _gbf =_gegg ;_gbf < _bccg ;_gbf ,_fdad ,_faga =_gbf +1,_fdad +bm1 .RowStride ,_faga +bm2 .RowStride {for _gaa =0;
_gaa < _faada ;_gaa ++{_dfe =bm1 .Data [_fdad +_gaa ]&bm2 .Data [_faga +_gaa ];_fabbe +=tab [_dfe ];};if _fabbe >=_gdfgc {return true ,nil ;};if _ebbg :=_fabbe +downcount [_gbf ]-_begb ;_ebbg < _gdfgc {return false ,nil ;};};case _bbad > 0&&_defc < _faada :for _gbf =_gegg ;
_gbf < _bccg ;_gbf ,_fdad ,_faga =_gbf +1,_fdad +bm1 .RowStride ,_faga +bm2 .RowStride {_bbbd =bm1 .Data [_fdad ];_cabd =bm2 .Data [_faga ]>>uint (_bbad );_dfe =_bbbd &_cabd ;_fabbe +=tab [_dfe ];for _gaa =1;_gaa < _defc ;_gaa ++{_bbbd =bm1 .Data [_fdad +_gaa ];
_cabd =bm2 .Data [_faga +_gaa ]>>uint (_bbad )|bm2 .Data [_faga +_gaa -1]<<uint (8-_bbad );_dfe =_bbbd &_cabd ;_fabbe +=tab [_dfe ];};_bbbd =bm1 .Data [_fdad +_gaa ];_cabd =bm2 .Data [_faga +_gaa -1]<<uint (8-_bbad );_dfe =_bbbd &_cabd ;_fabbe +=tab [_dfe ];
if _fabbe >=_gdfgc {return true ,nil ;}else if _fabbe +downcount [_gbf ]-_begb < _gdfgc {return false ,nil ;};};case _bbad > 0&&_defc >=_faada :for _gbf =_gegg ;_gbf < _bccg ;_gbf ,_fdad ,_faga =_gbf +1,_fdad +bm1 .RowStride ,_faga +bm2 .RowStride {_bbbd =bm1 .Data [_fdad ];
_cabd =bm2 .Data [_faga ]>>uint (_bbad );_dfe =_bbbd &_cabd ;_fabbe +=tab [_dfe ];for _gaa =1;_gaa < _faada ;_gaa ++{_bbbd =bm1 .Data [_fdad +_gaa ];_cabd =bm2 .Data [_faga +_gaa ]>>uint (_bbad );_cabd |=bm2 .Data [_faga +_gaa -1]<<uint (8-_bbad );_dfe =_bbbd &_cabd ;
_fabbe +=tab [_dfe ];};if _fabbe >=_gdfgc {return true ,nil ;}else if _fabbe +downcount [_gbf ]-_begb < _gdfgc {return false ,nil ;};};case _faada < _defc :for _gbf =_gegg ;_gbf < _bccg ;_gbf ,_fdad ,_faga =_gbf +1,_fdad +bm1 .RowStride ,_faga +bm2 .RowStride {for _gaa =0;
_gaa < _faada ;_gaa ++{_bbbd =bm1 .Data [_fdad +_gaa ];_cabd =bm2 .Data [_faga +_gaa ]<<uint (-_bbad );_cabd |=bm2 .Data [_faga +_gaa +1]>>uint (8+_bbad );_dfe =_bbbd &_cabd ;_fabbe +=tab [_dfe ];};if _fabbe >=_gdfgc {return true ,nil ;}else if _abea :=_fabbe +downcount [_gbf ]-_begb ;
_abea < _gdfgc {return false ,nil ;};};case _defc >=_faada :for _gbf =_gegg ;_gbf < _bccg ;_gbf ,_fdad ,_faga =_gbf +1,_fdad +bm1 .RowStride ,_faga +bm2 .RowStride {for _gaa =0;_gaa < _faada ;_gaa ++{_bbbd =bm1 .Data [_fdad +_gaa ];_cabd =bm2 .Data [_faga +_gaa ]<<uint (-_bbad );
_cabd |=bm2 .Data [_faga +_gaa +1]>>uint (8+_bbad );_dfe =_bbbd &_cabd ;_fabbe +=tab [_dfe ];};_bbbd =bm1 .Data [_fdad +_gaa ];_cabd =bm2 .Data [_faga +_gaa ]<<uint (-_bbad );_dfe =_bbbd &_cabd ;_fabbe +=tab [_dfe ];if _fabbe >=_gdfgc {return true ,nil ;
}else if _fabbe +downcount [_gbf ]-_begb < _gdfgc {return false ,nil ;};};};_fdccc :=float32 (_fabbe )*float32 (_fabbe )/(float32 (area1 )*float32 (area2 ));if _fdccc >=scoreThreshold {_b .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_fabbe ,_gdfgc ,_fdccc ,scoreThreshold );
};return false ,nil ;};func TstCSymbol (t *_fg .T )*Bitmap {t .Helper ();_cebc :=New (6,6);_f .NoError (t ,_cebc .SetPixel (1,0,1));_f .NoError (t ,_cebc .SetPixel (2,0,1));_f .NoError (t ,_cebc .SetPixel (3,0,1));_f .NoError (t ,_cebc .SetPixel (4,0,1));
_f .NoError (t ,_cebc .SetPixel (0,1,1));_f .NoError (t ,_cebc .SetPixel (5,1,1));_f .NoError (t ,_cebc .SetPixel (0,2,1));_f .NoError (t ,_cebc .SetPixel (0,3,1));_f .NoError (t ,_cebc .SetPixel (0,4,1));_f .NoError (t ,_cebc .SetPixel (5,4,1));_f .NoError (t ,_cebc .SetPixel (1,5,1));
_f .NoError (t ,_cebc .SetPixel (2,5,1));_f .NoError (t ,_cebc .SetPixel (3,5,1));_f .NoError (t ,_cebc .SetPixel (4,5,1));return _cebc ;};func (_bgff *Bitmap )setEightPartlyBytes (_bdeg ,_caebc int ,_efc uint64 )(_baga error ){var (_dcf byte ;_ffaaa int ;
);const _afab ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _bfc :=1;_bfc <=_caebc ;_bfc ++{_ffaaa =64-_bfc *8;_dcf =byte (_efc >>uint (_ffaaa )&0xff);_b .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dcf ,_bdeg ,_bdeg +_bfc -1,_caebc ,_ffaaa );
if _baga =_bgff .SetByte (_bdeg +_bfc -1,_dcf );_baga !=nil {return _c .Wrap (_baga ,_afab ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_ebge :=_bgff .RowStride *8-_bgff .Width ;if _ebge ==0{return nil ;};_ffaaa -=8;_dcf =byte (_efc >>uint (_ffaaa )&0xff)<<uint (_ebge );
if _baga =_bgff .SetByte (_bdeg +_caebc ,_dcf );_baga !=nil {return _c .Wrap (_baga ,_afab ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _fdaaa (_gff ,_fgfcg byte ,_fdbcf CombinationOperator )byte {switch _fdbcf {case CmbOpOr :return _fgfcg |_gff ;
case CmbOpAnd :return _fgfcg &_gff ;case CmbOpXor :return _fgfcg ^_gff ;case CmbOpXNor :return ^(_fgfcg ^_gff );case CmbOpNot :return ^(_fgfcg );default:return _fgfcg ;};};func (_daca *ClassedPoints )SortByY (){_daca ._dccc =_daca .ySortFunction ();_ff .Sort (_daca )};
func _dcb ()(_ceb [256]uint16 ){for _bac :=0;_bac < 256;_bac ++{if _bac &0x01!=0{_ceb [_bac ]|=0x3;};if _bac &0x02!=0{_ceb [_bac ]|=0xc;};if _bac &0x04!=0{_ceb [_bac ]|=0x30;};if _bac &0x08!=0{_ceb [_bac ]|=0xc0;};if _bac &0x10!=0{_ceb [_bac ]|=0x300;};
if _bac &0x20!=0{_ceb [_bac ]|=0xc00;};if _bac &0x40!=0{_ceb [_bac ]|=0x3000;};if _bac &0x80!=0{_ceb [_bac ]|=0xc000;};};return _ceb ;};type SizeSelection int ;func (_fgc *Bitmap )setEightBytes (_bggg int ,_bcd uint64 )error {_ddc :=_fgc .RowStride -(_bggg %_fgc .RowStride );
if _fgc .RowStride !=_fgc .Width >>3{_ddc --;};if _ddc >=8{return _fgc .setEightFullBytes (_bggg ,_bcd );};return _fgc .setEightPartlyBytes (_bggg ,_ddc ,_bcd );};func (_edc *Bitmap )GetByte (index int )(byte ,error ){if index > len (_edc .Data )-1||index < 0{return 0,_c .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _edc .Data [index ],nil ;};func (_febg *Bitmap )equivalent (_cgce *Bitmap )bool {if _febg ==_cgce {return true ;};if !_febg .SizesEqual (_cgce ){return false ;};_fega :=_dfcd (_febg ,_cgce ,CmbOpXor );_deg :=_febg .countPixels ();_abce :=int (0.25*float32 (_deg ));
if _fega .thresholdPixelSum (_abce ){return false ;};var (_afbb [9][9]int ;_cbcd [18][9]int ;_fdaa [9][18]int ;_gdfc int ;_fccd int ;);_acb :=9;_bfa :=_febg .Height /_acb ;_ggb :=_febg .Width /_acb ;_bdgg ,_bdd :=_bfa /2,_ggb /2;if _bfa < _ggb {_bdgg =_ggb /2;
_bdd =_bfa /2;};_bdba :=float64 (_bdgg )*float64 (_bdd )*_fb .Pi ;_efgba :=int (float64 (_bfa *_ggb /2)*0.9);_acbg :=int (float64 (_ggb *_bfa /2)*0.9);for _bgg :=0;_bgg < _acb ;_bgg ++{_dcg :=_ggb *_bgg +_gdfc ;var _gfa int ;if _bgg ==_acb -1{_gdfc =0;
_gfa =_febg .Width ;}else {_gfa =_dcg +_ggb ;if ((_febg .Width -_gdfc )%_acb )> 0{_gdfc ++;_gfa ++;};};for _fbfa :=0;_fbfa < _acb ;_fbfa ++{_ccg :=_bfa *_fbfa +_fccd ;var _cbef int ;if _fbfa ==_acb -1{_fccd =0;_cbef =_febg .Height ;}else {_cbef =_ccg +_bfa ;
if (_febg .Height -_fccd )%_acb > 0{_fccd ++;_cbef ++;};};var _dga ,_aac ,_fae ,_edfa int ;_cfda :=(_dcg +_gfa )/2;_abbf :=(_ccg +_cbef )/2;for _cece :=_dcg ;_cece < _gfa ;_cece ++{for _fcg :=_ccg ;_fcg < _cbef ;_fcg ++{if _fega .GetPixel (_cece ,_fcg ){if _cece < _cfda {_dga ++;
}else {_aac ++;};if _fcg < _abbf {_edfa ++;}else {_fae ++;};};};};_afbb [_bgg ][_fbfa ]=_dga +_aac ;_cbcd [_bgg *2][_fbfa ]=_dga ;_cbcd [_bgg *2+1][_fbfa ]=_aac ;_fdaa [_bgg ][_fbfa *2]=_edfa ;_fdaa [_bgg ][_fbfa *2+1]=_fae ;};};for _febd :=0;_febd < _acb *2-1;
_febd ++{for _fadd :=0;_fadd < (_acb -1);_fadd ++{var _bfb int ;for _aaca :=0;_aaca < 2;_aaca ++{for _bdc :=0;_bdc < 2;_bdc ++{_bfb +=_cbcd [_febd +_aaca ][_fadd +_bdc ];};};if _bfb > _acbg {return false ;};};};for _ddg :=0;_ddg < (_acb -1);_ddg ++{for _gdcb :=0;
_gdcb < ((_acb *2)-1);_gdcb ++{var _gdfa int ;for _abgd :=0;_abgd < 2;_abgd ++{for _badg :=0;_badg < 2;_badg ++{_gdfa +=_fdaa [_ddg +_abgd ][_gdcb +_badg ];};};if _gdfa > _efgba {return false ;};};};for _eed :=0;_eed < (_acb -2);_eed ++{for _bedc :=0;_bedc < (_acb -2);
_bedc ++{var _bda ,_gbg int ;for _cegc :=0;_cegc < 3;_cegc ++{for _geg :=0;_geg < 3;_geg ++{if _cegc ==_geg {_bda +=_afbb [_eed +_cegc ][_bedc +_geg ];};if (2-_cegc )==_geg {_gbg +=_afbb [_eed +_cegc ][_bedc +_geg ];};};};if _bda > _acbg ||_gbg > _acbg {return false ;
};};};for _bagd :=0;_bagd < (_acb -1);_bagd ++{for _babb :=0;_babb < (_acb -1);_babb ++{var _ebaa int ;for _cbae :=0;_cbae < 2;_cbae ++{for _bdga :=0;_bdga < 2;_bdga ++{_ebaa +=_afbb [_bagd +_cbae ][_babb +_bdga ];};};if float64 (_ebaa )> _bdba {return false ;
};};};return true ;};type SelectionValue int ;type Component int ;func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _bfcb (d ,s ,sel )};func (_cacee *byWidth )Len ()int {return len (_cacee .Values )};func (_ccf *Bitmap )GetChocolateData ()[]byte {if _ccf .Color ==Vanilla {_ccf .inverseData ();
};return _ccf .Data ;};const (Vanilla Color =iota ;Chocolate ;);func MakePixelCentroidTab8 ()[]int {return _efbfd ()};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_cfde Points )Get (i int )(Point ,error ){if i > len (_cfde )-1{return Point {},_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cfde [i ],nil ;};type RasterOperator int ;func _fcfdd (_gacf *Bitmap ,_fdgd *Bitmap ,_dcgea int )(_eaed error ){const _aebgg ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_bgbe :=_fcge (_gacf .Height ,_fdgd .Height );
_fadda :=_fcge (_gacf .RowStride ,_fdgd .RowStride );switch _dcgea {case 4:_eaed =_gdbg (_gacf ,_fdgd ,_bgbe ,_fadda );case 8:_eaed =_eeebd (_gacf ,_fdgd ,_bgbe ,_fadda );default:return _c .Errorf (_aebgg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_dcgea );
};if _eaed !=nil {return _c .Wrap (_eaed ,_aebgg ,"");};return nil ;};func _dfcd (_edd ,_afcg *Bitmap ,_gadf CombinationOperator )*Bitmap {_faed :=New (_edd .Width ,_edd .Height );for _eff :=0;_eff < len (_faed .Data );_eff ++{_faed .Data [_eff ]=_fdaaa (_edd .Data [_eff ],_afcg .Data [_eff ],_gadf );
};return _faed ;};func (_dda *Bitmap )String ()string {var _fcfe ="\u000a";for _cege :=0;_cege < _dda .Height ;_cege ++{var _bgf string ;for _adgc :=0;_adgc < _dda .Width ;_adgc ++{_fbcg :=_dda .GetPixel (_adgc ,_cege );if _fbcg {_bgf +="\u0031";}else {_bgf +="\u0030";
};};_fcfe +=_bgf +"\u000a";};return _fcfe ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _faac (d ,s ,hSize ,vSize )};func _bfcb (_dbdfc *Bitmap ,_adff *Bitmap ,_gafg *Selection )(*Bitmap ,error ){var (_eca *Bitmap ;_agbf error ;
);_dbdfc ,_agbf =_gbge (_dbdfc ,_adff ,_gafg ,&_eca );if _agbf !=nil {return nil ,_agbf ;};if _agbf =_dbdfc .clearAll ();_agbf !=nil {return nil ,_agbf ;};var _abab SelectionValue ;for _dagfg :=0;_dagfg < _gafg .Height ;_dagfg ++{for _bdccdd :=0;_bdccdd < _gafg .Width ;
_bdccdd ++{_abab =_gafg .Data [_dagfg ][_bdccdd ];if _abab ==SelHit {if _agbf =_dbdfc .RasterOperation (_bdccdd -_gafg .Cx ,_dagfg -_gafg .Cy ,_adff .Width ,_adff .Height ,PixSrcOrDst ,_eca ,0,0);_agbf !=nil {return nil ,_agbf ;};};};};return _dbdfc ,nil ;
};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _fgbfg (src ,sequence ...);};func (_ggec *Points )Add (pt *Points )error {const _fdae ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _ggec ==nil {return _c .Error (_fdae ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _c .Error (_fdae ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_ggec =append (*_ggec ,*pt ...);return nil ;};func (_gbga *Bitmaps )String ()string {_gdfcb :=_cc .Builder {};
for _ ,_dggb :=range _gbga .Values {_gdfcb .WriteString (_dggb .String ());_gdfcb .WriteRune ('\n');};return _gdfcb .String ();};func (_cced Points )XSorter ()func (_cfa ,_ggbd int )bool {return func (_bgfee ,_bfee int )bool {return _cced [_bgfee ].X < _cced [_bfee ].X };
};func (_gecf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _eabe ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_gecf .Values )==0{return nil ,_c .Error (_eabe ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_fcdf :=&BitmapsArray {};_gecf .SortByHeight ();_cfeba :=-1;_gddba :=-1;for _abca :=0;_abca < len (_gecf .Values );_abca ++{_dcee :=_gecf .Values [_abca ].Height ;if _dcee > _cfeba {_cfeba =_dcee ;_gddba ++;_fcdf .Values =append (_fcdf .Values ,&Bitmaps {});
};_fcdf .Values [_gddba ].AddBitmap (_gecf .Values [_abca ]);};return _fcdf ,nil ;};func _gbe (_bdf *Bitmap ,_baa int ,_bc []byte )(_ac *Bitmap ,_afb error ){const _ecc ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _bdf ==nil {return nil ,_c .Error (_ecc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _baa < 1||_baa > 4{return nil ,_c .Error (_ecc ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _bdf .Height <=1{return nil ,_c .Errorf (_ecc ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_bdf .Height );
};_ac =New (_bdf .Width /2,_bdf .Height /2);if _bc ==nil {_bc =_eadg ();};_dgb :=_fcge (_bdf .RowStride ,2*_ac .RowStride );switch _baa {case 1:_afb =_bde (_bdf ,_ac ,_baa ,_bc ,_dgb );case 2:_afb =_fga (_bdf ,_ac ,_baa ,_bc ,_dgb );case 3:_afb =_egb (_bdf ,_ac ,_baa ,_bc ,_dgb );
case 4:_afb =_dgd (_bdf ,_ac ,_baa ,_bc ,_dgb );};if _afb !=nil {return nil ,_afb ;};return _ac ,nil ;};func _dgdb (_acfb ,_fabd *Bitmap ,_bgcg ,_dbdg ,_feeb ,_bcbc ,_fde int ,_bgaa CombinationOperator )error {var _afeb int ;_gebb :=func (){_afeb ++;_feeb +=_fabd .RowStride ;
_bcbc +=_acfb .RowStride ;_fde +=_acfb .RowStride };for _afeb =_bgcg ;_afeb < _dbdg ;_gebb (){_gfee :=_feeb ;for _agdb :=_bcbc ;_agdb <=_fde ;_agdb ++{_dad ,_cge :=_fabd .GetByte (_gfee );if _cge !=nil {return _cge ;};_abf ,_cge :=_acfb .GetByte (_agdb );
if _cge !=nil {return _cge ;};if _cge =_fabd .SetByte (_gfee ,_fdaaa (_dad ,_abf ,_bgaa ));_cge !=nil {return _cge ;};_gfee ++;};};return nil ;};func (_dfece *BitmapsArray )AddBitmaps (bm *Bitmaps ){_dfece .Values =append (_dfece .Values ,bm )};type MorphOperation int ;
func _ebfe (_ggccb ,_ebaagd int ,_fbcfe string )*Selection {_adcde :=&Selection {Height :_ggccb ,Width :_ebaagd ,Name :_fbcfe };_adcde .Data =make ([][]SelectionValue ,_ggccb );for _edce :=0;_edce < _ggccb ;_edce ++{_adcde .Data [_edce ]=make ([]SelectionValue ,_ebaagd );
};return _adcde ;};func (_eabc *Bitmap )resizeImageData (_afc *Bitmap )error {if _afc ==nil {return _c .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _eabc .SizesEqual (_afc ){return nil ;};_eabc .Data =make ([]byte ,len (_afc .Data ));_eabc .Width =_afc .Width ;_eabc .Height =_afc .Height ;_eabc .RowStride =_afc .RowStride ;return nil ;};func (_bbfb *Points )AddPoint (x ,y float32 ){*_bbfb =append (*_bbfb ,Point {x ,y })};
func (_cdgbf *Bitmap )removeBorderGeneral (_beb ,_ccca ,_efaf ,_bgfc int )(*Bitmap ,error ){const _cgb ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _beb < 0||_ccca < 0||_efaf < 0||_bgfc < 0{return nil ,_c .Error (_cgb ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_cde ,_cgceb :=_cdgbf .Width ,_cdgbf .Height ;_efad :=_cde -_beb -_ccca ;_cfeb :=_cgceb -_efaf -_bgfc ;if _efad <=0{return nil ,_c .Errorf (_cgb ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_efad );
};if _cfeb <=0{return nil ,_c .Errorf (_cgb ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cfeb );};_agcf :=New (_efad ,_cfeb );_agcf .Color =_cdgbf .Color ;_cdb :=_agcf .RasterOperation (0,0,_efad ,_cfeb ,PixSrc ,_cdgbf ,_beb ,_efaf );
if _cdb !=nil {return nil ,_c .Wrap (_cdb ,_cgb ,"");};return _agcf ,nil ;};func TstImageBitmapInverseData ()[]byte {_eafd :=_ebgf .Copy ();_eafd .InverseData ();return _eafd .Data ;};func _df (_bg ,_dea *Bitmap )(_db error ){const _fc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_da :=_dea .RowStride ;_a :=_bg .RowStride ;var (_fe byte ;_ba uint16 ;_dg ,_fcf ,_cd ,_ca ,_e int ;);for _cd =0;_cd < _dea .Height ;_cd ++{_dg =_cd *_da ;_fcf =2*_cd *_a ;for _ca =0;_ca < _da ;_ca ++{_fe =_dea .Data [_dg +_ca ];_ba =_acgg [_fe ];_e =_fcf +_ca *2;
if _bg .RowStride !=_dea .RowStride *2&&(_ca +1)*2> _bg .RowStride {_db =_bg .SetByte (_e ,byte (_ba >>8));}else {_db =_bg .setTwoBytes (_e ,_ba );};if _db !=nil {return _c .Wrap (_db ,_fc ,"");};};for _ca =0;_ca < _a ;_ca ++{_e =_fcf +_a +_ca ;_fe =_bg .Data [_fcf +_ca ];
if _db =_bg .SetByte (_e ,_fe );_db !=nil {return _c .Wrapf (_db ,_fc ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_fcf +_ca ,_fcf +_a +_ca );
};};};return nil ;};type Getter interface{GetBitmap ()*Bitmap ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_dced Points )GetGeometry (i int )(_bgfac ,_fafb float32 ,_ceaa error ){if i > len (_dced )-1{return 0,0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_faede :=_dced [i ];return _faede .X ,_faede .Y ,nil ;};func _faeeb (_adgcf ,_bbed ,_faad *Bitmap )(*Bitmap ,error ){const _fgda ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _bbed ==nil {return nil ,_c .Error (_fgda ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _faad ==nil {return nil ,_c .Error (_fgda ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _efbe error ;switch {case _adgcf ==_bbed :if _efbe =_adgcf .RasterOperation (0,0,_bbed .Width ,_bbed .Height ,PixNotSrcAndDst ,_faad ,0,0);
_efbe !=nil {return nil ,_c .Wrap (_efbe ,_fgda ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _adgcf ==_faad :if _efbe =_adgcf .RasterOperation (0,0,_bbed .Width ,_bbed .Height ,PixNotSrcAndDst ,_bbed ,0,0);_efbe !=nil {return nil ,_c .Wrap (_efbe ,_fgda ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_adgcf ,_efbe =_bceg (_adgcf ,_bbed );if _efbe !=nil {return nil ,_c .Wrap (_efbe ,_fgda ,"");};if _efbe =_adgcf .RasterOperation (0,0,_bbed .Width ,_bbed .Height ,PixNotSrcAndDst ,_faad ,0,0);_efbe !=nil {return nil ,_c .Wrap (_efbe ,_fgda ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _adgcf ,nil ;};func (_bfaf *Bitmap )connComponentsBB (_ebbd int )(_gacc *Boxes ,_cfb error ){const _acfe ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _ebbd !=4&&_ebbd !=8{return nil ,_c .Error (_acfe ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _bfaf .Zero (){return &Boxes {},nil ;};_bfaf .setPadBits (0);_acff ,_cfb :=_bceg (nil ,_bfaf );if _cfb !=nil {return nil ,_c .Wrap (_cfb ,_acfe ,"\u0062\u006d\u0031");};_abff :=&_de .Stack {};_abff .Aux =&_de .Stack {};_gacc =&Boxes {};var (_efgd ,_fgcf int ;
_ddda _cb .Point ;_feec bool ;_agdg *_cb .Rectangle ;);for {if _ddda ,_feec ,_cfb =_acff .nextOnPixel (_fgcf ,_efgd );_cfb !=nil {return nil ,_c .Wrap (_cfb ,_acfe ,"");};if !_feec {break ;};if _agdg ,_cfb =_dcefd (_acff ,_abff ,_ddda .X ,_ddda .Y ,_ebbd );
_cfb !=nil {return nil ,_c .Wrap (_cfb ,_acfe ,"");};if _cfb =_gacc .Add (_agdg );_cfb !=nil {return nil ,_c .Wrap (_cfb ,_acfe ,"");};_fgcf =_ddda .X ;_efgd =_ddda .Y ;};return _gacc ,nil ;};func (_bafea *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _bbfc ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_debe ,_bfbd :=_bafea .selectByIndexes (idx );if _bfbd !=nil {return nil ,_c .Wrap (_bfbd ,_bbfc ,"");};return _debe ,nil ;};var _feee =[5]int {1,2,3,0,4};func (_bee *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _bee .Copy (),nil ;
};_fab ,_bada :=_bee .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _bada !=nil {return nil ,_c .Wrap (_bada ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _fab ,nil ;};func (_cfc *Bitmap )addPadBits ()(_ffaca error ){const _cgd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_ffcb :=_cfc .Width %8;if _ffcb ==0{return nil ;};_fefa :=_cfc .Width /8;_cbdb :=_g .NewReader (_cfc .Data );_fdb :=make ([]byte ,_cfc .Height *_cfc .RowStride );_gdbe :=_g .NewWriterMSB (_fdb );_gac :=make ([]byte ,_fefa );var (_cbac int ;_daf uint64 ;
);for _cbac =0;_cbac < _cfc .Height ;_cbac ++{if _ ,_ffaca =_cbdb .Read (_gac );_ffaca !=nil {return _c .Wrap (_ffaca ,_cgd ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_ffaca =_gdbe .Write (_gac );_ffaca !=nil {return _c .Wrap (_ffaca ,_cgd ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _daf ,_ffaca =_cbdb .ReadBits (byte (_ffcb ));_ffaca !=nil {return _c .Wrap (_ffaca ,_cgd ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _ffaca =_gdbe .WriteByte (byte (_daf )<<uint (8-_ffcb ));_ffaca !=nil {return _c .Wrap (_ffaca ,_cgd ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_cfc .Data =_gdbe .Data ();return nil ;};func New (width ,height int )*Bitmap {_abb :=_geff (width ,height );_abb .Data =make ([]byte ,height *_abb .RowStride );return _abb ;};func (_eag *Bitmap )countPixels ()int {var (_acf int ;_cggg uint8 ;_eab byte ;
_fce int ;);_baaf :=_eag .RowStride ;_efag :=uint (_eag .Width &0x07);if _efag !=0{_cggg =uint8 ((0xff<<(8-_efag ))&0xff);_baaf --;};for _ddad :=0;_ddad < _eag .Height ;_ddad ++{for _fce =0;_fce < _baaf ;_fce ++{_eab =_eag .Data [_ddad *_eag .RowStride +_fce ];
_acf +=int (_ga [_eab ]);};if _efag !=0{_acf +=int (_ga [_eag .Data [_ddad *_eag .RowStride +_fce ]&_cggg ]);};};return _acf ;};func (_facdd *Bitmaps )GetBox (i int )(*_cb .Rectangle ,error ){const _cggea ="\u0047\u0065\u0074\u0042\u006f\u0078";if _facdd ==nil {return nil ,_c .Error (_cggea ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_facdd .Boxes )-1{return nil ,_c .Errorf (_cggea ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _facdd .Boxes [i ],nil ;};type Point struct{X ,Y float32 ;
};func _aeeb (_gcdb *_de .Stack ,_cggf ,_eef ,_gbfe ,_deadd ,_cbfc int ,_bgbg *_cb .Rectangle )(_gcdbc error ){const _dbdd ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _gcdb ==nil {return _c .Error (_dbdd ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bgbg ==nil {return _c .Error (_dbdd ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_bgbg .Min .X =_de .Min (_bgbg .Min .X ,_cggf );_bgbg .Max .X =_de .Max (_bgbg .Max .X ,_eef );_bgbg .Min .Y =_de .Min (_bgbg .Min .Y ,_gbfe );_bgbg .Max .Y =_de .Max (_bgbg .Max .Y ,_gbfe );if !(_gbfe +_deadd >=0&&_gbfe +_deadd <=_cbfc ){return nil ;
};if _gcdb .Aux ==nil {return _c .Error (_dbdd ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _ebed *fillSegment ;_ebdg ,_ffcbd :=_gcdb .Aux .Pop ();if _ffcbd {if _ebed ,_ffcbd =_ebdg .(*fillSegment );
!_ffcbd {return _c .Error (_dbdd ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_ebed =&fillSegment {};
};_ebed ._cbag =_cggf ;_ebed ._bbebf =_eef ;_ebed ._gcbbd =_gbfe ;_ebed ._ecdb =_deadd ;_gcdb .Push (_ebed );return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _cbb ,_bggc int ;_fcbae :=src .RowStride -1;if x < 0{_bggc =-x ;
x =0;}else if x +src .Width > dst .Width {_fcbae -=src .Width +x -dst .Width ;};if y < 0{_cbb =-y ;y =0;_bggc +=src .RowStride ;_fcbae +=src .RowStride ;}else if y +src .Height > dst .Height {_cbb =src .Height +y -dst .Height ;};var (_bggca int ;_egc error ;
);_gfdd :=x &0x07;_ggbf :=8-_gfdd ;_ggf :=src .Width &0x07;_bbdc :=_ggbf -_ggf ;_dfcgg :=_ggbf &0x07!=0;_fbfag :=src .Width <=((_fcbae -_bggc )<<3)+_ggbf ;_acg :=dst .GetByteIndex (x ,y );_bede :=_cbb +dst .Height ;if src .Height > _bede {_bggca =_bede ;
}else {_bggca =src .Height ;};switch {case !_dfcgg :_egc =_dgdb (src ,dst ,_cbb ,_bggca ,_acg ,_bggc ,_fcbae ,op );case _fbfag :_egc =_decg (src ,dst ,_cbb ,_bggca ,_acg ,_bggc ,_fcbae ,_bbdc ,_gfdd ,_ggbf ,op );default:_egc =_gecb (src ,dst ,_cbb ,_bggca ,_acg ,_bggc ,_fcbae ,_bbdc ,_gfdd ,_ggbf ,op ,_ggf );
};return _egc ;};func TstAddSymbol (t *_fg .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_cedef :=_cb .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_cedef );*x +=sym .Width +space ;};type byHeight Bitmaps ;
func (_cbdgf MorphProcess )getWidthHeight ()(_gfcf ,_edga int ){return _cbdgf .Arguments [0],_cbdgf .Arguments [1];};func _gceb (_ggg *Bitmap )(_egbe *Bitmap ,_fcdc int ,_cadf error ){const _acfg ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _ggg ==nil {return nil ,0,_c .Errorf (_acfg ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _bafa ,_caeg *Bitmap ;if _bafa ,_cadf =_bceg (nil ,_ggg );_cadf !=nil {return nil ,0,_c .Wrap (_cadf ,_acfg ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_cdgc [13]int ;_fcdd ,_fbcf int ;);_bdcc :=12;_fdcbd :=_de .NewNumSlice (_bdcc +1);_baed :=_de .NewNumSlice (_bdcc +1);var _cded *Boxes ;for _gdfcf :=0;_gdfcf <=_bdcc ;_gdfcf ++{if _gdfcf ==0{if _caeg ,_cadf =_bceg (nil ,_bafa );_cadf !=nil {return nil ,0,_c .Wrap (_cadf ,_acfg ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _caeg ,_cadf =_fgbfg (_bafa ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_cadf !=nil {return nil ,0,_c .Wrap (_cadf ,_acfg ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _cded ,_cadf =_caeg .connComponentsBB (4);
_cadf !=nil {return nil ,0,_c .Wrap (_cadf ,_acfg ,"");};_cdgc [_gdfcf ]=len (*_cded );_fdcbd .AddInt (_cdgc [_gdfcf ]);switch _gdfcf {case 0:_fcdd =_cdgc [0];default:_fbcf =_cdgc [_gdfcf -1]-_cdgc [_gdfcf ];_baed .AddInt (_fbcf );};_bafa =_caeg ;};_dcec :=true ;
_bfdd :=2;var _degd ,_gdga int ;for _feca :=1;_feca < len (*_baed );_feca ++{if _degd ,_cadf =_fdcbd .GetInt (_feca );_cadf !=nil {return nil ,0,_c .Wrap (_cadf ,_acfg ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _dcec &&_degd < int (0.3*float32 (_fcdd )){_bfdd =_feca +1;_dcec =false ;};if _fbcf ,_cadf =_baed .GetInt (_feca );_cadf !=nil {return nil ,0,_c .Wrap (_cadf ,_acfg ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _fbcf > _gdga {_gdga =_fbcf ;};};_efbfb :=_ggg .XResolution ;if _efbfb ==0{_efbfb =150;};if _efbfb > 110{_bfdd ++;};if _bfdd < 2{_b .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_bfdd =2;};_fcdc =_bfdd +1;if _egbe ,_cadf =_ebabd (nil ,_ggg ,_bfdd +1,1);_cadf !=nil {return nil ,0,_c .Wrap (_cadf ,_acfg ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _egbe ,_fcdc ,nil ;
};func (_fcac *Bitmap )setPadBits (_dbg int ){_facb :=8-_fcac .Width %8;if _facb ==8{return ;};_fgaa :=_fcac .Width /8;_adb :=_gfafb [_facb ];if _dbg ==0{_adb ^=_adb ;};var _cabb int ;for _cdfa :=0;_cdfa < _fcac .Height ;_cdfa ++{_cabb =_cdfa *_fcac .RowStride +_fgaa ;
if _dbg ==0{_fcac .Data [_cabb ]&=_adb ;}else {_fcac .Data [_cabb ]|=_adb ;};};};func _babg (_facd *Bitmap ,_agdbe int )(*Bitmap ,error ){const _cafb ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _facd ==nil {return nil ,_c .Error (_cafb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _agdbe <=0{return nil ,_c .Error (_cafb ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _agdbe ==1{_fdbe ,_cbgbd :=_bceg (nil ,_facd );if _cbgbd !=nil {return nil ,_c .Wrap (_cbgbd ,_cafb ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _fdbe ,nil ;};_agbd ,_eacf :=_bf (_facd ,_agdbe ,_agdbe );if _eacf !=nil {return nil ,_c .Wrap (_eacf ,_cafb ,"");};return _agbd ,nil ;};func (_cca Points )Size ()int {return len (_cca )};func _cf (_ae ,_ag *Bitmap )(_dag error ){const _dfc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_ef :=_ag .RowStride ;_bb :=_ae .RowStride ;_gc :=_ag .RowStride *4-_ae .RowStride ;var (_gf ,_dd byte ;_ge uint32 ;_cbf ,_bbg ,_ce ,_ddd ,_gd ,_gb ,_ad int ;);for _ce =0;_ce < _ag .Height ;_ce ++{_cbf =_ce *_ef ;_bbg =4*_ce *_bb ;for _ddd =0;_ddd < _ef ;
_ddd ++{_gf =_ag .Data [_cbf +_ddd ];_ge =_afag [_gf ];_gb =_bbg +_ddd *4;if _gc !=0&&(_ddd +1)*4> _ae .RowStride {for _gd =_gc ;_gd > 0;_gd --{_dd =byte ((_ge >>uint (_gd *8))&0xff);_ad =_gb +(_gc -_gd );if _dag =_ae .SetByte (_ad ,_dd );_dag !=nil {return _c .Wrapf (_dag ,_dfc ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_gd );
};};}else if _dag =_ae .setFourBytes (_gb ,_ge );_dag !=nil {return _c .Wrap (_dag ,_dfc ,"");};if _dag =_ae .setFourBytes (_bbg +_ddd *4,_afag [_ag .Data [_cbf +_ddd ]]);_dag !=nil {return _c .Wrap (_dag ,_dfc ,"");};};for _gd =1;_gd < 4;_gd ++{for _ddd =0;
_ddd < _bb ;_ddd ++{if _dag =_ae .SetByte (_bbg +_gd *_bb +_ddd ,_ae .Data [_bbg +_ddd ]);_dag !=nil {return _c .Wrapf (_dag ,_dfc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_gd ,_ddd );
};};};};return nil ;};func (_afdc *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _ffdg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_afdc .IntSlice .Size (){return 0,_c .Errorf (_ffdg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_afdc .YAtIndex (i )),nil ;};func (_edfd *Bitmap )connComponentsBitmapsBB (_caef *Bitmaps ,_eeae int )(_feaa *Boxes ,_deb error ){const _bagab ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _eeae !=4&&_eeae !=8{return nil ,_c .Error (_bagab ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _caef ==nil {return nil ,_c .Error (_bagab ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_caef .Values )> 0{return nil ,_c .Error (_bagab ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _edfd .Zero (){return &Boxes {},nil ;
};var (_acac ,_bfda ,_aab ,_eged *Bitmap ;);_edfd .setPadBits (0);if _acac ,_deb =_bceg (nil ,_edfd );_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"\u0062\u006d\u0031");};if _bfda ,_deb =_bceg (nil ,_edfd );_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"\u0062\u006d\u0032");
};_cefcc :=&_de .Stack {};_cefcc .Aux =&_de .Stack {};_feaa =&Boxes {};var (_gbbg ,_ddgf int ;_baae _cb .Point ;_bacb bool ;_bgea *_cb .Rectangle ;);for {if _baae ,_bacb ,_deb =_acac .nextOnPixel (_gbbg ,_ddgf );_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"");
};if !_bacb {break ;};if _bgea ,_deb =_dcefd (_acac ,_cefcc ,_baae .X ,_baae .Y ,_eeae );_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"");};if _deb =_feaa .Add (_bgea );_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"");};if _aab ,_deb =_acac .clipRectangle (_bgea ,nil );
_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"\u0062\u006d\u0033");};if _eged ,_deb =_bfda .clipRectangle (_bgea ,nil );_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"\u0062\u006d\u0034");};if _ ,_deb =_gebe (_aab ,_aab ,_eged );_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _deb =_bfda .RasterOperation (_bgea .Min .X ,_bgea .Min .Y ,_bgea .Dx (),_bgea .Dy (),PixSrcXorDst ,_aab ,0,0);_deb !=nil {return nil ,_c .Wrap (_deb ,_bagab ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_caef .AddBitmap (_aab );
_gbbg =_baae .X ;_ddgf =_baae .Y ;};_caef .Boxes =*_feaa ;return _feaa ,nil ;};func (_fcd *Bitmap )Copy ()*Bitmap {_cdgg :=make ([]byte ,len (_fcd .Data ));copy (_cdgg ,_fcd .Data );return &Bitmap {Width :_fcd .Width ,Height :_fcd .Height ,RowStride :_fcd .RowStride ,Data :_cdgg ,Color :_fcd .Color ,Text :_fcd .Text ,BitmapNumber :_fcd .BitmapNumber ,Special :_fcd .Special };
};func ClipBoxToRectangle (box *_cb .Rectangle ,wi ,hi int )(_fcab *_cb .Rectangle ,_fbd error ){const _ced ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_c .Error (_ced ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_c .Error (_ced ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_decgf :=*box ;
_fcab =&_decgf ;if _fcab .Min .X < 0{_fcab .Max .X +=_fcab .Min .X ;_fcab .Min .X =0;};if _fcab .Min .Y < 0{_fcab .Max .Y +=_fcab .Min .Y ;_fcab .Min .Y =0;};if _fcab .Max .X > wi {_fcab .Max .X =wi ;};if _fcab .Max .Y > hi {_fcab .Max .Y =hi ;};return _fcab ,nil ;
};func Centroids (bms []*Bitmap )(*Points ,error ){_fddcd :=make ([]Point ,len (bms ));_ddab :=_efbfd ();_ddde :=_fbb ();var _agf error ;for _ffbd ,_bcdg :=range bms {_fddcd [_ffbd ],_agf =_bcdg .centroid (_ddab ,_ddde );if _agf !=nil {return nil ,_agf ;
};};_cabf :=Points (_fddcd );return &_cabf ,nil ;};func (_dabd *Selection )findMaxTranslations ()(_dceg ,_dgaa ,_gcbf ,_dccbe int ){for _caac :=0;_caac < _dabd .Height ;_caac ++{for _bbefb :=0;_bbefb < _dabd .Width ;_bbefb ++{if _dabd .Data [_caac ][_bbefb ]==SelHit {_dceg =_eccb (_dceg ,_dabd .Cx -_bbefb );
_dgaa =_eccb (_dgaa ,_dabd .Cy -_caac );_gcbf =_eccb (_gcbf ,_bbefb -_dabd .Cx );_dccbe =_eccb (_dccbe ,_caac -_dabd .Cy );};};};return _dceg ,_dgaa ,_gcbf ,_dccbe ;};func TstESymbol (t *_fg .T ,scale ...int )*Bitmap {_acafg ,_ffba :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_f .NoError (t ,_ffba );return TstGetScaledSymbol (t ,_acafg ,scale ...);};func (_feg *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_ffed *Bitmaps )SortByWidth (){_gcea :=(*byWidth )(_ffed );_ff .Sort (_gcea )};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_fbdd :=_ebfe (h ,w ,"");
_fbdd .setOrigin (cy ,cx );var _dggc ,_dgeb int ;for _dggc =0;_dggc < h ;_dggc ++{for _dgeb =0;_dgeb < w ;_dgeb ++{_fbdd .Data [_dggc ][_dgeb ]=tp ;};};return _fbdd ;};func (_dfa *Bitmap )And (s *Bitmap )(_aad *Bitmap ,_eaec error ){const _gcdf ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _dfa ==nil {return nil ,_c .Error (_gcdf ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_c .Error (_gcdf ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_dfa .SizesEqual (s ){_b .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_gcdf );
};if _aad ,_eaec =_bceg (_aad ,_dfa );_eaec !=nil {return nil ,_c .Wrap (_eaec ,_gcdf ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eaec =_aad .RasterOperation (0,0,_aad .Width ,_aad .Height ,PixSrcAndDst ,s ,0,0);
_eaec !=nil {return nil ,_c .Wrap (_eaec ,_gcdf ,"");};return _aad ,nil ;};func (_gfdg *Boxes )Add (box *_cb .Rectangle )error {if _gfdg ==nil {return _c .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_gfdg =append (*_gfdg ,box );return nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func _cabdd (_bgae ...MorphProcess )(_bafb error ){const _gcgf ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _dfdb ,_gaca int ;for _cfcf ,_ccga :=range _bgae {if _bafb =_ccga .verify (_cfcf ,&_dfdb ,&_gaca );_bafb !=nil {return _c .Wrap (_bafb ,_gcgf ,"");};};if _gaca !=0&&_dfdb !=0{return _c .Error (_gcgf ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_afe *Bitmap )ToImage ()_cb .Image {_adc ,_gded :=_ffa .NewImage (_afe .Width ,_afe .Height ,1,1,_afe .Data ,nil ,nil );if _gded !=nil {_b .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gded );
};return _adc ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _bceg (d ,s )};func (_cdca *Bitmap )CreateTemplate ()*Bitmap {return _cdca .createTemplate ()};
func _fbg (_afbbf ,_dgecb *Bitmap ,_cee ,_cgaf int )(*Bitmap ,error ){const _bdgb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _dgecb ==nil {return nil ,_c .Error (_bdgb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cee < 1||_cgaf < 1{return nil ,_c .Error (_bdgb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cee ==1&&_cgaf ==1{_eaecf ,_cgeg :=_bceg (_afbbf ,_dgecb );if _cgeg !=nil {return nil ,_c .Wrap (_cgeg ,_bdgb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _eaecf ,nil ;};if _cee ==1||_cgaf ==1{_adeb :=SelCreateBrick (_cgaf ,_cee ,_cgaf /2,_cee /2,SelHit );_bccf ,_cfbe :=_bdade (_afbbf ,_dgecb ,_adeb );if _cfbe !=nil {return nil ,_c .Wrap (_cfbe ,_bdgb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bccf ,nil ;};_gefb :=SelCreateBrick (1,_cee ,0,_cee /2,SelHit );_dacd :=SelCreateBrick (_cgaf ,1,_cgaf /2,0,SelHit );_ebaed ,_fgag :=_bdade (nil ,_dgecb ,_gefb );if _fgag !=nil {return nil ,_c .Wrap (_fgag ,_bdgb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_afbbf ,_fgag =_bdade (_afbbf ,_ebaed ,_dacd );if _fgag !=nil {return nil ,_c .Wrap (_fgag ,_bdgb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _afbbf ,nil ;};func _agdad (_eggdg *Bitmap ,_gdgad ,_bfec ,_babc ,_gcebc int ,_cefd RasterOperator ,_ggdb *Bitmap ,_ccce ,_ebgeg int )error {var (_dbaf bool ;
_eaba bool ;_eebae byte ;_cdfc int ;_fccaf int ;_dead int ;_bcbb int ;_dfee bool ;_aabd int ;_ffagf int ;_dbfd int ;_cgfa bool ;_bdca byte ;_gfdc int ;_bcad int ;_eec int ;_faag byte ;_bdbb int ;_afgda int ;_abed uint ;_gcga uint ;_badf byte ;_fgeg shift ;
_egab bool ;_gaeb bool ;_bcfg ,_dcdd int ;);if _ccce &7!=0{_afgda =8-(_ccce &7);};if _gdgad &7!=0{_fccaf =8-(_gdgad &7);};if _afgda ==0&&_fccaf ==0{_badf =_gfafb [0];}else {if _fccaf > _afgda {_abed =uint (_fccaf -_afgda );}else {_abed =uint (8-(_afgda -_fccaf ));
};_gcga =8-_abed ;_badf =_gfafb [_abed ];};if (_gdgad &7)!=0{_dbaf =true ;_cdfc =8-(_gdgad &7);_eebae =_gfafb [_cdfc ];_dead =_eggdg .RowStride *_bfec +(_gdgad >>3);_bcbb =_ggdb .RowStride *_ebgeg +(_ccce >>3);_bdbb =8-(_ccce &7);if _cdfc > _bdbb {_fgeg =_aedbd ;
if _babc >=_afgda {_egab =true ;};}else {_fgeg =_abd ;};};if _babc < _cdfc {_eaba =true ;_eebae &=_dfec [8-_cdfc +_babc ];};if !_eaba {_aabd =(_babc -_cdfc )>>3;if _aabd !=0{_dfee =true ;_ffagf =_eggdg .RowStride *_bfec +((_gdgad +_fccaf )>>3);_dbfd =_ggdb .RowStride *_ebgeg +((_ccce +_fccaf )>>3);
};};_gfdc =(_gdgad +_babc )&7;if !(_eaba ||_gfdc ==0){_cgfa =true ;_bdca =_dfec [_gfdc ];_bcad =_eggdg .RowStride *_bfec +((_gdgad +_fccaf )>>3)+_aabd ;_eec =_ggdb .RowStride *_ebgeg +((_ccce +_fccaf )>>3)+_aabd ;if _gfdc > int (_gcga ){_gaeb =true ;};
};switch _cefd {case PixSrc :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],_faag ,_eebae );
_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]=_faag ;
};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],_faag ,_bdca );
_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};case PixNotSrc :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;
};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],^_faag ,_eebae );_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );
_eggdg .Data [_ffagf +_dcdd ]=^_faag ;};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};
_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],^_faag ,_bdca );_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};case PixSrcOrDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );
};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],_faag |_eggdg .Data [_dead ],_eebae );_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;
_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]|=_faag ;};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;
_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],_faag |_eggdg .Data [_bcad ],_bdca );_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;
};};case PixSrcAndDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],_faag &_eggdg .Data [_dead ],_eebae );
_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]&=_faag ;
};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],_faag &_eggdg .Data [_bcad ],_bdca );
_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};case PixSrcXorDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;
};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],_faag ^_eggdg .Data [_dead ],_eebae );_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );
_eggdg .Data [_ffagf +_dcdd ]^=_faag ;};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};
_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],_faag ^_eggdg .Data [_bcad ],_bdca );_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};case PixNotSrcOrDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;
if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],^_faag |_eggdg .Data [_dead ],_eebae );_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;
};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]|=^_faag ;};_ffagf +=_eggdg .RowStride ;
_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],^_faag |_eggdg .Data [_bcad ],_bdca );
_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};case PixNotSrcAndDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};
}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],^_faag &_eggdg .Data [_dead ],_eebae );_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;
_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]&=^_faag ;};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;
_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],^_faag &_eggdg .Data [_bcad ],_bdca );_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;
};};case PixSrcOrNotDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],_faag |^_eggdg .Data [_dead ],_eebae );
_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]=_faag |^_eggdg .Data [_ffagf +_dcdd ];
};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],_faag |^_eggdg .Data [_bcad ],_bdca );
_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};case PixSrcAndNotDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};
}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],_faag &^_eggdg .Data [_dead ],_eebae );_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;
_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]=_faag &^_eggdg .Data [_ffagf +_dcdd ];};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;
_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],_faag &^_eggdg .Data [_bcad ],_bdca );_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;
};};case PixNotPixSrcOrDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],^(_faag |_eggdg .Data [_dead ]),_eebae );
_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]=^(_faag |_eggdg .Data [_ffagf +_dcdd ]);
};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],^(_faag |_eggdg .Data [_bcad ]),_bdca );
_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};case PixNotPixSrcAndDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );
};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],^(_faag &_eggdg .Data [_dead ]),_eebae );_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;
_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]=^(_faag &_eggdg .Data [_ffagf +_dcdd ]);};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;
_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],^(_faag &_eggdg .Data [_bcad ]),_bdca );_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;
};};case PixNotPixSrcXorDst :if _dbaf {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{if _fgeg ==_aedbd {_faag =_ggdb .Data [_bcbb ]<<_abed ;if _egab {_faag =_geeb (_faag ,_ggdb .Data [_bcbb +1]>>_gcga ,_badf );};}else {_faag =_ggdb .Data [_bcbb ]>>_gcga ;};_eggdg .Data [_dead ]=_geeb (_eggdg .Data [_dead ],^(_faag ^_eggdg .Data [_dead ]),_eebae );
_dead +=_eggdg .RowStride ;_bcbb +=_ggdb .RowStride ;};};if _dfee {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{for _dcdd =0;_dcdd < _aabd ;_dcdd ++{_faag =_geeb (_ggdb .Data [_dbfd +_dcdd ]<<_abed ,_ggdb .Data [_dbfd +_dcdd +1]>>_gcga ,_badf );_eggdg .Data [_ffagf +_dcdd ]=^(_faag ^_eggdg .Data [_ffagf +_dcdd ]);
};_ffagf +=_eggdg .RowStride ;_dbfd +=_ggdb .RowStride ;};};if _cgfa {for _bcfg =0;_bcfg < _gcebc ;_bcfg ++{_faag =_ggdb .Data [_eec ]<<_abed ;if _gaeb {_faag =_geeb (_faag ,_ggdb .Data [_eec +1]>>_gcga ,_badf );};_eggdg .Data [_bcad ]=_geeb (_eggdg .Data [_bcad ],^(_faag ^_eggdg .Data [_bcad ]),_bdca );
_bcad +=_eggdg .RowStride ;_eec +=_ggdb .RowStride ;};};default:_b .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cefd );return _c .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func TstVSymbol (t *_fg .T ,scale ...int )*Bitmap {_dfac ,_cgda :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_f .NoError (t ,_cgda );return TstGetScaledSymbol (t ,_dfac ,scale ...);};func _abee (_ada *Bitmap ,_bcbd ,_caee int ,_ebgd ,_febfe int ,_bcgc RasterOperator ,_fbfaf *Bitmap ,_ggcf ,_dbgfc int )error {var _agcff ,_bbfg ,_gabe ,_abbfg int ;
if _bcbd < 0{_ggcf -=_bcbd ;_ebgd +=_bcbd ;_bcbd =0;};if _ggcf < 0{_bcbd -=_ggcf ;_ebgd +=_ggcf ;_ggcf =0;};_agcff =_bcbd +_ebgd -_ada .Width ;if _agcff > 0{_ebgd -=_agcff ;};_bbfg =_ggcf +_ebgd -_fbfaf .Width ;if _bbfg > 0{_ebgd -=_bbfg ;};if _caee < 0{_dbgfc -=_caee ;
_febfe +=_caee ;_caee =0;};if _dbgfc < 0{_caee -=_dbgfc ;_febfe +=_dbgfc ;_dbgfc =0;};_gabe =_caee +_febfe -_ada .Height ;if _gabe > 0{_febfe -=_gabe ;};_abbfg =_dbgfc +_febfe -_fbfaf .Height ;if _abbfg > 0{_febfe -=_abbfg ;};if _ebgd <=0||_febfe <=0{return nil ;
};var _ggd error ;switch {case _bcbd &7==0&&_ggcf &7==0:_ggd =_aaceb (_ada ,_bcbd ,_caee ,_ebgd ,_febfe ,_bcgc ,_fbfaf ,_ggcf ,_dbgfc );case _bcbd &7==_ggcf &7:_ggd =_bfab (_ada ,_bcbd ,_caee ,_ebgd ,_febfe ,_bcgc ,_fbfaf ,_ggcf ,_dbgfc );default:_ggd =_agdad (_ada ,_bcbd ,_caee ,_ebgd ,_febfe ,_bcgc ,_fbfaf ,_ggcf ,_dbgfc );
};if _ggd !=nil {return _c .Wrap (_ggd ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func _fga (_ded ,_ffaa *Bitmap ,_cef int ,_agd []byte ,_bbd int )(_bad error ){const _fad ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_aag ,_cgac ,_bgb ,_gec ,_bgd ,_dfcg ,_afd ,_bag int ;_bgce ,_cff ,_cbfa ,_gdf uint32 ;_bcf ,_cfg byte ;_def uint16 ;);_cbe :=make ([]byte ,4);_cag :=make ([]byte ,4);for _bgb =0;_bgb < _ded .Height -1;_bgb ,_gec =_bgb +2,_gec +1{_aag =_bgb *_ded .RowStride ;
_cgac =_gec *_ffaa .RowStride ;for _bgd ,_dfcg =0,0;_bgd < _bbd ;_bgd ,_dfcg =_bgd +4,_dfcg +1{for _afd =0;_afd < 4;_afd ++{_bag =_aag +_bgd +_afd ;if _bag <=len (_ded .Data )-1&&_bag < _aag +_ded .RowStride {_cbe [_afd ]=_ded .Data [_bag ];}else {_cbe [_afd ]=0x00;
};_bag =_aag +_ded .RowStride +_bgd +_afd ;if _bag <=len (_ded .Data )-1&&_bag < _aag +(2*_ded .RowStride ){_cag [_afd ]=_ded .Data [_bag ];}else {_cag [_afd ]=0x00;};};_bgce =_fge .BigEndian .Uint32 (_cbe );_cff =_fge .BigEndian .Uint32 (_cag );_cbfa =_bgce &_cff ;
_cbfa |=_cbfa <<1;_gdf =_bgce |_cff ;_gdf &=_gdf <<1;_cff =_cbfa |_gdf ;_cff &=0xaaaaaaaa;_bgce =_cff |(_cff <<7);_bcf =byte (_bgce >>24);_cfg =byte ((_bgce >>8)&0xff);_bag =_cgac +_dfcg ;if _bag +1==len (_ffaa .Data )-1||_bag +1>=_cgac +_ffaa .RowStride {if _bad =_ffaa .SetByte (_bag ,_agd [_bcf ]);
_bad !=nil {return _c .Wrapf (_bad ,_fad ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bag );};}else {_def =(uint16 (_agd [_bcf ])<<8)|uint16 (_agd [_cfg ]);if _bad =_ffaa .setTwoBytes (_bag ,_def );_bad !=nil {return _c .Wrapf (_bad ,_fad ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bag );
};_dfcg ++;};};};return nil ;};type BoundaryCondition int ;func _cfgcc (_ddca ,_eaae *Bitmap ,_dac *Selection )(*Bitmap ,error ){const _ebaag ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _gddb error ;if _ddca ,_gddb =_bbdd (_ddca ,_eaae ,_dac );
_gddb !=nil {return nil ,_gddb ;};_cce ,_gddb :=_bfcb (nil ,_eaae ,_dac );if _gddb !=nil {return nil ,_c .Wrap (_gddb ,_ebaag ,"");};if _ ,_gddb =_bdade (_ddca ,_cce ,_dac );_gddb !=nil {return nil ,_c .Wrap (_gddb ,_ebaag ,"");};return _ddca ,nil ;};var _ _ff .Interface =&ClassedPoints {};
func TstImageBitmap ()*Bitmap {return _ebgf .Copy ()};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_befg float64 ,_gba error ){const _fagg ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _befg ,_c .Error (_fagg ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _befg ,_c .Error (_fagg ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _befg ,_c .Error (_fagg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cgeb ,_dgdg :=bm1 .Width ,bm1 .Height ;_acgb ,_ccdf :=bm2 .Width ,bm2 .Height ;
if _fgce (_cgeb -_acgb )> maxDiffW {return 0,nil ;};if _fgce (_dgdg -_ccdf )> maxDiffH {return 0,nil ;};var _cfdc ,_debf int ;if delX >=0{_cfdc =int (delX +0.5);}else {_cfdc =int (delX -0.5);};if delY >=0{_debf =int (delY +0.5);}else {_debf =int (delY -0.5);
};_deaf :=bm1 .createTemplate ();if _gba =_deaf .RasterOperation (_cfdc ,_debf ,_acgb ,_ccdf ,PixSrc ,bm2 ,0,0);_gba !=nil {return _befg ,_c .Wrap (_gba ,_fagg ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _gba =_deaf .RasterOperation (0,0,_cgeb ,_dgdg ,PixSrcAndDst ,bm1 ,0,0);
_gba !=nil {return _befg ,_c .Wrap (_gba ,_fagg ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_ggaa :=_deaf .countPixels ();_befg =float64 (_ggaa )*float64 (_ggaa )/(float64 (area1 )*float64 (area2 ));return _befg ,nil ;};func _bbdd (_eedd ,_dcd *Bitmap ,_cged *Selection )(*Bitmap ,error ){const _eadb ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _gfdb ,_dabgd int ;if _dcd ==nil {return nil ,_c .Error (_eadb ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cged ==nil {return nil ,_c .Error (_eadb ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_gfdb =_cged .Width ;_dabgd =_cged .Height ;if _gfdb ==0||_dabgd ==0{return nil ,_c .Error (_eadb ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _eedd ==nil {return _dcd .createTemplate (),nil ;};if _afbdf :=_eedd .resizeImageData (_dcd );
_afbdf !=nil {return nil ,_afbdf ;};return _eedd ,nil ;};func (_ege *Bitmap )InverseData (){_ege .inverseData ()};type Bitmaps struct{Values []*Bitmap ;Boxes []*_cb .Rectangle ;};func _cdggg (_efcg ,_fcae *Bitmap ,_cbgga ,_fdec ,_abfd uint ,_egeb ,_bagad int ,_fbefg bool ,_eaaca ,_bbgcd int )error {for _cadg :=_egeb ;
_cadg < _bagad ;_cadg ++{if _eaaca +1< len (_efcg .Data ){_gcab :=_cadg +1==_bagad ;_adeg ,_deab :=_efcg .GetByte (_eaaca );if _deab !=nil {return _deab ;};_eaaca ++;_adeg <<=_cbgga ;_bca ,_deab :=_efcg .GetByte (_eaaca );if _deab !=nil {return _deab ;
};_bca >>=_fdec ;_beda :=_adeg |_bca ;if _gcab &&!_fbefg {_beda =_abcg (_abfd ,_beda );};_deab =_fcae .SetByte (_bbgcd ,_beda );if _deab !=nil {return _deab ;};_bbgcd ++;if _gcab &&_fbefg {_fdcc ,_cggd :=_efcg .GetByte (_eaaca );if _cggd !=nil {return _cggd ;
};_fdcc <<=_cbgga ;_beda =_abcg (_abfd ,_fdcc );if _cggd =_fcae .SetByte (_bbgcd ,_beda );_cggd !=nil {return _cggd ;};};continue ;};_edca ,_gafc :=_efcg .GetByte (_eaaca );if _gafc !=nil {_b .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_eaaca ,_gafc );
return _gafc ;};_edca <<=_cbgga ;_eaaca ++;_gafc =_fcae .SetByte (_bbgcd ,_edca );if _gafc !=nil {return _gafc ;};_bbgcd ++;};return nil ;};func (_afa *Bitmap )GetByteIndex (x ,y int )int {return y *_afa .RowStride +(x >>3)};func (_edcf *Bitmap )centroid (_bdcfe ,_adegc []int )(Point ,error ){_bebc :=Point {};
_edcf .setPadBits (0);if len (_bdcfe )==0{_bdcfe =_efbfd ();};if len (_adegc )==0{_adegc =_fbb ();};var _dggf ,_fgecf ,_efff ,_acfc ,_dadc ,_aadg int ;var _dba byte ;for _dadc =0;_dadc < _edcf .Height ;_dadc ++{_abga :=_edcf .RowStride *_dadc ;_acfc =0;
for _aadg =0;_aadg < _edcf .RowStride ;_aadg ++{_dba =_edcf .Data [_abga +_aadg ];if _dba !=0{_acfc +=_adegc [_dba ];_dggf +=_bdcfe [_dba ]+_aadg *8*_adegc [_dba ];};};_efff +=_acfc ;_fgecf +=_acfc *_dadc ;};if _efff !=0{_bebc .X =float32 (_dggf )/float32 (_efff );
_bebc .Y =float32 (_fgecf )/float32 (_efff );};return _bebc ,nil ;};func Rect (x ,y ,w ,h int )(*_cb .Rectangle ,error ){const _afg ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_c .Errorf (_afg ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_c .Error (_afg ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_bcc :=_cb .Rect (x ,y ,x +w ,y +h );return &_bcc ,nil ;
};func (_gegc *Bitmap )setAll ()error {_eeac :=_aagb (_gegc ,0,0,_gegc .Width ,_gegc .Height ,PixSet ,nil ,0,0);if _eeac !=nil {return _c .Wrap (_eeac ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _eadg ()(_faf []byte ){_faf =make ([]byte ,256);
for _bea :=0;_bea < 256;_bea ++{_gdc :=byte (_bea );_faf [_gdc ]=(_gdc &0x01)|((_gdc &0x04)>>1)|((_gdc &0x10)>>2)|((_gdc &0x40)>>3)|((_gdc &0x02)<<3)|((_gdc &0x08)<<2)|((_gdc &0x20)<<1)|(_gdc &0x80);};return _faf ;};type shift int ;func (_gfb *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _aagb (_gfb ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _bfab (_becb *Bitmap ,_fgbfb ,_ddba ,_dcdc ,_gaaa int ,_efdaf RasterOperator ,_bebd *Bitmap ,_dcga ,_gecg int )error {var (_faeebg bool ;_gbcag bool ;_dgge int ;_caad int ;_gffd int ;_fcagd bool ;_dfaf byte ;_dedc int ;_bage int ;_ccba int ;_debc ,_bddg int ;
);_adeag :=8-(_fgbfb &7);_badgc :=_gfafb [_adeag ];_geaea :=_becb .RowStride *_ddba +(_fgbfb >>3);_cadb :=_bebd .RowStride *_gecg +(_dcga >>3);if _dcdc < _adeag {_faeebg =true ;_badgc &=_dfec [8-_adeag +_dcdc ];};if !_faeebg {_dgge =(_dcdc -_adeag )>>3;
if _dgge > 0{_gbcag =true ;_caad =_geaea +1;_gffd =_cadb +1;};};_dedc =(_fgbfb +_dcdc )&7;if !(_faeebg ||_dedc ==0){_fcagd =true ;_dfaf =_dfec [_dedc ];_bage =_geaea +1+_dgge ;_ccba =_cadb +1+_dgge ;};switch _efdaf {case PixSrc :for _debc =0;_debc < _gaaa ;
_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],_bebd .Data [_cadb ],_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]=_bebd .Data [_gffd +_bddg ];
};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],_bebd .Data [_ccba ],_dfaf );_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixNotSrc :for _debc =0;
_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],^_bebd .Data [_cadb ],_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]=^_bebd .Data [_gffd +_bddg ];
};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],^_bebd .Data [_ccba ],_dfaf );_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixSrcOrDst :for _debc =0;
_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],_bebd .Data [_cadb ]|_becb .Data [_geaea ],_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;
_bddg ++{_becb .Data [_caad +_bddg ]|=_bebd .Data [_gffd +_bddg ];};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],_bebd .Data [_ccba ]|_becb .Data [_bage ],_dfaf );
_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixSrcAndDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],_bebd .Data [_cadb ]&_becb .Data [_geaea ],_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;
};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]&=_bebd .Data [_gffd +_bddg ];};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],_bebd .Data [_ccba ]&_becb .Data [_bage ],_dfaf );
_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixSrcXorDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],_bebd .Data [_cadb ]^_becb .Data [_geaea ],_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;
};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]^=_bebd .Data [_gffd +_bddg ];};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],_bebd .Data [_ccba ]^_becb .Data [_bage ],_dfaf );
_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixNotSrcOrDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],^(_bebd .Data [_cadb ])|_becb .Data [_geaea ],_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;
};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]|=^(_bebd .Data [_gffd +_bddg ]);};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],^(_bebd .Data [_ccba ])|_becb .Data [_bage ],_dfaf );
_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixNotSrcAndDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],^(_bebd .Data [_cadb ])&_becb .Data [_geaea ],_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;
};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]&=^_bebd .Data [_gffd +_bddg ];};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],^(_bebd .Data [_ccba ])&_becb .Data [_bage ],_dfaf );
_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixSrcOrNotDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],_bebd .Data [_cadb ]|^(_becb .Data [_geaea ]),_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;
};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]=_bebd .Data [_gffd +_bddg ]|^(_becb .Data [_caad +_bddg ]);};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;
_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],_bebd .Data [_ccba ]|^(_becb .Data [_bage ]),_dfaf );_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixSrcAndNotDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],_bebd .Data [_cadb ]&^(_becb .Data [_geaea ]),_badgc );
_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]=_bebd .Data [_gffd +_bddg ]&^(_becb .Data [_caad +_bddg ]);};_caad +=_becb .RowStride ;
_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],_bebd .Data [_ccba ]&^(_becb .Data [_bage ]),_dfaf );_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixNotPixSrcOrDst :for _debc =0;
_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],^(_bebd .Data [_cadb ]|_becb .Data [_geaea ]),_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;
_bddg ++{_becb .Data [_caad +_bddg ]=^(_bebd .Data [_gffd +_bddg ]|_becb .Data [_caad +_bddg ]);};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],^(_bebd .Data [_ccba ]|_becb .Data [_bage ]),_dfaf );
_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixNotPixSrcAndDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],^(_bebd .Data [_cadb ]&_becb .Data [_geaea ]),_badgc );_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;
};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]=^(_bebd .Data [_gffd +_bddg ]&_becb .Data [_caad +_bddg ]);};_caad +=_becb .RowStride ;_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;
_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],^(_bebd .Data [_ccba ]&_becb .Data [_bage ]),_dfaf );_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};case PixNotPixSrcXorDst :for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_geaea ]=_geeb (_becb .Data [_geaea ],^(_bebd .Data [_cadb ]^_becb .Data [_geaea ]),_badgc );
_geaea +=_becb .RowStride ;_cadb +=_bebd .RowStride ;};if _gbcag {for _debc =0;_debc < _gaaa ;_debc ++{for _bddg =0;_bddg < _dgge ;_bddg ++{_becb .Data [_caad +_bddg ]=^(_bebd .Data [_gffd +_bddg ]^_becb .Data [_caad +_bddg ]);};_caad +=_becb .RowStride ;
_gffd +=_bebd .RowStride ;};};if _fcagd {for _debc =0;_debc < _gaaa ;_debc ++{_becb .Data [_bage ]=_geeb (_becb .Data [_bage ],^(_bebd .Data [_ccba ]^_becb .Data [_bage ]),_dfaf );_bage +=_becb .RowStride ;_ccba +=_bebd .RowStride ;};};default:_b .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_efdaf );
return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_bdgfec *ClassedPoints )Len ()int {return _bdgfec .IntSlice .Size ()};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _bceg (_ggacg ,_dfaa *Bitmap )(*Bitmap ,error ){if _dfaa ==nil {return nil ,_c .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dfaa ==_ggacg {return _ggacg ,nil ;};if _ggacg ==nil {_ggacg =_dfaa .createTemplate ();copy (_ggacg .Data ,_dfaa .Data );return _ggacg ,nil ;};_fabc :=_ggacg .resizeImageData (_dfaa );if _fabc !=nil {return nil ,_c .Wrap (_fabc ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_ggacg .Text =_dfaa .Text ;copy (_ggacg .Data ,_dfaa .Data );return _ggacg ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func TstGetScaledSymbol (t *_fg .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_bbba ,_ffae :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_f .NoError (t ,_ffae );return _bbba ;};func (_cffb *Bitmaps )selectByIndicator (_gdfgb *_de .NumSlice )(_fgeed *Bitmaps ,_afadc error ){const _acbb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _cffb ==nil {return nil ,_c .Error (_acbb ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _gdfgb ==nil {return nil ,_c .Error (_acbb ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_cffb .Values )==0{return _cffb ,nil ;};if len (*_gdfgb )!=len (_cffb .Values ){return nil ,_c .Errorf (_acbb ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_gdfgb ),len (_cffb .Values ));
};var _dfff ,_ebda ,_afde int ;for _ebda =0;_ebda < len (*_gdfgb );_ebda ++{if _dfff ,_afadc =_gdfgb .GetInt (_ebda );_afadc !=nil {return nil ,_c .Wrap (_afadc ,_acbb ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _dfff ==1{_afde ++;
};};if _afde ==len (_cffb .Values ){return _cffb ,nil ;};_fgeed =&Bitmaps {};_fgcb :=len (_cffb .Values )==len (_cffb .Boxes );for _ebda =0;_ebda < len (*_gdfgb );_ebda ++{if _dfff =int ((*_gdfgb )[_ebda ]);_dfff ==0{continue ;};_fgeed .Values =append (_fgeed .Values ,_cffb .Values [_ebda ]);
if _fgcb {_fgeed .Boxes =append (_fgeed .Boxes ,_cffb .Boxes [_ebda ]);};};return _fgeed ,nil ;};func TstRSymbol (t *_fg .T ,scale ...int )*Bitmap {_becge ,_eddcd :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_eddcd );return TstGetScaledSymbol (t ,_becge ,scale ...);
};func _gbge (_cbdgd *Bitmap ,_fggg *Bitmap ,_aeef *Selection ,_egad **Bitmap )(*Bitmap ,error ){const _gcgc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _fggg ==nil {return nil ,_c .Error (_gcgc ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _aeef ==nil {return nil ,_c .Error (_gcgc ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_fdece ,_adba :=_aeef .Height ,_aeef .Width ;if _fdece ==0||_adba ==0{return nil ,_c .Error (_gcgc ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _cbdgd ==nil {_cbdgd =_fggg .createTemplate ();*_egad =_fggg ;return _cbdgd ,nil ;};_cbdgd .Width =_fggg .Width ;_cbdgd .Height =_fggg .Height ;_cbdgd .RowStride =_fggg .RowStride ;_cbdgd .Color =_fggg .Color ;_cbdgd .Data =make ([]byte ,_fggg .RowStride *_fggg .Height );
if _cbdgd ==_fggg {*_egad =_fggg .Copy ();}else {*_egad =_fggg ;};return _cbdgd ,nil ;};func _ggbe (_bccd *Bitmap ,_gddg ,_cccb ,_eebc ,_cada int ,_cdfb RasterOperator ){if _gddg < 0{_eebc +=_gddg ;_gddg =0;};_ccec :=_gddg +_eebc -_bccd .Width ;if _ccec > 0{_eebc -=_ccec ;
};if _cccb < 0{_cada +=_cccb ;_cccb =0;};_caaf :=_cccb +_cada -_bccd .Height ;if _caaf > 0{_cada -=_caaf ;};if _eebc <=0||_cada <=0{return ;};if (_gddg &7)==0{_bacfe (_bccd ,_gddg ,_cccb ,_eebc ,_cada ,_cdfb );}else {_gaba (_bccd ,_gddg ,_cccb ,_eebc ,_cada ,_cdfb );
};};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};const (_aedbd shift =iota ;_abd ;);func _cdcg (_dccg ,_aeec *Bitmap ,_edff ,_bded int )(*Bitmap ,error ){const _efbd ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _aeec ==nil {return nil ,_c .Error (_efbd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _edff < 1&&_bded < 1{return nil ,_c .Error (_efbd ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _edff ==1&&_bded ==1{return _aeec .Copy (),nil ;};if _edff ==1||_bded ==1{var _eeab error ;
_ebbf :=SelCreateBrick (_bded ,_edff ,_bded /2,_edff /2,SelHit );_dccg ,_eeab =_cdcb (_dccg ,_aeec ,_ebbf );if _eeab !=nil {return nil ,_c .Wrap (_eeab ,_efbd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dccg ,nil ;};_dbff :=SelCreateBrick (1,_edff ,0,_edff /2,SelHit );_gcbc :=SelCreateBrick (_bded ,1,_bded /2,0,SelHit );_bcgd ,_acgbd :=_bdade (nil ,_aeec ,_dbff );if _acgbd !=nil {return nil ,_c .Wrap (_acgbd ,_efbd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_dccg ,_acgbd =_bdade (_dccg ,_bcgd ,_gcbc );if _acgbd !=nil {return nil ,_c .Wrap (_acgbd ,_efbd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_acgbd =_bfcb (_bcgd ,_dccg ,_dbff );if _acgbd !=nil {return nil ,_c .Wrap (_acgbd ,_efbd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_acgbd =_bfcb (_dccg ,_bcgd ,_gcbc );if _acgbd !=nil {return nil ,_c .Wrap (_acgbd ,_efbd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _dccg ,nil ;};func TstFrameBitmapData ()[]byte {return _gdcg .Data };func (_bgad *BitmapsArray )AddBox (box *_cb .Rectangle ){_bgad .Boxes =append (_bgad .Boxes ,box )};
func (_cebb *Bitmap )nextOnPixel (_agcb ,_abcc int )(_fddc _cb .Point ,_ebg bool ,_bce error ){const _fdbc ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_fddc ,_ebg ,_bce =_cebb .nextOnPixelLow (_cebb .Width ,_cebb .Height ,_cebb .RowStride ,_agcb ,_abcc );
if _bce !=nil {return _fddc ,false ,_c .Wrap (_bce ,_fdbc ,"");};return _fddc ,_ebg ,nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _fdaaa (oldByte ,newByte ,op );};func (_dcge Points )GetIntX (i int )(int ,error ){if i >=len (_dcge ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dcge [i ].X ),nil ;};func _fgce (_ffeb int )int {if _ffeb < 0{return -_ffeb ;};return _ffeb ;};func _abcg (_fffc uint ,_fdcb byte )byte {return _fdcb >>_fffc <<_fffc };func TstNSymbol (t *_fg .T ,scale ...int )*Bitmap {_egbb ,_bbfa :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_f .NoError (t ,_bbfa );return TstGetScaledSymbol (t ,_egbb ,scale ...);};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_cb .Rectangle ;};func (_eaac *Bitmap )inverseData (){if _bdgd :=_eaac .RasterOperation (0,0,_eaac .Width ,_eaac .Height ,PixNotDst ,nil ,0,0);
_bdgd !=nil {_b .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_bdgd );};if _eaac .Color ==Chocolate {_eaac .Color =Vanilla ;}else {_eaac .Color =Chocolate ;};};func (_dfcfc *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _bgdd ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _dcdg :=_dfcfc .validateIntSlice ();_dcdg !=nil {return nil ,_c .Wrap (_dcdg ,_bgdd ,"");};if _dfcfc .IntSlice .Size ()==0{return nil ,_c .Error (_bgdd ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_dfcfc .SortByY ();var (_egcca []*ClassedPoints ;_bfbe int ;);_gabg :=-1;var _aeea *ClassedPoints ;for _eegc :=0;_eegc < len (_dfcfc .IntSlice );_eegc ++{_bfbe =int (_dfcfc .YAtIndex (_eegc ));if _bfbe !=_gabg {_aeea =&ClassedPoints {Points :_dfcfc .Points };
_gabg =_bfbe ;_egcca =append (_egcca ,_aeea );};_aeea .IntSlice =append (_aeea .IntSlice ,_dfcfc .IntSlice [_eegc ]);};for _ ,_fbaa :=range _egcca {_fbaa .SortByX ();};return _egcca ,nil ;};func (_babe Points )YSorter ()func (_cgge ,_aeecc int )bool {return func (_fbcc ,_eaecb int )bool {return _babe [_fbcc ].Y < _babe [_eaecb ].Y };
};func _cdcb (_ebd ,_bcg *Bitmap ,_ccb *Selection )(*Bitmap ,error ){const _feaae ="\u006f\u0070\u0065\u006e";var _fgfca error ;_ebd ,_fgfca =_bbdd (_ebd ,_bcg ,_ccb );if _fgfca !=nil {return nil ,_c .Wrap (_fgfca ,_feaae ,"");};_ebbdb ,_fgfca :=_bdade (nil ,_bcg ,_ccb );
if _fgfca !=nil {return nil ,_c .Wrap (_fgfca ,_feaae ,"");};_ ,_fgfca =_bfcb (_ebd ,_ebbdb ,_ccb );if _fgfca !=nil {return nil ,_c .Wrap (_fgfca ,_feaae ,"");};return _ebd ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _faeeg ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_gfec ,_acaa :=p1 .Width ,p1 .Height ;_bcec ,_fdecc :=p3 .Width ,p3 .Height ;if _de .Abs (_gfec -_bcec )> maxDiffW {return false ,nil ;};if _de .Abs (_acaa -_fdecc )> maxDiffH {return false ,nil ;};_feag :=int (delX +_de .Sign (delX )*0.5);_bgcda :=int (delY +_de .Sign (delY )*0.5);
var _efda error ;_fcdb :=p1 .CreateTemplate ();if _efda =_fcdb .RasterOperation (0,0,_gfec ,_acaa ,PixSrc ,p1 ,0,0);_efda !=nil {return false ,_c .Wrap (_efda ,_faeeg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _efda =_fcdb .RasterOperation (_feag ,_bgcda ,_gfec ,_acaa ,PixNotSrcAndDst ,p4 ,0,0);
_efda !=nil {return false ,_c .Wrap (_efda ,_faeeg ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _fcdb .Zero (){return false ,nil ;};if _efda =_fcdb .RasterOperation (_feag ,_bgcda ,_bcec ,_fdecc ,PixSrc ,p3 ,0,0);_efda !=nil {return false ,_c .Wrap (_efda ,_faeeg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _efda =_fcdb .RasterOperation (0,0,_bcec ,_fdecc ,PixNotSrcAndDst ,p2 ,0,0);_efda !=nil {return false ,_c .Wrap (_efda ,_faeeg ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fcdb .Zero (),nil ;};func _aaceb (_efafe *Bitmap ,_ecga ,_bebf ,_ebde ,_dfef int ,_fecc RasterOperator ,_fdcf *Bitmap ,_dgba ,_beedf int )error {var (_agbc byte ;
_cbff int ;_cbfb int ;_aebg ,_dbgg int ;_aaef ,_egba int ;);_ggab :=_ebde >>3;_bbab :=_ebde &7;if _bbab > 0{_agbc =_dfec [_bbab ];};_cbff =_fdcf .RowStride *_beedf +(_dgba >>3);_cbfb =_efafe .RowStride *_bebf +(_ecga >>3);switch _fecc {case PixSrc :for _aaef =0;
_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]=_fdcf .Data [_aebg ];_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],_fdcf .Data [_aebg ],_agbc );
};};case PixNotSrc :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]=^(_fdcf .Data [_aebg ]);_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],^_fdcf .Data [_aebg ],_agbc );
};};case PixSrcOrDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]|=_fdcf .Data [_aebg ];_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],_fdcf .Data [_aebg ]|_efafe .Data [_dbgg ],_agbc );
};};case PixSrcAndDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]&=_fdcf .Data [_aebg ];_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],_fdcf .Data [_aebg ]&_efafe .Data [_dbgg ],_agbc );
};};case PixSrcXorDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]^=_fdcf .Data [_aebg ];_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],_fdcf .Data [_aebg ]^_efafe .Data [_dbgg ],_agbc );
};};case PixNotSrcOrDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]|=^(_fdcf .Data [_aebg ]);_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],^(_fdcf .Data [_aebg ])|_efafe .Data [_dbgg ],_agbc );
};};case PixNotSrcAndDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]&=^(_fdcf .Data [_aebg ]);_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],^(_fdcf .Data [_aebg ])&_efafe .Data [_dbgg ],_agbc );
};};case PixSrcOrNotDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]=_fdcf .Data [_aebg ]|^(_efafe .Data [_dbgg ]);_dbgg ++;
_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],_fdcf .Data [_aebg ]|^(_efafe .Data [_dbgg ]),_agbc );};};case PixSrcAndNotDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;
for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]=_fdcf .Data [_aebg ]&^(_efafe .Data [_dbgg ]);_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],_fdcf .Data [_aebg ]&^(_efafe .Data [_dbgg ]),_agbc );};};case PixNotPixSrcOrDst :for _aaef =0;
_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]=^(_fdcf .Data [_aebg ]|_efafe .Data [_dbgg ]);_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],^(_fdcf .Data [_aebg ]|_efafe .Data [_dbgg ]),_agbc );
};};case PixNotPixSrcAndDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]=^(_fdcf .Data [_aebg ]&_efafe .Data [_dbgg ]);_dbgg ++;
_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],^(_fdcf .Data [_aebg ]&_efafe .Data [_dbgg ]),_agbc );};};case PixNotPixSrcXorDst :for _aaef =0;_aaef < _dfef ;_aaef ++{_aebg =_cbff +_aaef *_fdcf .RowStride ;_dbgg =_cbfb +_aaef *_efafe .RowStride ;
for _egba =0;_egba < _ggab ;_egba ++{_efafe .Data [_dbgg ]=^(_fdcf .Data [_aebg ]^_efafe .Data [_dbgg ]);_dbgg ++;_aebg ++;};if _bbab > 0{_efafe .Data [_dbgg ]=_geeb (_efafe .Data [_dbgg ],^(_fdcf .Data [_aebg ]^_efafe .Data [_dbgg ]),_agbc );};};default:_b .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_fecc );
return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _eccb (_efee ,_geee int )int {if _efee > _geee {return _efee ;};return _geee ;};type CombinationOperator int ;func NewClassedPoints (points *Points ,classes _de .IntSlice )(*ClassedPoints ,error ){const _dfbe ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_c .Error (_dfbe ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_c .Error (_dfbe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_bacd :=&ClassedPoints {Points :points ,IntSlice :classes };if _gfeb :=_bacd .validateIntSlice ();_gfeb !=nil {return nil ,_c .Wrap (_gfeb ,_dfbe ,"");};return _bacd ,nil ;};func (_fbf *Bitmap )Equals (s *Bitmap )bool {if len (_fbf .Data )!=len (s .Data )||_fbf .Width !=s .Width ||_fbf .Height !=s .Height {return false ;
};for _cffa :=0;_cffa < _fbf .Height ;_cffa ++{_edb :=_cffa *_fbf .RowStride ;for _abc :=0;_abc < _fbf .RowStride ;_abc ++{if _fbf .Data [_edb +_abc ]!=s .Data [_edb +_abc ]{return false ;};};};return true ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;
PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;
PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;
);func _eeebd (_cdedd ,_bgaea *Bitmap ,_agbb ,_cegcf int )(_fbca error ){const _dfce ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_bcbg ,_edffa ,_fefcc ,_gffg int ;_fbgg ,_cbefd ,_gdfbc ,_fbge ,_agfg ,_dffc ,_eecg ,_cbfab byte ;
);for _bcbg =0;_bcbg < _agbb ;_bcbg ++{_fefcc =_bcbg *_cdedd .RowStride ;_gffg =_bcbg *_bgaea .RowStride ;for _edffa =0;_edffa < _cegcf ;_edffa ++{if _fbgg ,_fbca =_cdedd .GetByte (_fefcc +_edffa );_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _cbefd ,_fbca =_bgaea .GetByte (_gffg +_edffa );_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _bcbg > 0{if _gdfbc ,_fbca =_cdedd .GetByte (_fefcc -_cdedd .RowStride +_edffa );
_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_fbgg |=_gdfbc |(_gdfbc <<1)|(_gdfbc >>1);if _edffa > 0{if _cbfab ,_fbca =_cdedd .GetByte (_fefcc -_cdedd .RowStride +_edffa -1);_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_fbgg |=_cbfab <<7;};if _edffa < _cegcf -1{if _cbfab ,_fbca =_cdedd .GetByte (_fefcc -_cdedd .RowStride +_edffa +1);_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");
};_fbgg |=_cbfab >>7;};};if _edffa > 0{if _fbge ,_fbca =_cdedd .GetByte (_fefcc +_edffa -1);_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u006a\u0020\u003e \u0030");};_fbgg |=_fbge <<7;};_fbgg &=_cbefd ;if _fbgg ==0||^_fbgg ==0{if _fbca =_cdedd .SetByte (_fefcc +_edffa ,_fbgg );
_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_eecg =_fbgg ;_fbgg =(_fbgg |(_fbgg >>1)|(_fbgg <<1))&_cbefd ;if (_fbgg ^_eecg )==0{if _fbca =_cdedd .SetByte (_fefcc +_edffa ,_fbgg );
_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _bcbg =_agbb -1;_bcbg >=0;_bcbg --{_fefcc =_bcbg *_cdedd .RowStride ;_gffg =_bcbg *_bgaea .RowStride ;
for _edffa =_cegcf -1;_edffa >=0;_edffa --{if _fbgg ,_fbca =_cdedd .GetByte (_fefcc +_edffa );_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _cbefd ,_fbca =_bgaea .GetByte (_gffg +_edffa );_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bcbg < _agbb -1{if _agfg ,_fbca =_cdedd .GetByte (_fefcc +_cdedd .RowStride +_edffa );
_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_fbgg |=_agfg |(_agfg <<1)|_agfg >>1;if _edffa > 0{if _cbfab ,_fbca =_cdedd .GetByte (_fefcc +_cdedd .RowStride +_edffa -1);
_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_fbgg |=_cbfab <<7;};if _edffa < _cegcf -1{if _cbfab ,_fbca =_cdedd .GetByte (_fefcc +_cdedd .RowStride +_edffa +1);
_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_fbgg |=_cbfab >>7;};};if _edffa < _cegcf -1{if _dffc ,_fbca =_cdedd .GetByte (_fefcc +_edffa +1);_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_fbgg |=_dffc >>7;};_fbgg &=_cbefd ;if _fbgg ==0||(^_fbgg )==0{if _fbca =_cdedd .SetByte (_fefcc +_edffa ,_fbgg );_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_eecg =_fbgg ;
_fbgg =(_fbgg |(_fbgg >>1)|(_fbgg <<1))&_cbefd ;if (_fbgg ^_eecg )==0{if _fbca =_cdedd .SetByte (_fefcc +_edffa ,_fbgg );_fbca !=nil {return _c .Wrap (_fbca ,_dfce ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_eeg *Bitmap )SetDefaultPixel (){for _eacd :=range _eeg .Data {_eeg .Data [_eacd ]=byte (0xff);};};type Color int ;func _dcefd (_facbeg *Bitmap ,_dcdf *_de .Stack ,_cdgbe ,_aeba ,_fgee int )(_dabb *_cb .Rectangle ,_cdcab error ){const _fdba ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _facbeg ==nil {return nil ,_c .Error (_fdba ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dcdf ==nil {return nil ,_c .Error (_fdba ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _fgee {case 4:if _dabb ,_cdcab =_baefa (_facbeg ,_dcdf ,_cdgbe ,_aeba );_cdcab !=nil {return nil ,_c .Wrap (_cdcab ,_fdba ,"");};return _dabb ,nil ;case 8:if _dabb ,_cdcab =_bcggf (_facbeg ,_dcdf ,_cdgbe ,_aeba );_cdcab !=nil {return nil ,_c .Wrap (_cdcab ,_fdba ,"");
};return _dabb ,nil ;default:return nil ,_c .Errorf (_fdba ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_fgee );
};};func TstTSymbol (t *_fg .T ,scale ...int )*Bitmap {_bacda ,_bgdg :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_f .NoError (t ,_bgdg );return TstGetScaledSymbol (t ,_bacda ,scale ...);};func (_cgg *Bitmap )SetPadBits (value int ){_cgg .setPadBits (value )};
func _baefa (_dgfc *Bitmap ,_gaec *_de .Stack ,_addg ,_cccag int )(_aegg *_cb .Rectangle ,_becc error ){const _edgab ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _dgfc ==nil {return nil ,_c .Error (_edgab ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _gaec ==nil {return nil ,_c .Error (_edgab ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_accd ,_befbe :=_dgfc .Width ,_dgfc .Height ;_degdb :=_accd -1;_cfac :=_befbe -1;if _addg < 0||_addg > _degdb ||_cccag < 0||_cccag > _cfac ||!_dgfc .GetPixel (_addg ,_cccag ){return nil ,nil ;
};var _bdea *_cb .Rectangle ;_bdea ,_becc =Rect (100000,100000,0,0);if _becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"");};if _becc =_aeeb (_gaec ,_addg ,_addg ,_cccag ,1,_cfac ,_bdea );_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _becc =_aeeb (_gaec ,_addg ,_addg ,_cccag +1,-1,_cfac ,_bdea );_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_bdea .Min .X ,_bdea .Max .X =_addg ,_addg ;
_bdea .Min .Y ,_bdea .Max .Y =_cccag ,_cccag ;var (_cbea *fillSegment ;_dacc int ;);for _gaec .Len ()> 0{if _cbea ,_becc =_begf (_gaec );_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"");};_cccag =_cbea ._gcbbd ;for _addg =_cbea ._cbag ;_addg >=0&&_dgfc .GetPixel (_addg ,_cccag );
_addg --{if _becc =_dgfc .SetPixel (_addg ,_cccag ,0);_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"");};};if _addg >=_cbea ._cbag {for _addg ++;_addg <=_cbea ._bbebf &&_addg <=_degdb &&!_dgfc .GetPixel (_addg ,_cccag );_addg ++{};_dacc =_addg ;if !(_addg <=_cbea ._bbebf &&_addg <=_degdb ){continue ;
};}else {_dacc =_addg +1;if _dacc < _cbea ._cbag -1{if _becc =_aeeb (_gaec ,_dacc ,_cbea ._cbag -1,_cbea ._gcbbd ,-_cbea ._ecdb ,_cfac ,_bdea );_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_addg =_cbea ._cbag +1;};for {for ;_addg <=_degdb &&_dgfc .GetPixel (_addg ,_cccag );_addg ++{if _becc =_dgfc .SetPixel (_addg ,_cccag ,0);_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _becc =_aeeb (_gaec ,_dacc ,_addg -1,_cbea ._gcbbd ,_cbea ._ecdb ,_cfac ,_bdea );
_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _addg > _cbea ._bbebf +1{if _becc =_aeeb (_gaec ,_cbea ._bbebf +1,_addg -1,_cbea ._gcbbd ,-_cbea ._ecdb ,_cfac ,_bdea );_becc !=nil {return nil ,_c .Wrap (_becc ,_edgab ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _addg ++;_addg <=_cbea ._bbebf &&_addg <=_degdb &&!_dgfc .GetPixel (_addg ,_cccag );_addg ++{};_dacc =_addg ;if !(_addg <=_cbea ._bbebf &&_addg <=_degdb ){break ;};};};_bdea .Max .X ++;_bdea .Max .Y ++;return _bdea ,nil ;};var _dfcfa =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func _egb (_fcba ,_baf *Bitmap ,_deda int ,_dgf []byte ,_dge int )(_aagf error ){const _gbb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_ead ,_ddb ,_agc ,_bace ,_gbef ,_bba ,_fda ,_gdff int ;
_bef ,_bbgb ,_aagd ,_bdgf uint32 ;_cbg ,_gdb byte ;_cdg uint16 ;);_bafg :=make ([]byte ,4);_age :=make ([]byte ,4);for _agc =0;_agc < _fcba .Height -1;_agc ,_bace =_agc +2,_bace +1{_ead =_agc *_fcba .RowStride ;_ddb =_bace *_baf .RowStride ;for _gbef ,_bba =0,0;
_gbef < _dge ;_gbef ,_bba =_gbef +4,_bba +1{for _fda =0;_fda < 4;_fda ++{_gdff =_ead +_gbef +_fda ;if _gdff <=len (_fcba .Data )-1&&_gdff < _ead +_fcba .RowStride {_bafg [_fda ]=_fcba .Data [_gdff ];}else {_bafg [_fda ]=0x00;};_gdff =_ead +_fcba .RowStride +_gbef +_fda ;
if _gdff <=len (_fcba .Data )-1&&_gdff < _ead +(2*_fcba .RowStride ){_age [_fda ]=_fcba .Data [_gdff ];}else {_age [_fda ]=0x00;};};_bef =_fge .BigEndian .Uint32 (_bafg );_bbgb =_fge .BigEndian .Uint32 (_age );_aagd =_bef &_bbgb ;_aagd |=_aagd <<1;_bdgf =_bef |_bbgb ;
_bdgf &=_bdgf <<1;_bbgb =_aagd &_bdgf ;_bbgb &=0xaaaaaaaa;_bef =_bbgb |(_bbgb <<7);_cbg =byte (_bef >>24);_gdb =byte ((_bef >>8)&0xff);_gdff =_ddb +_bba ;if _gdff +1==len (_baf .Data )-1||_gdff +1>=_ddb +_baf .RowStride {if _aagf =_baf .SetByte (_gdff ,_dgf [_cbg ]);
_aagf !=nil {return _c .Wrapf (_aagf ,_gbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gdff );};}else {_cdg =(uint16 (_dgf [_cbg ])<<8)|uint16 (_dgf [_gdb ]);if _aagf =_baf .setTwoBytes (_gdff ,_cdg );_aagf !=nil {return _c .Wrapf (_aagf ,_gbb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gdff );
};_bba ++;};};};return nil ;};func (_ega *Bitmap )SizesEqual (s *Bitmap )bool {if _ega ==s {return true ;};if _ega .Width !=s .Width ||_ega .Height !=s .Height {return false ;};return true ;};func (_adcb *Selection )setOrigin (_fgac ,_egcaf int ){_adcb .Cy ,_adcb .Cx =_fgac ,_egcaf };
func _fbdb (_bdac ,_afad ,_ceag *Bitmap ,_gada int )(*Bitmap ,error ){const _dgecc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _afad ==nil {return nil ,_c .Error (_dgecc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _ceag ==nil {return nil ,_c .Error (_dgecc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _gada !=4&&_gada !=8{return nil ,_c .Error (_dgecc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _fadc error ;_bdac ,_fadc =_bceg (_bdac ,_afad );if _fadc !=nil {return nil ,_c .Wrap (_fadc ,_dgecc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cgega :=_afad .createTemplate ();_ceag .setPadBits (0);
for _ecfg :=0;_ecfg < _baef ;_ecfg ++{_cgega ,_fadc =_bceg (_cgega ,_bdac );if _fadc !=nil {return nil ,_c .Wrapf (_fadc ,_dgecc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ecfg );};if _fadc =_fcfdd (_bdac ,_ceag ,_gada );
_fadc !=nil {return nil ,_c .Wrapf (_fadc ,_dgecc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ecfg );};if _cgega .Equals (_bdac ){break ;};};return _bdac ,nil ;};func (_fefd *ClassedPoints )ySortFunction ()func (_dfg int ,_fbbb int )bool {return func (_ggef ,_eda int )bool {return _fefd .YAtIndex (_ggef )< _fefd .YAtIndex (_eda )};
};func _cg ()(_fcb [256]uint64 ){for _efg :=0;_efg < 256;_efg ++{if _efg &0x01!=0{_fcb [_efg ]|=0xff;};if _efg &0x02!=0{_fcb [_efg ]|=0xff00;};if _efg &0x04!=0{_fcb [_efg ]|=0xff0000;};if _efg &0x08!=0{_fcb [_efg ]|=0xff000000;};if _efg &0x10!=0{_fcb [_efg ]|=0xff00000000;
};if _efg &0x20!=0{_fcb [_efg ]|=0xff0000000000;};if _efg &0x40!=0{_fcb [_efg ]|=0xff000000000000;};if _efg &0x80!=0{_fcb [_efg ]|=0xff00000000000000;};};return _fcb ;};func _egca (_dgece ,_gebbg *Bitmap ,_geae ,_fefbf int )(*Bitmap ,error ){const _abag ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _gebbg ==nil {return nil ,_c .Error (_abag ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _geae < 1||_fefbf < 1{return nil ,_c .Error (_abag ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _geae ==1&&_fefbf ==1{return _bceg (_dgece ,_gebbg );};if MorphBC ==SymmetricMorphBC {_baceb ,_afgd :=_ebabd (_dgece ,_gebbg ,_geae ,_fefbf );if _afgd !=nil {return nil ,_c .Wrap (_afgd ,_abag ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _baceb ,nil ;};_dfcc :=_eccb (_geae /2,_fefbf /2);_eegb :=8*((_dfcc +7)/8);_dgfd ,_fffb :=_gebbg .AddBorder (_eegb ,0);if _fffb !=nil {return nil ,_c .Wrapf (_fffb ,_abag ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_eegb );
};var _bacf ,_efcge *Bitmap ;if _geae ==1||_fefbf ==1{_bbf :=SelCreateBrick (_fefbf ,_geae ,_fefbf /2,_geae /2,SelHit );_bacf ,_fffb =_cfgcc (nil ,_dgfd ,_bbf );if _fffb !=nil {return nil ,_c .Wrap (_fffb ,_abag ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_cbbc :=SelCreateBrick (1,_geae ,0,_geae /2,SelHit );_cgf ,_afeg :=_bfcb (nil ,_dgfd ,_cbbc );if _afeg !=nil {return nil ,_c .Wrap (_afeg ,_abag ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_dgecg :=SelCreateBrick (_fefbf ,1,_fefbf /2,0,SelHit );_bacf ,_afeg =_bfcb (nil ,_cgf ,_dgecg );if _afeg !=nil {return nil ,_c .Wrap (_afeg ,_abag ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_afeg =_bdade (_cgf ,_bacf ,_cbbc );_afeg !=nil {return nil ,_c .Wrap (_afeg ,_abag ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_afeg =_bdade (_bacf ,_cgf ,_dgecg );_afeg !=nil {return nil ,_c .Wrap (_afeg ,_abag ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _efcge ,_fffb =_bacf .RemoveBorder (_eegb );_fffb !=nil {return nil ,_c .Wrap (_fffb ,_abag ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _dgece ==nil {return _efcge ,nil ;};if _ ,_fffb =_bceg (_dgece ,_efcge );_fffb !=nil {return nil ,_fffb ;};
return _dgece ,nil ;};func (_aece *Bitmaps )selectByIndexes (_aabdf []int )(*Bitmaps ,error ){_bcba :=&Bitmaps {};for _ ,_acfa :=range _aabdf {_gfcea ,_ddgfe :=_aece .GetBitmap (_acfa );if _ddgfe !=nil {return nil ,_c .Wrap (_ddgfe ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_bcba .AddBitmap (_gfcea );};return _bcba ,nil ;};func (_ebfec *byWidth )Less (i ,j int )bool {return _ebfec .Values [i ].Width < _ebfec .Values [j ].Width };func (_dgab *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dagc *Boxes ,_cbgc error ){const _egae ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _dgab ==nil {return nil ,_c .Error (_egae ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_dgab )==0{return _dgab ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_egae ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_c .Errorf (_egae ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_aagdf :=_dgab .makeSizeIndicator (width ,height ,tp ,relation );_bfce ,_cbgc :=_dgab .selectWithIndicator (_aagdf );if _cbgc !=nil {return nil ,_c .Wrap (_cbgc ,_egae ,"");};return _bfce ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _aagb (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_ccdag *Bitmaps )HeightSorter ()func (_bfcg ,_cbdbb int )bool {return func (_aacf ,_ebgaa int )bool {_dece :=_ccdag .Values [_aacf ].Height < _ccdag .Values [_ebgaa ].Height ;_b .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_ccdag .Values [_aacf ].Height ,_ccdag .Values [_ebgaa ].Height ,_dece );
return _dece ;};};type ClassedPoints struct{*Points ;_de .IntSlice ;_dccc func (_fbfg ,_gcdg int )bool ;};func TstWordBitmapWithSpaces (t *_fg .T ,scale ...int )*Bitmap {_afgb :=1;if len (scale )> 0{_afgb =scale [0];};_ceceg :=3;_ecae :=9+7+15+2*_ceceg +2*_ceceg ;
_gbad :=5+_ceceg +5+2*_ceceg ;_adgg :=New (_ecae *_afgb ,_gbad *_afgb );_cddef :=&Bitmaps {};var _afec *int ;_ceceg *=_afgb ;_efeg :=_ceceg ;_afec =&_efeg ;_gagb :=_ceceg ;_dcdcd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );
_dcdcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,_ceceg );_dcdcd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,_ceceg );
_dcdcd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,0);
*_afec =_ceceg ;_gagb =5*_afgb +_ceceg ;_dcdcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,_ceceg );_dcdcd =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstESymbol (t ,scale ...);
TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,1*_afgb );_dcdcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cddef ,_dcdcd ,_afec ,_gagb ,0);TstWriteSymbols (t ,_cddef ,_adgg );return _adgg ;};func (_aea *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _aea .Copy (),nil ;
};_aagfe ,_deaa :=_aea .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _deaa !=nil {return nil ,_c .Wrap (_deaa ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _aagfe ,nil ;};func (_cecb *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_cebe *Boxes ,_dgdc error ){const _dgee ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _cecb ==nil {return nil ,_c .Error (_dgee ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_c .Error (_dgee ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _cebe ,_dgdc =_cecb .connComponentsBB (connectivity );_dgdc !=nil {return nil ,_c .Wrap (_dgdc ,_dgee ,"");};}else {if _cebe ,_dgdc =_cecb .connComponentsBitmapsBB (bms ,connectivity );_dgdc !=nil {return nil ,_c .Wrap (_dgdc ,_dgee ,"");
};};return _cebe ,nil ;};func _ffc (_cfd ,_ea *Bitmap )(_dff error ){const _ec ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_fef :=_ea .RowStride ;_ffd :=_cfd .RowStride ;var _dec ,_eaa ,_eb ,_bae ,_cbd int ;
for _eb =0;_eb < _ea .Height ;_eb ++{_dec =_eb *_fef ;_eaa =8*_eb *_ffd ;for _bae =0;_bae < _fef ;_bae ++{if _dff =_cfd .setEightBytes (_eaa +_bae *8,_efgg [_ea .Data [_dec +_bae ]]);_dff !=nil {return _c .Wrap (_dff ,_ec ,"");};};for _cbd =1;_cbd < 8;
_cbd ++{for _bae =0;_bae < _ffd ;_bae ++{if _dff =_cfd .SetByte (_eaa +_cbd *_ffd +_bae ,_cfd .Data [_eaa +_bae ]);_dff !=nil {return _c .Wrap (_dff ,_ec ,"");};};};};return nil ;};func (_feaf *Bitmap )Zero ()bool {_dfd :=_feaf .Width /8;_abg :=_feaf .Width &7;
var _defb byte ;if _abg !=0{_defb =byte (0xff<<uint (8-_abg ));};var _acd ,_dabc ,_faab int ;for _dabc =0;_dabc < _feaf .Height ;_dabc ++{_acd =_feaf .RowStride *_dabc ;for _faab =0;_faab < _dfd ;_faab ,_acd =_faab +1,_acd +1{if _feaf .Data [_acd ]!=0{return false ;
};};if _abg > 0{if _feaf .Data [_acd ]&_defb !=0{return false ;};};};return true ;};func (_ageef *byWidth )Swap (i ,j int ){_ageef .Values [i ],_ageef .Values [j ]=_ageef .Values [j ],_ageef .Values [i ];if _ageef .Boxes !=nil {_ageef .Boxes [i ],_ageef .Boxes [j ]=_ageef .Boxes [j ],_ageef .Boxes [i ];
};};func (_gcbb *Bitmap )clipRectangle (_eaf ,_aff *_cb .Rectangle )(_cbgb *Bitmap ,_gdd error ){const _gcfe ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _eaf ==nil {return nil ,_c .Error (_gcfe ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_ebe ,_ecfe :=_gcbb .Width ,_gcbb .Height ;_caeb ,_gdd :=ClipBoxToRectangle (_eaf ,_ebe ,_ecfe );if _gdd !=nil {_b .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_gdd );
return nil ,nil ;};_fff ,_fgd :=_caeb .Min .X ,_caeb .Min .Y ;_bbeb ,_cddfb :=_caeb .Max .X -_caeb .Min .X ,_caeb .Max .Y -_caeb .Min .Y ;_cbgb =New (_bbeb ,_cddfb );_cbgb .Text =_gcbb .Text ;if _gdd =_cbgb .RasterOperation (0,0,_bbeb ,_cddfb ,PixSrc ,_gcbb ,_fff ,_fgd );
_gdd !=nil {return nil ,_c .Wrap (_gdd ,_gcfe ,"");};if _aff !=nil {*_aff =*_caeb ;};return _cbgb ,nil ;};func (_gcb *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _gcb .addBorderGeneral (left ,right ,top ,bot ,val );
};func (_cdbb *Bitmaps )makeSizeIndicator (_befgc ,_ffda int ,_adad LocationFilter ,_cfdg SizeComparison )(_degfe *_de .NumSlice ,_daged error ){const _bece ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _cdbb ==nil {return nil ,_c .Error (_bece ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _adad {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_bece ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_adad );
};switch _cfdg {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_bece ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cfdg );
};_degfe =&_de .NumSlice {};var (_geab ,_gggdc ,_geaef int ;_bfga *Bitmap ;);for _ ,_bfga =range _cdbb .Values {_geab =0;_gggdc ,_geaef =_bfga .Width ,_bfga .Height ;switch _adad {case LocSelectWidth :if (_cfdg ==SizeSelectIfLT &&_gggdc < _befgc )||(_cfdg ==SizeSelectIfGT &&_gggdc > _befgc )||(_cfdg ==SizeSelectIfLTE &&_gggdc <=_befgc )||(_cfdg ==SizeSelectIfGTE &&_gggdc >=_befgc )||(_cfdg ==SizeSelectIfEQ &&_gggdc ==_befgc ){_geab =1;
};case LocSelectHeight :if (_cfdg ==SizeSelectIfLT &&_geaef < _ffda )||(_cfdg ==SizeSelectIfGT &&_geaef > _ffda )||(_cfdg ==SizeSelectIfLTE &&_geaef <=_ffda )||(_cfdg ==SizeSelectIfGTE &&_geaef >=_ffda )||(_cfdg ==SizeSelectIfEQ &&_geaef ==_ffda ){_geab =1;
};case LocSelectIfEither :if (_cfdg ==SizeSelectIfLT &&(_gggdc < _befgc ||_geaef < _ffda ))||(_cfdg ==SizeSelectIfGT &&(_gggdc > _befgc ||_geaef > _ffda ))||(_cfdg ==SizeSelectIfLTE &&(_gggdc <=_befgc ||_geaef <=_ffda ))||(_cfdg ==SizeSelectIfGTE &&(_gggdc >=_befgc ||_geaef >=_ffda ))||(_cfdg ==SizeSelectIfEQ &&(_gggdc ==_befgc ||_geaef ==_ffda )){_geab =1;
};case LocSelectIfBoth :if (_cfdg ==SizeSelectIfLT &&(_gggdc < _befgc &&_geaef < _ffda ))||(_cfdg ==SizeSelectIfGT &&(_gggdc > _befgc &&_geaef > _ffda ))||(_cfdg ==SizeSelectIfLTE &&(_gggdc <=_befgc &&_geaef <=_ffda ))||(_cfdg ==SizeSelectIfGTE &&(_gggdc >=_befgc &&_geaef >=_ffda ))||(_cfdg ==SizeSelectIfEQ &&(_gggdc ==_befgc &&_geaef ==_ffda )){_geab =1;
};};_degfe .AddInt (_geab );};return _degfe ,nil ;};func (_edef *ClassedPoints )Less (i ,j int )bool {return _edef ._dccc (i ,j )};type LocationFilter int ;func (_ebcf *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_gdec bool ,_dce error ){const _fdg ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_fbb ();};_baff :=_ebcf .Width >>3;_cdf :=_ebcf .Width &7;_fgfc :=byte (0xff<<uint (8-_cdf ));var (_daeg ,_bdb ,_gga ,_cab int ;_fcag byte ;);for _daeg =0;_daeg < _ebcf .Height ;_daeg ++{_gga =_ebcf .RowStride *_daeg ;for _bdb =0;_bdb < _baff ;
_bdb ++{_fcag ,_dce =_ebcf .GetByte (_gga +_bdb );if _dce !=nil {return false ,_c .Wrap (_dce ,_fdg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_cab +=tab8 [_fcag ];};if _cdf !=0{_fcag ,_dce =_ebcf .GetByte (_gga +_bdb );if _dce !=nil {return false ,_c .Wrap (_dce ,_fdg ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_fcag &=_fgfc ;_cab +=tab8 [_fcag ];};if _cab > thresh {return true ,nil ;};};return _gdec ,nil ;};func (_beef *Boxes )makeSizeIndicator (_bagaf ,_gbca int ,_cad LocationFilter ,_eccbc SizeComparison )*_de .NumSlice {_fec :=&_de .NumSlice {};var _ebea ,_agab ,_aagdc int ;
for _ ,_decga :=range *_beef {_ebea =0;_agab ,_aagdc =_decga .Dx (),_decga .Dy ();switch _cad {case LocSelectWidth :if (_eccbc ==SizeSelectIfLT &&_agab < _bagaf )||(_eccbc ==SizeSelectIfGT &&_agab > _bagaf )||(_eccbc ==SizeSelectIfLTE &&_agab <=_bagaf )||(_eccbc ==SizeSelectIfGTE &&_agab >=_bagaf ){_ebea =1;
};case LocSelectHeight :if (_eccbc ==SizeSelectIfLT &&_aagdc < _gbca )||(_eccbc ==SizeSelectIfGT &&_aagdc > _gbca )||(_eccbc ==SizeSelectIfLTE &&_aagdc <=_gbca )||(_eccbc ==SizeSelectIfGTE &&_aagdc >=_gbca ){_ebea =1;};case LocSelectIfEither :if (_eccbc ==SizeSelectIfLT &&(_aagdc < _gbca ||_agab < _bagaf ))||(_eccbc ==SizeSelectIfGT &&(_aagdc > _gbca ||_agab > _bagaf ))||(_eccbc ==SizeSelectIfLTE &&(_aagdc <=_gbca ||_agab <=_bagaf ))||(_eccbc ==SizeSelectIfGTE &&(_aagdc >=_gbca ||_agab >=_bagaf )){_ebea =1;
};case LocSelectIfBoth :if (_eccbc ==SizeSelectIfLT &&(_aagdc < _gbca &&_agab < _bagaf ))||(_eccbc ==SizeSelectIfGT &&(_aagdc > _gbca &&_agab > _bagaf ))||(_eccbc ==SizeSelectIfLTE &&(_aagdc <=_gbca &&_agab <=_bagaf ))||(_eccbc ==SizeSelectIfGTE &&(_aagdc >=_gbca &&_agab >=_bagaf )){_ebea =1;
};};_fec .AddInt (_ebea );};return _fec ;};func (_acbge *Bitmaps )WidthSorter ()func (_bbddf ,_geea int )bool {return func (_aec ,_ceeed int )bool {return _acbge .Values [_aec ].Width < _acbge .Values [_ceeed ].Width };};func (_aeecd *Bitmaps )CountPixels ()*_de .NumSlice {_afae :=&_de .NumSlice {};
for _ ,_fdbeb :=range _aeecd .Values {_afae .AddInt (_fdbeb .CountPixels ());};return _afae ;};func (_edcg *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _agfd ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _edcg ==nil {return nil ,_c .Error (_agfd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_edcg .Values )-1{return nil ,_c .Errorf (_agfd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _edcg .Values [i ],nil ;};func (_fcca *Bitmap )ClipRectangle (box *_cb .Rectangle )(_add *Bitmap ,_dfag *_cb .Rectangle ,_daae error ){const _aae ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_c .Error (_aae ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_fgbf ,_ece :=_fcca .Width ,_fcca .Height ;_gcbd :=_cb .Rect (0,0,_fgbf ,_ece );if !box .Overlaps (_gcbd ){return nil ,nil ,_c .Error (_aae ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_bbgbd :=box .Intersect (_gcbd );_fdac ,_gdfb :=_bbgbd .Min .X ,_bbgbd .Min .Y ;_egd ,_bbgg :=_bbgbd .Dx (),_bbgbd .Dy ();_add =New (_egd ,_bbgg );_add .Text =_fcca .Text ;if _daae =_add .RasterOperation (0,0,_egd ,_bbgg ,PixSrc ,_fcca ,_fdac ,_gdfb );
_daae !=nil {return nil ,nil ,_c .Wrap (_daae ,_aae ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_dfag =&_bbgbd ;return _add ,_dfag ,nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;
ComponentWords ;);const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func _bf (_fbe *Bitmap ,_gbc ,_gcd int )(*Bitmap ,error ){const _ee ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _fbe ==nil {return nil ,_c .Error (_ee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gbc <=0||_gcd <=0{return nil ,_c .Error (_ee ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _gbc ==_gcd {if _gbc ==1{_gde ,_agb :=_bceg (nil ,_fbe );if _agb !=nil {return nil ,_c .Wrap (_agb ,_ee ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _gde ,nil ;};if _gbc ==2||_gbc ==4||_gbc ==8{_fbc ,_eeb :=_dde (_fbe ,_gbc );
if _eeb !=nil {return nil ,_c .Wrap (_eeb ,_ee ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _fbc ,nil ;};};_cdc :=_gbc *_fbe .Width ;_eee :=_gcd *_fbe .Height ;_be :=New (_cdc ,_eee );_fd :=_be .RowStride ;
var (_aggc ,_edf ,_fcc ,_efea ,_bd int ;_ffde byte ;_cac error ;);for _edf =0;_edf < _fbe .Height ;_edf ++{_aggc =_gcd *_edf *_fd ;for _fcc =0;_fcc < _fbe .Width ;_fcc ++{if _dbb :=_fbe .GetPixel (_fcc ,_edf );_dbb {_bd =_gbc *_fcc ;for _efea =0;_efea < _gbc ;
_efea ++{_be .setBit (_aggc *8+_bd +_efea );};};};for _efea =1;_efea < _gcd ;_efea ++{_aed :=_aggc +_efea *_fd ;for _bed :=0;_bed < _fd ;_bed ++{if _ffde ,_cac =_be .GetByte (_aggc +_bed );_cac !=nil {return nil ,_c .Wrapf (_cac ,_ee ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_efea );
};if _cac =_be .SetByte (_aed +_bed ,_ffde );_cac !=nil {return nil ,_c .Wrap (_cac ,_ee ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _be ,nil ;};func (_cdef *Bitmap )setEightFullBytes (_faff int ,_gcfge uint64 )error {if _faff +7> len (_cdef .Data )-1{return _c .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cdef .Data [_faff ]=byte ((_gcfge &0xff00000000000000)>>56);_cdef .Data [_faff +1]=byte ((_gcfge &0xff000000000000)>>48);_cdef .Data [_faff +2]=byte ((_gcfge &0xff0000000000)>>40);_cdef .Data [_faff +3]=byte ((_gcfge &0xff00000000)>>32);_cdef .Data [_faff +4]=byte ((_gcfge &0xff000000)>>24);
_cdef .Data [_faff +5]=byte ((_gcfge &0xff0000)>>16);_cdef .Data [_faff +6]=byte ((_gcfge &0xff00)>>8);_cdef .Data [_faff +7]=byte (_gcfge &0xff);return nil ;};func (_bbb *Bitmap )GetUnpaddedData ()([]byte ,error ){_gee :=uint (_bbb .Width &0x07);if _gee ==0{return _bbb .Data ,nil ;
};_cdgb :=_bbb .Width *_bbb .Height ;if _cdgb %8!=0{_cdgb >>=3;_cdgb ++;}else {_cdgb >>=3;};_cddf :=make ([]byte ,_cdgb );_bgcd :=_g .NewWriterMSB (_cddf );const _dgdd ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _fege :=0;_fege < _bbb .Height ;_fege ++{for _eea :=0;_eea < _bbb .RowStride ;_eea ++{_cbc :=_bbb .Data [_fege *_bbb .RowStride +_eea ];if _eea !=_bbb .RowStride -1{_cbgg :=_bgcd .WriteByte (_cbc );if _cbgg !=nil {return nil ,_c .Wrap (_cbgg ,_dgdd ,"");
};continue ;};for _acc :=uint (0);_acc < _gee ;_acc ++{_gg :=_bgcd .WriteBit (int (_cbc >>(7-_acc )&0x01));if _gg !=nil {return nil ,_c .Wrap (_gg ,_dgdd ,"");};};};};return _cddf ,nil ;};func (_bggf *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _dada ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _bggf ==nil {return nil ,_c .Error (_dada ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_c .Error (_dada ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_afba :=len (_bggf .Values );_ccecg :=&Bitmaps {Values :make ([]*Bitmap ,_afba ),Boxes :make ([]*_cb .Rectangle ,_afba )};var (_agdce ,_egfb *Bitmap ;_cbfbc *_cb .Rectangle ;_eedfb error ;);for _cgfe :=0;_cgfe < _afba ;_cgfe ++{if _agdce ,_eedfb =_bggf .GetBitmap (_cgfe );
_eedfb !=nil {return nil ,_c .Wrap (_eedfb ,_dada ,"");};if _cbfbc ,_eedfb =_bggf .GetBox (_cgfe );_eedfb !=nil {return nil ,_c .Wrap (_eedfb ,_dada ,"");};if _egfb ,_eedfb =s .clipRectangle (_cbfbc ,nil );_eedfb !=nil {return nil ,_c .Wrap (_eedfb ,_dada ,"");
};if _egfb ,_eedfb =_egfb .And (_agdce );_eedfb !=nil {return nil ,_c .Wrap (_eedfb ,_dada ,"");};_ccecg .Values [_cgfe ]=_egfb ;_ccecg .Boxes [_cgfe ]=_cbfbc ;};return _ccecg ,nil ;};func TstWordBitmap (t *_fg .T ,scale ...int )*Bitmap {_geaeb :=1;if len (scale )> 0{_geaeb =scale [0];
};_edceb :=3;_eddc :=9+7+15+2*_edceb ;_bbedf :=5+_edceb +5;_dgc :=New (_eddc *_geaeb ,_bbedf *_geaeb );_bfaba :=&Bitmaps {};var _ecce *int ;_edceb *=_geaeb ;_febb :=0;_ecce =&_febb ;_gadd :=0;_ccdfa :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );
_ccdfa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,_edceb );_ccdfa =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );_ccdfa =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,_edceb );
_ccdfa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );_ccdfa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );_ccdfa =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,0);
*_ecce =0;_gadd =5*_geaeb +_edceb ;_ccdfa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );_ccdfa =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,_edceb );_ccdfa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );
_ccdfa =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );_ccdfa =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );_ccdfa =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,1*_geaeb );
_ccdfa =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bfaba ,_ccdfa ,_ecce ,_gadd ,0);TstWriteSymbols (t ,_bfaba ,_dgc );return _dgc ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;
XResolution ,YResolution int ;};func (_bdfb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _gdcbe ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_bdfb .Values )==0{return nil ,_c .Error (_gdcbe ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_dcbc :=&BitmapsArray {};_bdfb .SortByWidth ();_ebff :=-1;_febfb :=-1;for _geed :=0;_geed < len (_bdfb .Values );_geed ++{_gggd :=_bdfb .Values [_geed ].Width ;if _gggd > _ebff {_ebff =_gggd ;_febfb ++;_dcbc .Values =append (_dcbc .Values ,&Bitmaps {});
};_dcbc .Values [_febfb ].AddBitmap (_bdfb .Values [_geed ]);};return _dcbc ,nil ;};func TstPSymbol (t *_fg .T )*Bitmap {t .Helper ();_gcfgc :=New (5,8);_f .NoError (t ,_gcfgc .SetPixel (0,0,1));_f .NoError (t ,_gcfgc .SetPixel (1,0,1));_f .NoError (t ,_gcfgc .SetPixel (2,0,1));
_f .NoError (t ,_gcfgc .SetPixel (3,0,1));_f .NoError (t ,_gcfgc .SetPixel (4,1,1));_f .NoError (t ,_gcfgc .SetPixel (0,1,1));_f .NoError (t ,_gcfgc .SetPixel (4,2,1));_f .NoError (t ,_gcfgc .SetPixel (0,2,1));_f .NoError (t ,_gcfgc .SetPixel (4,3,1));
_f .NoError (t ,_gcfgc .SetPixel (0,3,1));_f .NoError (t ,_gcfgc .SetPixel (0,4,1));_f .NoError (t ,_gcfgc .SetPixel (1,4,1));_f .NoError (t ,_gcfgc .SetPixel (2,4,1));_f .NoError (t ,_gcfgc .SetPixel (3,4,1));_f .NoError (t ,_gcfgc .SetPixel (0,5,1));
_f .NoError (t ,_gcfgc .SetPixel (0,6,1));_f .NoError (t ,_gcfgc .SetPixel (0,7,1));return _gcfgc ;};func _gebe (_dbgf ,_feba ,_fee *Bitmap )(*Bitmap ,error ){const _faee ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _feba ==nil {return nil ,_c .Error (_faee ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _fee ==nil {return nil ,_c .Error (_faee ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dbgf ==_fee {return nil ,_c .Error (_faee ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_feba .SizesEqual (_fee ){_b .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_faee );
};var _gfe error ;if _dbgf ,_gfe =_bceg (_dbgf ,_feba );_gfe !=nil {return nil ,_c .Wrap (_gfe ,_faee ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _gfe =_dbgf .RasterOperation (0,0,_dbgf .Width ,_dbgf .Height ,PixSrcXorDst ,_fee ,0,0);
_gfe !=nil {return nil ,_c .Wrap (_gfe ,_faee ,"");};return _dbgf ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _aga ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_cgc :=_geff (width ,height );_cgc .Data =data ;if _gca :=((width *height )+7)>>3;len (data )< _gca {return nil ,_c .Errorf (_aga ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_gca );
};if _acaf :=_cgc .addPadBits ();_acaf !=nil {return nil ,_c .Wrap (_acaf ,_aga ,"");};return _cgc ,nil ;};func _bdade (_eeeb ,_efaga *Bitmap ,_agee *Selection )(*Bitmap ,error ){const _ggc ="\u0065\u0072\u006fd\u0065";var (_dccb error ;_dbcf *Bitmap ;
);_eeeb ,_dccb =_gbge (_eeeb ,_efaga ,_agee ,&_dbcf );if _dccb !=nil {return nil ,_c .Wrap (_dccb ,_ggc ,"");};if _dccb =_eeeb .setAll ();_dccb !=nil {return nil ,_c .Wrap (_dccb ,_ggc ,"");};var _egbg SelectionValue ;for _eacb :=0;_eacb < _agee .Height ;
_eacb ++{for _cacc :=0;_cacc < _agee .Width ;_cacc ++{_egbg =_agee .Data [_eacb ][_cacc ];if _egbg ==SelHit {_dccb =_aagb (_eeeb ,_agee .Cx -_cacc ,_agee .Cy -_eacb ,_efaga .Width ,_efaga .Height ,PixSrcAndDst ,_dbcf ,0,0);if _dccb !=nil {return nil ,_c .Wrap (_dccb ,_ggc ,"");
};};};};if MorphBC ==SymmetricMorphBC {return _eeeb ,nil ;};_beed ,_ddgb ,_eacbc ,_cgcgb :=_agee .findMaxTranslations ();if _beed > 0{if _dccb =_eeeb .RasterOperation (0,0,_beed ,_efaga .Height ,PixClr ,nil ,0,0);_dccb !=nil {return nil ,_c .Wrap (_dccb ,_ggc ,"\u0078\u0070\u0020\u003e\u0020\u0030");
};};if _eacbc > 0{if _dccb =_eeeb .RasterOperation (_efaga .Width -_eacbc ,0,_eacbc ,_efaga .Height ,PixClr ,nil ,0,0);_dccb !=nil {return nil ,_c .Wrap (_dccb ,_ggc ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _ddgb > 0{if _dccb =_eeeb .RasterOperation (0,0,_efaga .Width ,_ddgb ,PixClr ,nil ,0,0);
_dccb !=nil {return nil ,_c .Wrap (_dccb ,_ggc ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _cgcgb > 0{if _dccb =_eeeb .RasterOperation (0,_efaga .Height -_cgcgb ,_efaga .Width ,_cgcgb ,PixClr ,nil ,0,0);_dccb !=nil {return nil ,_c .Wrap (_dccb ,_ggc ,"\u0079\u006e\u0020\u003e\u0020\u0030");
};};return _eeeb ,nil ;};func TstWSymbol (t *_fg .T ,scale ...int )*Bitmap {_egbc ,_fdfd :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_f .NoError (t ,_fdfd );return TstGetScaledSymbol (t ,_egbc ,scale ...);};func (_fdd *Bitmap )Equivalent (s *Bitmap )bool {return _fdd .equivalent (s )};
func TstDSymbol (t *_fg .T ,scale ...int )*Bitmap {_dfea ,_bdedc :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_f .NoError (t ,_bdedc );return TstGetScaledSymbol (t ,_dfea ,scale ...);};func (_dabcc *byHeight )Swap (i ,j int ){_dabcc .Values [i ],_dabcc .Values [j ]=_dabcc .Values [j ],_dabcc .Values [i ];
if _dabcc .Boxes !=nil {_dabcc .Boxes [i ],_dabcc .Boxes [j ]=_dabcc .Boxes [j ],_dabcc .Boxes [i ];};};func _fgbfg (_aedb *Bitmap ,_bdddg ...MorphProcess )(_fgfd *Bitmap ,_ddf error ){const _caec ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _aedb ==nil {return nil ,_c .Error (_caec ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_bdddg )==0{return nil ,_c .Error (_caec ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _ddf =_cabdd (_bdddg ...);
_ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");};var _dcbd ,_cdgbc ,_efgc int ;_fgfd =_aedb .Copy ();for _ ,_baafe :=range _bdddg {switch _baafe .Operation {case MopDilation :_dcbd ,_cdgbc =_baafe .getWidthHeight ();_fgfd ,_ddf =DilateBrick (nil ,_fgfd ,_dcbd ,_cdgbc );
if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");};case MopErosion :_dcbd ,_cdgbc =_baafe .getWidthHeight ();_fgfd ,_ddf =_fbg (nil ,_fgfd ,_dcbd ,_cdgbc );if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");};case MopOpening :_dcbd ,_cdgbc =_baafe .getWidthHeight ();
_fgfd ,_ddf =_cdcg (nil ,_fgfd ,_dcbd ,_cdgbc );if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");};case MopClosing :_dcbd ,_cdgbc =_baafe .getWidthHeight ();_fgfd ,_ddf =_egca (nil ,_fgfd ,_dcbd ,_cdgbc );if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");
};case MopRankBinaryReduction :_fgfd ,_ddf =_efb (_fgfd ,_baafe .Arguments ...);if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");};case MopReplicativeBinaryExpansion :_fgfd ,_ddf =_babg (_fgfd ,_baafe .Arguments [0]);if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");
};case MopAddBorder :_efgc =_baafe .Arguments [0];_fgfd ,_ddf =_fgfd .AddBorder (_efgc ,0);if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"");};default:return nil ,_c .Error (_caec ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _efgc > 0{_fgfd ,_ddf =_fgfd .RemoveBorder (_efgc );if _ddf !=nil {return nil ,_c .Wrap (_ddf ,_caec ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _fgfd ,nil ;};func (_badad *byHeight )Len ()int {return len (_badad .Values )};
func _begf (_eegg *_de .Stack )(_bgef *fillSegment ,_fbdc error ){const _gfcc ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _eegg ==nil {return nil ,_c .Error (_gfcc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _eegg .Aux ==nil {return nil ,_c .Error (_gfcc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_gebf ,_feccf :=_eegg .Pop ();if !_feccf {return nil ,nil ;};_daac ,_feccf :=_gebf .(*fillSegment );
if !_feccf {return nil ,_c .Error (_gfcc ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_bgef =&fillSegment {_daac ._cbag ,_daac ._bbebf ,_daac ._gcbbd +_daac ._ecdb ,_daac ._ecdb };
_eegg .Aux .Push (_daac );return _bgef ,nil ;};func _gaba (_aeff *Bitmap ,_dgbac ,_fcce int ,_fefc ,_aedcd int ,_afcb RasterOperator ){var (_efec bool ;_faaa bool ;_dbae int ;_fgcd int ;_cgfc int ;_eecb int ;_dcaa bool ;_dgeg byte ;);_bbeg :=8-(_dgbac &7);
_ccda :=_gfafb [_bbeg ];_bfeeb :=_aeff .RowStride *_fcce +(_dgbac >>3);if _fefc < _bbeg {_efec =true ;_ccda &=_dfec [8-_bbeg +_fefc ];};if !_efec {_dbae =(_fefc -_bbeg )>>3;if _dbae !=0{_faaa =true ;_fgcd =_bfeeb +1;};};_cgfc =(_dgbac +_fefc )&7;if !(_efec ||_cgfc ==0){_dcaa =true ;
_dgeg =_dfec [_cgfc ];_eecb =_bfeeb +1+_dbae ;};var _ggag ,_cead int ;switch _afcb {case PixClr :for _ggag =0;_ggag < _aedcd ;_ggag ++{_aeff .Data [_bfeeb ]=_geeb (_aeff .Data [_bfeeb ],0x0,_ccda );_bfeeb +=_aeff .RowStride ;};if _faaa {for _ggag =0;_ggag < _aedcd ;
_ggag ++{for _cead =0;_cead < _dbae ;_cead ++{_aeff .Data [_fgcd +_cead ]=0x0;};_fgcd +=_aeff .RowStride ;};};if _dcaa {for _ggag =0;_ggag < _aedcd ;_ggag ++{_aeff .Data [_eecb ]=_geeb (_aeff .Data [_eecb ],0x0,_dgeg );_eecb +=_aeff .RowStride ;};};case PixSet :for _ggag =0;
_ggag < _aedcd ;_ggag ++{_aeff .Data [_bfeeb ]=_geeb (_aeff .Data [_bfeeb ],0xff,_ccda );_bfeeb +=_aeff .RowStride ;};if _faaa {for _ggag =0;_ggag < _aedcd ;_ggag ++{for _cead =0;_cead < _dbae ;_cead ++{_aeff .Data [_fgcd +_cead ]=0xff;};_fgcd +=_aeff .RowStride ;
};};if _dcaa {for _ggag =0;_ggag < _aedcd ;_ggag ++{_aeff .Data [_eecb ]=_geeb (_aeff .Data [_eecb ],0xff,_dgeg );_eecb +=_aeff .RowStride ;};};case PixNotDst :for _ggag =0;_ggag < _aedcd ;_ggag ++{_aeff .Data [_bfeeb ]=_geeb (_aeff .Data [_bfeeb ],^_aeff .Data [_bfeeb ],_ccda );
_bfeeb +=_aeff .RowStride ;};if _faaa {for _ggag =0;_ggag < _aedcd ;_ggag ++{for _cead =0;_cead < _dbae ;_cead ++{_aeff .Data [_fgcd +_cead ]=^(_aeff .Data [_fgcd +_cead ]);};_fgcd +=_aeff .RowStride ;};};if _dcaa {for _ggag =0;_ggag < _aedcd ;_ggag ++{_aeff .Data [_eecb ]=_geeb (_aeff .Data [_eecb ],^_aeff .Data [_eecb ],_dgeg );
_eecb +=_aeff .RowStride ;};};};};func _aagb (_gafe *Bitmap ,_agcba ,_bacfc ,_dbe ,_eedf int ,_dgae RasterOperator ,_baeb *Bitmap ,_aded ,_ddff int )error {const _gaee ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _gafe ==nil {return _c .Error (_gaee ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _dgae ==PixDst {return nil ;};switch _dgae {case PixClr ,PixSet ,PixNotDst :_ggbe (_gafe ,_agcba ,_bacfc ,_dbe ,_eedf ,_dgae );
return nil ;};if _baeb ==nil {_b .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .Error (_gaee ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bgaad :=_abee (_gafe ,_agcba ,_bacfc ,_dbe ,_eedf ,_dgae ,_baeb ,_aded ,_ddff );_bgaad !=nil {return _c .Wrap (_bgaad ,_gaee ,"");};
return nil ;};func TstISymbol (t *_fg .T ,scale ...int )*Bitmap {_aaefb ,_ecegg :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_f .NoError (t ,_ecegg );return TstGetScaledSymbol (t ,_aaefb ,scale ...);};func (_adfb CombinationOperator )String ()string {var _ebce string ;
switch _adfb {case CmbOpOr :_ebce ="\u004f\u0052";case CmbOpAnd :_ebce ="\u0041\u004e\u0044";case CmbOpXor :_ebce ="\u0058\u004f\u0052";case CmbOpXNor :_ebce ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_ebce ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_ebce ="\u004e\u004f\u0054";};return _ebce ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _gef (_aa *Bitmap ,_ed *Bitmap ,_adg int )(_dbdf error ){const _agg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _adg {case 2:_dbdf =_df (_aa ,_ed );case 4:_dbdf =_cf (_aa ,_ed );case 8:_dbdf =_ffc (_aa ,_ed );default:return _c .Error (_agg ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _dbdf !=nil {_dbdf =_c .Wrap (_dbdf ,_agg ,"");};return _dbdf ;};func _fbb ()[]int {_bebg :=make ([]int ,256);for _adbb :=0;_adbb <=0xff;_adbb ++{_efagd :=byte (_adbb );_bebg [_efagd ]=int (_efagd &0x1)+(int (_efagd >>1)&0x1)+(int (_efagd >>2)&0x1)+(int (_efagd >>3)&0x1)+(int (_efagd >>4)&0x1)+(int (_efagd >>5)&0x1)+(int (_efagd >>6)&0x1)+(int (_efagd >>7)&0x1);
};return _bebg ;};func TstASymbol (t *_fg .T )*Bitmap {t .Helper ();_ceaf :=New (6,6);_f .NoError (t ,_ceaf .SetPixel (1,0,1));_f .NoError (t ,_ceaf .SetPixel (2,0,1));_f .NoError (t ,_ceaf .SetPixel (3,0,1));_f .NoError (t ,_ceaf .SetPixel (4,0,1));_f .NoError (t ,_ceaf .SetPixel (5,1,1));
_f .NoError (t ,_ceaf .SetPixel (1,2,1));_f .NoError (t ,_ceaf .SetPixel (2,2,1));_f .NoError (t ,_ceaf .SetPixel (3,2,1));_f .NoError (t ,_ceaf .SetPixel (4,2,1));_f .NoError (t ,_ceaf .SetPixel (5,2,1));_f .NoError (t ,_ceaf .SetPixel (0,3,1));_f .NoError (t ,_ceaf .SetPixel (5,3,1));
_f .NoError (t ,_ceaf .SetPixel (0,4,1));_f .NoError (t ,_ceaf .SetPixel (5,4,1));_f .NoError (t ,_ceaf .SetPixel (1,5,1));_f .NoError (t ,_ceaf .SetPixel (2,5,1));_f .NoError (t ,_ceaf .SetPixel (3,5,1));_f .NoError (t ,_ceaf .SetPixel (4,5,1));_f .NoError (t ,_ceaf .SetPixel (5,5,1));
return _ceaf ;};func Extract (roi _cb .Rectangle ,src *Bitmap )(*Bitmap ,error ){_gge :=New (roi .Dx (),roi .Dy ());_cbed :=roi .Min .X &0x07;_acbd :=8-_cbed ;_dagf :=uint (8-_gge .Width &0x07);_bagag :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_ebga :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );
_fccb :=_gge .RowStride ==_ebga +1-_bagag ;var _bdee int ;for _ecbe :=roi .Min .Y ;_ecbe < roi .Max .Y ;_ecbe ++{_fbef :=_bagag ;_gad :=_bdee ;switch {case _bagag ==_ebga :_acge ,_bbgc :=src .GetByte (_fbef );if _bbgc !=nil {return nil ,_bbgc ;};_acge <<=uint (_cbed );
_bbgc =_gge .SetByte (_gad ,_abcg (_dagf ,_acge ));if _bbgc !=nil {return nil ,_bbgc ;};case _cbed ==0:for _bfd :=_bagag ;_bfd <=_ebga ;_bfd ++{_edgf ,_beaec :=src .GetByte (_fbef );if _beaec !=nil {return nil ,_beaec ;};_fbef ++;if _bfd ==_ebga &&_fccb {_edgf =_abcg (_dagf ,_edgf );
};_beaec =_gge .SetByte (_gad ,_edgf );if _beaec !=nil {return nil ,_beaec ;};_gad ++;};default:_affc :=_cdggg (src ,_gge ,uint (_cbed ),uint (_acbd ),_dagf ,_bagag ,_ebga ,_fccb ,_fbef ,_gad );if _affc !=nil {return nil ,_affc ;};};_bagag +=src .RowStride ;
_ebga +=src .RowStride ;_bdee +=_gge .RowStride ;};return _gge ,nil ;};func (_bced *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ffee *Bitmaps ,_gbec error ){const _aedbg ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _bced ==nil {return nil ,_c .Error (_aedbg ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_aedbg ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_aedbg ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_fcccb ,_gbec :=_bced .makeSizeIndicator (width ,height ,tp ,relation );if _gbec !=nil {return nil ,_c .Wrap (_gbec ,_aedbg ,"");};_ffee ,_gbec =_bced .selectByIndicator (_fcccb );if _gbec !=nil {return nil ,_c .Wrap (_gbec ,_aedbg ,"");};return _ffee ,nil ;
};func (_adge *Boxes )selectWithIndicator (_decc *_de .NumSlice )(_bbbe *Boxes ,_eega error ){const _eeba ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _adge ==nil {return nil ,_c .Error (_eeba ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _decc ==nil {return nil ,_c .Error (_eeba ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_decc )!=len (*_adge ){return nil ,_c .Error (_eeba ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _agec ,_aagdff int ;for _cecd :=0;_cecd < len (*_decc );_cecd ++{if _agec ,_eega =_decc .GetInt (_cecd );_eega !=nil {return nil ,_c .Wrap (_eega ,_eeba ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _agec ==1{_aagdff ++;
};};if _aagdff ==len (*_adge ){return _adge ,nil ;};_egda :=Boxes {};for _eabca :=0;_eabca < len (*_decc );_eabca ++{_agec =int ((*_decc )[_eabca ]);if _agec ==0{continue ;};_egda =append (_egda ,(*_adge )[_eabca ]);};_bbbe =&_egda ;return _bbbe ,nil ;
};var (_gdcg *Bitmap ;_ebgf *Bitmap ;);func (_cea MorphProcess )verify (_fafa int ,_ffb ,_bgfe *int )error {const _daec ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _cea .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_cea .Arguments )!=2{return _c .Error (_daec ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_dbf ,_dafe :=_cea .getWidthHeight ();if _dbf <=0||_dafe <=0{return _c .Error (_daec ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_ggfe :=len (_cea .Arguments );*_ffb +=_ggfe ;if _ggfe < 1||_ggfe > 4{return _c .Error (_daec ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _bgcf :=0;_bgcf < _ggfe ;_bgcf ++{if _cea .Arguments [_bgcf ]< 1||_cea .Arguments [_bgcf ]> 4{return _c .Error (_daec ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_cea .Arguments )==0{return _c .Error (_daec ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bdcf :=_cea .Arguments [0];if _bdcf !=2&&_bdcf !=4&&_bdcf !=8{return _c .Error (_daec ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ffb -=_feee [_bdcf /4];case MopAddBorder :if len (_cea .Arguments )==0{return _c .Error (_daec ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdee :=_cea .Arguments [0];if _fafa > 0{return _c .Error (_daec ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _fdee < 1{return _c .Error (_daec ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_bgfe =_fdee ;};return nil ;};func _dde (_ffcf *Bitmap ,_dbd int )(*Bitmap ,error ){const _dc ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _ffcf ==nil {return nil ,_c .Error (_dc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dbd ==1{return _bceg (nil ,_ffcf );};if _dbd !=2&&_dbd !=4&&_dbd !=8{return nil ,_c .Error (_dc ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_bge :=_dbd *_ffcf .Width ;_efe :=_dbd *_ffcf .Height ;_fa :=New (_bge ,_efe );var _cec error ;switch _dbd {case 2:_cec =_df (_fa ,_ffcf );case 4:_cec =_cf (_fa ,_ffcf );case 8:_cec =_ffc (_fa ,_ffcf );};if _cec !=nil {return nil ,_c .Wrap (_cec ,_dc ,"");
};return _fa ,nil ;};func _dgd (_dfcf ,_aggd *Bitmap ,_becg int ,_ebc []byte ,_bfg int )(_faa error ){const _dca ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_cdd ,_efa ,_aba ,_aca ,_ddea ,_ebf ,_fac ,_bfe int ;
_cacg ,_ceg uint32 ;_aaa ,_ade byte ;_eae uint16 ;);_caf :=make ([]byte ,4);_egg :=make ([]byte ,4);for _aba =0;_aba < _dfcf .Height -1;_aba ,_aca =_aba +2,_aca +1{_cdd =_aba *_dfcf .RowStride ;_efa =_aca *_aggd .RowStride ;for _ddea ,_ebf =0,0;_ddea < _bfg ;
_ddea ,_ebf =_ddea +4,_ebf +1{for _fac =0;_fac < 4;_fac ++{_bfe =_cdd +_ddea +_fac ;if _bfe <=len (_dfcf .Data )-1&&_bfe < _cdd +_dfcf .RowStride {_caf [_fac ]=_dfcf .Data [_bfe ];}else {_caf [_fac ]=0x00;};_bfe =_cdd +_dfcf .RowStride +_ddea +_fac ;if _bfe <=len (_dfcf .Data )-1&&_bfe < _cdd +(2*_dfcf .RowStride ){_egg [_fac ]=_dfcf .Data [_bfe ];
}else {_egg [_fac ]=0x00;};};_cacg =_fge .BigEndian .Uint32 (_caf );_ceg =_fge .BigEndian .Uint32 (_egg );_ceg &=_cacg ;_ceg &=_ceg <<1;_ceg &=0xaaaaaaaa;_cacg =_ceg |(_ceg <<7);_aaa =byte (_cacg >>24);_ade =byte ((_cacg >>8)&0xff);_bfe =_efa +_ebf ;if _bfe +1==len (_aggd .Data )-1||_bfe +1>=_efa +_aggd .RowStride {_aggd .Data [_bfe ]=_ebc [_aaa ];
if _faa =_aggd .SetByte (_bfe ,_ebc [_aaa ]);_faa !=nil {return _c .Wrapf (_faa ,_dca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bfe );};}else {_eae =(uint16 (_ebc [_aaa ])<<8)|uint16 (_ebc [_ade ]);if _faa =_aggd .setTwoBytes (_bfe ,_eae );_faa !=nil {return _c .Wrapf (_faa ,_dca ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bfe );
};_ebf ++;};};};return nil ;};var MorphBC BoundaryCondition ;func (_cffc *ClassedPoints )YAtIndex (i int )float32 {return (*_cffc .Points )[_cffc .IntSlice [i ]].Y };func _fcge (_abcda ,_ecg int )int {if _abcda < _ecg {return _abcda ;};return _ecg ;};func (_ffe *Bitmap )GetPixel (x ,y int )bool {_fca :=_ffe .GetByteIndex (x ,y );
_eac :=_ffe .GetBitOffset (x );_dfb :=uint (7-_eac );if _fca > len (_ffe .Data )-1{_b .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_ffe );
return false ;};if (_ffe .Data [_fca ]>>_dfb )&0x01>=1{return true ;};return false ;};func (_gced *ClassedPoints )Swap (i ,j int ){_gced .IntSlice [i ],_gced .IntSlice [j ]=_gced .IntSlice [j ],_gced .IntSlice [i ];};func _efbfd ()[]int {_ffgb :=make ([]int ,256);
_ffgb [0]=0;_ffgb [1]=7;var _cgbc int ;for _cgbc =2;_cgbc < 4;_cgbc ++{_ffgb [_cgbc ]=_ffgb [_cgbc -2]+6;};for _cgbc =4;_cgbc < 8;_cgbc ++{_ffgb [_cgbc ]=_ffgb [_cgbc -4]+5;};for _cgbc =8;_cgbc < 16;_cgbc ++{_ffgb [_cgbc ]=_ffgb [_cgbc -8]+4;};for _cgbc =16;
_cgbc < 32;_cgbc ++{_ffgb [_cgbc ]=_ffgb [_cgbc -16]+3;};for _cgbc =32;_cgbc < 64;_cgbc ++{_ffgb [_cgbc ]=_ffgb [_cgbc -32]+2;};for _cgbc =64;_cgbc < 128;_cgbc ++{_ffgb [_cgbc ]=_ffgb [_cgbc -64]+1;};for _cgbc =128;_cgbc < 256;_cgbc ++{_ffgb [_cgbc ]=_ffgb [_cgbc -128];
};return _ffgb ;};func (_dcef *Bitmap )setFourBytes (_gcfg int ,_gag uint32 )error {if _gcfg +3> len (_dcef .Data )-1{return _c .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gcfg );
};_dcef .Data [_gcfg ]=byte ((_gag &0xff000000)>>24);_dcef .Data [_gcfg +1]=byte ((_gag &0xff0000)>>16);_dcef .Data [_gcfg +2]=byte ((_gag &0xff00)>>8);_dcef .Data [_gcfg +3]=byte (_gag &0xff);return nil ;};func (_afbg *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _ecca ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _afbg ==nil {return nil ,_c .Error (_ecca ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_afbg .Values )-1{return nil ,_c .Errorf (_ecca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _afbg .Values [i ],nil ;};type Points []Point ;func (_fcccgf *Bitmaps )AddBox (box *_cb .Rectangle ){_fcccgf .Boxes =append (_fcccgf .Boxes ,box )};func (_ceee *ClassedPoints )XAtIndex (i int )float32 {return (*_ceee .Points )[_ceee .IntSlice [i ]].X };
func (_adfbe *ClassedPoints )xSortFunction ()func (_abfa int ,_cecda int )bool {return func (_bff ,_gbd int )bool {return _adfbe .XAtIndex (_bff )< _adfbe .XAtIndex (_gbd )};};func (_eadfb *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_bcce *Bitmaps ,_dcc *Boxes ,_cbee error ){const _bagadd ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _eadfb ==nil {return nil ,nil ,_c .Error (_bagadd ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_c .Error (_bagadd ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _eadfb .Zero (){_dcc =&Boxes {};_bcce =&Bitmaps {};return _bcce ,_dcc ,nil ;};switch components {case ComponentConn :_bcce =&Bitmaps {};if _dcc ,_cbee =_eadfb .ConnComponents (_bcce ,8);_cbee !=nil {return nil ,nil ,_c .Wrap (_cbee ,_bagadd ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_fag ,_aedc :=MorphSequence (_eadfb ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _aedc !=nil {return nil ,nil ,_c .Wrap (_aedc ,_bagadd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _b .Log .IsLogLevel (_b .LogLevelTrace ){_b .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_fag .String ());
};_dffd :=&Bitmaps {};_dcc ,_aedc =_fag .ConnComponents (_dffd ,8);if _aedc !=nil {return nil ,nil ,_c .Wrap (_aedc ,_bagadd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _b .Log .IsLogLevel (_b .LogLevelTrace ){_b .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_dffd .String ());
};if _bcce ,_aedc =_dffd .ClipToBitmap (_eadfb );_aedc !=nil {return nil ,nil ,_c .Wrap (_aedc ,_bagadd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_beg :=1;
var _gce *Bitmap ;switch {case _eadfb .XResolution <=200:_gce =_eadfb ;case _eadfb .XResolution <=400:_beg =2;_gce ,_cbee =_efb (_eadfb ,1,0,0,0);if _cbee !=nil {return nil ,nil ,_c .Wrap (_cbee ,_bagadd ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_beg =4;_gce ,_cbee =_efb (_eadfb ,1,1,0,0);if _cbee !=nil {return nil ,nil ,_c .Wrap (_cbee ,_bagadd ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_afabf ,_ ,_cbgd :=_gceb (_gce );if _cbgd !=nil {return nil ,nil ,_c .Wrap (_cbgd ,_bagadd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_bdec ,_cbgd :=_babg (_afabf ,_beg );if _cbgd !=nil {return nil ,nil ,_c .Wrap (_cbgd ,_bagadd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_deff :=&Bitmaps {};if _dcc ,_cbgd =_bdec .ConnComponents (_deff ,4);_cbgd !=nil {return nil ,nil ,_c .Wrap (_cbgd ,_bagadd ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _bcce ,_cbgd =_deff .ClipToBitmap (_eadfb );_cbgd !=nil {return nil ,nil ,_c .Wrap (_cbgd ,_bagadd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_bcce ,_cbee =_bcce .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _cbee !=nil {return nil ,nil ,_c .Wrap (_cbee ,_bagadd ,"");};_dcc ,_cbee =_dcc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cbee !=nil {return nil ,nil ,_c .Wrap (_cbee ,_bagadd ,"");};return _bcce ,_dcc ,nil ;};func _bacfe (_fccc *Bitmap ,_beee ,_efga int ,_aeaa ,_dcdb int ,_agcffa RasterOperator ){var (_abec int ;
_ceef byte ;_gacb ,_ggge int ;_feaab int ;);_gbfd :=_aeaa >>3;_acgf :=_aeaa &7;if _acgf > 0{_ceef =_dfec [_acgf ];};_abec =_fccc .RowStride *_efga +(_beee >>3);switch _agcffa {case PixClr :for _gacb =0;_gacb < _dcdb ;_gacb ++{_feaab =_abec +_gacb *_fccc .RowStride ;
for _ggge =0;_ggge < _gbfd ;_ggge ++{_fccc .Data [_feaab ]=0x0;_feaab ++;};if _acgf > 0{_fccc .Data [_feaab ]=_geeb (_fccc .Data [_feaab ],0x0,_ceef );};};case PixSet :for _gacb =0;_gacb < _dcdb ;_gacb ++{_feaab =_abec +_gacb *_fccc .RowStride ;for _ggge =0;
_ggge < _gbfd ;_ggge ++{_fccc .Data [_feaab ]=0xff;_feaab ++;};if _acgf > 0{_fccc .Data [_feaab ]=_geeb (_fccc .Data [_feaab ],0xff,_ceef );};};case PixNotDst :for _gacb =0;_gacb < _dcdb ;_gacb ++{_feaab =_abec +_gacb *_fccc .RowStride ;for _ggge =0;_ggge < _gbfd ;
_ggge ++{_fccc .Data [_feaab ]=^_fccc .Data [_feaab ];_feaab ++;};if _acgf > 0{_fccc .Data [_feaab ]=_geeb (_fccc .Data [_feaab ],^_fccc .Data [_feaab ],_ceef );};};};};func _gecb (_aeb ,_daeb *Bitmap ,_cgcd ,_dfca ,_egcd ,_faabb ,_fdf ,_fba ,_bbef ,_afac int ,_cdda CombinationOperator ,_ecgd int )error {var _bddd int ;
_gfda :=func (){_bddd ++;_egcd +=_daeb .RowStride ;_faabb +=_aeb .RowStride ;_fdf +=_aeb .RowStride };for _bddd =_cgcd ;_bddd < _dfca ;_gfda (){var _fgga uint16 ;_agcd :=_egcd ;for _bgag :=_faabb ;_bgag <=_fdf ;_bgag ++{_aef ,_aace :=_daeb .GetByte (_agcd );
if _aace !=nil {return _aace ;};_gebdg ,_aace :=_aeb .GetByte (_bgag );if _aace !=nil {return _aace ;};_fgga =(_fgga |(uint16 (_gebdg )&0xff))<<uint (_afac );_gebdg =byte (_fgga >>8);if _aace =_daeb .SetByte (_agcd ,_fdaaa (_aef ,_gebdg ,_cdda ));_aace !=nil {return _aace ;
};_agcd ++;_fgga <<=uint (_bbef );if _bgag ==_fdf {_gebdg =byte (_fgga >>(8-uint8 (_afac )));if _ecgd !=0{_gebdg =_abcg (uint (8+_fba ),_gebdg );};_aef ,_aace =_daeb .GetByte (_agcd );if _aace !=nil {return _aace ;};if _aace =_daeb .SetByte (_agcd ,_fdaaa (_aef ,_gebdg ,_cdda ));
_aace !=nil {return _aace ;};};};};return nil ;};func (_bab *Bitmap )SetByte (index int ,v byte )error {if index > len (_bab .Data )-1||index < 0{return _c .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_bab .Data [index ]=v ;return nil ;};var (_acgg =_dcb ();_afag =_dee ();_efgg =_cg (););func _efb (_eaab *Bitmap ,_cae ...int )(_ab *Bitmap ,_ffad error ){const _geb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _eaab ==nil {return nil ,_c .Error (_geb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_cae )==0||len (_cae )> 4{return nil ,_c .Error (_geb ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _cae [0]<=0{_b .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_ab ,_ffad =_bceg (nil ,_eaab );if _ffad !=nil {return nil ,_c .Wrap (_ffad ,_geb ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _ab ,nil ;};_fgf :=_eadg ();_ab =_eaab ;for _af ,_gcg :=range _cae {if _gcg <=0{break ;};_ab ,_ffad =_gbe (_ab ,_gcg ,_fgf );if _ffad !=nil {return nil ,_c .Wrapf (_ffad ,_geb ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_af );
};};return _ab ,nil ;};func TstOSymbol (t *_fg .T ,scale ...int )*Bitmap {_fbff ,_gggea :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_f .NoError (t ,_gggea );return TstGetScaledSymbol (t ,_fbff ,scale ...);};type SizeComparison int ;func TstFrameBitmap ()*Bitmap {return _gdcg .Copy ()};
const _baef =5000;func init (){const _ageb ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_gdcg =New (50,40);var _bdfe error ;_gdcg ,_bdfe =_gdcg .AddBorder (2,1);if _bdfe !=nil {panic (_c .Wrap (_bdfe ,_ageb ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};_ebgf ,_bdfe =NewWithData (50,22,_dfcfa );if _bdfe !=nil {panic (_c .Wrap (_bdfe ,_ageb ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};var _ga [256]uint8 ;func (_ggac *Bitmap )nextOnPixelLow (_dgec ,_bade ,_fcbd ,_dbcg ,_cefc int )(_gae _cb .Point ,_dfdd bool ,_caa error ){const _ccgc ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_bdad int ;_gab byte ;);_ccc :=_cefc *_fcbd ;_gea :=_ccc +(_dbcg /8);if _gab ,_caa =_ggac .GetByte (_gea );_caa !=nil {return _gae ,false ,_c .Wrap (_caa ,_ccgc ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _gab !=0{_ebb :=_dbcg -(_dbcg %8)+7;for _bdad =_dbcg ;_bdad <=_ebb &&_bdad < _dgec ;_bdad ++{if _ggac .GetPixel (_bdad ,_cefc ){_gae .X =_bdad ;_gae .Y =_cefc ;return _gae ,true ,nil ;};};};_cbdd :=(_dbcg /8)+1;_bdad =8*_cbdd ;var _efed int ;for _gea =_ccc +_cbdd ;
_bdad < _dgec ;_gea ,_bdad =_gea +1,_bdad +8{if _gab ,_caa =_ggac .GetByte (_gea );_caa !=nil {return _gae ,false ,_c .Wrap (_caa ,_ccgc ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _gab ==0{continue ;
};for _efed =0;_efed < 8&&_bdad < _dgec ;_efed ,_bdad =_efed +1,_bdad +1{if _ggac .GetPixel (_bdad ,_cefc ){_gae .X =_bdad ;_gae .Y =_cefc ;return _gae ,true ,nil ;};};};for _fcff :=_cefc +1;_fcff < _bade ;_fcff ++{_ccc =_fcff *_fcbd ;for _gea ,_bdad =_ccc ,0;
_bdad < _dgec ;_gea ,_bdad =_gea +1,_bdad +8{if _gab ,_caa =_ggac .GetByte (_gea );_caa !=nil {return _gae ,false ,_c .Wrap (_caa ,_ccgc ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _gab ==0{continue ;};for _efed =0;
_efed < 8&&_bdad < _dgec ;_efed ,_bdad =_efed +1,_bdad +1{if _ggac .GetPixel (_bdad ,_fcff ){_gae .X =_bdad ;_gae .Y =_fcff ;return _gae ,true ,nil ;};};};};return _gae ,false ,nil ;};func (_bdbc *BitmapsArray )GetBox (i int )(*_cb .Rectangle ,error ){const _babf ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _bdbc ==nil {return nil ,_c .Error (_babf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_bdbc .Boxes )-1{return nil ,_c .Errorf (_babf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bdbc .Boxes [i ],nil ;};func (_edfg *ClassedPoints )SortByX (){_edfg ._dccc =_edfg .xSortFunction ();_ff .Sort (_edfg )};func _geeb (_cgdb ,_fcgb ,_dbaa byte )byte {return (_cgdb &^(_dbaa ))|(_fcgb &_dbaa )};func TstImageBitmapData ()[]byte {return _ebgf .Data };
func _decg (_bbaa ,_efbf *Bitmap ,_eeaa ,_cgaa ,_cgdd ,_fbeg ,_cgggc ,_fabb ,_bgfa ,_bbbg int ,_ccd CombinationOperator )error {var _gaf int ;_fcage :=func (){_gaf ++;_cgdd +=_efbf .RowStride ;_fbeg +=_bbaa .RowStride ;_cgggc +=_bbaa .RowStride };for _gaf =_eeaa ;
_gaf < _cgaa ;_fcage (){var _affg uint16 ;_defbe :=_cgdd ;for _aaga :=_fbeg ;_aaga <=_cgggc ;_aaga ++{_beae ,_bgagd :=_efbf .GetByte (_defbe );if _bgagd !=nil {return _bgagd ;};_becgc ,_bgagd :=_bbaa .GetByte (_aaga );if _bgagd !=nil {return _bgagd ;};
_affg =(_affg |uint16 (_becgc ))<<uint (_bbbg );_becgc =byte (_affg >>8);if _aaga ==_cgggc {_becgc =_abcg (uint (_fabb ),_becgc );};if _bgagd =_efbf .SetByte (_defbe ,_fdaaa (_beae ,_becgc ,_ccd ));_bgagd !=nil {return _bgagd ;};_defbe ++;_affg <<=uint (_bgfa );
};};return nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fdfg float64 ,_cede error ){const _befb ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_c .Error (_befb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_c .Error (_befb ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_c .Error (_befb ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_eggd ,_gdgd :=bm1 .Width ,bm1 .Height ;_eceg ,_bdgfa :=bm2 .Width ,bm2 .Height ;
_cbgbf :=_fgce (_eggd -_eceg );if _cbgbf > maxDiffW {return 0,nil ;};_acag :=_fgce (_gdgd -_bdgfa );if _acag > maxDiffH {return 0,nil ;};var _gfaf ,_ecbd int ;if delX >=0{_gfaf =int (delX +0.5);}else {_gfaf =int (delX -0.5);};if delY >=0{_ecbd =int (delY +0.5);
}else {_ecbd =int (delY -0.5);};_dabg :=_eccb (_ecbd ,0);_fcfd :=_fcge (_bdgfa +_ecbd ,_gdgd );_cffd :=bm1 .RowStride *_dabg ;_fed :=bm2 .RowStride *(_dabg -_ecbd );_becd :=_eccb (_gfaf ,0);_adda :=_fcge (_eceg +_gfaf ,_eggd );_adea :=bm2 .RowStride ;var _febf ,_fdea int ;
if _gfaf >=8{_febf =_gfaf >>3;_cffd +=_febf ;_becd -=_febf <<3;_adda -=_febf <<3;_gfaf &=7;}else if _gfaf <=-8{_fdea =-((_gfaf +7)>>3);_fed +=_fdea ;_adea -=_fdea ;_gfaf +=_fdea <<3;};if _becd >=_adda ||_dabg >=_fcfd {return 0,nil ;};_gdgf :=(_adda +7)>>3;
var (_egcg ,_efdb ,_ageca byte ;_cda ,_cbgdg ,_bbbf int ;);switch {case _gfaf ==0:for _bbbf =_dabg ;_bbbf < _fcfd ;_bbbf ,_cffd ,_fed =_bbbf +1,_cffd +bm1 .RowStride ,_fed +bm2 .RowStride {for _cbgdg =0;_cbgdg < _gdgf ;_cbgdg ++{_ageca =bm1 .Data [_cffd +_cbgdg ]&bm2 .Data [_fed +_cbgdg ];
_cda +=tab [_ageca ];};};case _gfaf > 0:if _adea < _gdgf {for _bbbf =_dabg ;_bbbf < _fcfd ;_bbbf ,_cffd ,_fed =_bbbf +1,_cffd +bm1 .RowStride ,_fed +bm2 .RowStride {_egcg ,_efdb =bm1 .Data [_cffd ],bm2 .Data [_fed ]>>uint (_gfaf );_ageca =_egcg &_efdb ;
_cda +=tab [_ageca ];for _cbgdg =1;_cbgdg < _adea ;_cbgdg ++{_egcg ,_efdb =bm1 .Data [_cffd +_cbgdg ],(bm2 .Data [_fed +_cbgdg ]>>uint (_gfaf ))|(bm2 .Data [_fed +_cbgdg -1]<<uint (8-_gfaf ));_ageca =_egcg &_efdb ;_cda +=tab [_ageca ];};_egcg =bm1 .Data [_cffd +_cbgdg ];
_efdb =bm2 .Data [_fed +_cbgdg -1]<<uint (8-_gfaf );_ageca =_egcg &_efdb ;_cda +=tab [_ageca ];};}else {for _bbbf =_dabg ;_bbbf < _fcfd ;_bbbf ,_cffd ,_fed =_bbbf +1,_cffd +bm1 .RowStride ,_fed +bm2 .RowStride {_egcg ,_efdb =bm1 .Data [_cffd ],bm2 .Data [_fed ]>>uint (_gfaf );
_ageca =_egcg &_efdb ;_cda +=tab [_ageca ];for _cbgdg =1;_cbgdg < _gdgf ;_cbgdg ++{_egcg =bm1 .Data [_cffd +_cbgdg ];_efdb =(bm2 .Data [_fed +_cbgdg ]>>uint (_gfaf ))|(bm2 .Data [_fed +_cbgdg -1]<<uint (8-_gfaf ));_ageca =_egcg &_efdb ;_cda +=tab [_ageca ];
};};};default:if _gdgf < _adea {for _bbbf =_dabg ;_bbbf < _fcfd ;_bbbf ,_cffd ,_fed =_bbbf +1,_cffd +bm1 .RowStride ,_fed +bm2 .RowStride {for _cbgdg =0;_cbgdg < _gdgf ;_cbgdg ++{_egcg =bm1 .Data [_cffd +_cbgdg ];_efdb =bm2 .Data [_fed +_cbgdg ]<<uint (-_gfaf );
_efdb |=bm2 .Data [_fed +_cbgdg +1]>>uint (8+_gfaf );_ageca =_egcg &_efdb ;_cda +=tab [_ageca ];};};}else {for _bbbf =_dabg ;_bbbf < _fcfd ;_bbbf ,_cffd ,_fed =_bbbf +1,_cffd +bm1 .RowStride ,_fed +bm2 .RowStride {for _cbgdg =0;_cbgdg < _gdgf -1;_cbgdg ++{_egcg =bm1 .Data [_cffd +_cbgdg ];
_efdb =bm2 .Data [_fed +_cbgdg ]<<uint (-_gfaf );_efdb |=bm2 .Data [_fed +_cbgdg +1]>>uint (8+_gfaf );_ageca =_egcg &_efdb ;_cda +=tab [_ageca ];};_egcg =bm1 .Data [_cffd +_cbgdg ];_efdb =bm2 .Data [_fed +_cbgdg ]<<uint (-_gfaf );_ageca =_egcg &_efdb ;
_cda +=tab [_ageca ];};};};_fdfg =float64 (_cda )*float64 (_cda )/(float64 (area1 )*float64 (area2 ));return _fdfg ,nil ;};func (_aeda *Bitmaps )AddBitmap (bm *Bitmap ){_aeda .Values =append (_aeda .Values ,bm )};func _bcggf (_geffb *Bitmap ,_eaad *_de .Stack ,_cbfbd ,_gaccg int )(_fdbf *_cb .Rectangle ,_ccde error ){const _bfdf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _geffb ==nil {return nil ,_c .Error (_bfdf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _eaad ==nil {return nil ,_c .Error (_bfdf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_dbeg ,_degf :=_geffb .Width ,_geffb .Height ;_fcccg :=_dbeg -1;_ggcca :=_degf -1;if _cbfbd < 0||_cbfbd > _fcccg ||_gaccg < 0||_gaccg > _ggcca ||!_geffb .GetPixel (_cbfbd ,_gaccg ){return nil ,nil ;};_ebcef :=_cb .Rect (100000,100000,0,0);if _ccde =_aeeb (_eaad ,_cbfbd ,_cbfbd ,_gaccg ,1,_ggcca ,&_ebcef );
_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ccde =_aeeb (_eaad ,_cbfbd ,_cbfbd ,_gaccg +1,-1,_ggcca ,&_ebcef );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_ebcef .Min .X ,_ebcef .Max .X =_cbfbd ,_cbfbd ;_ebcef .Min .Y ,_ebcef .Max .Y =_gaccg ,_gaccg ;var (_ged *fillSegment ;_fcffa int ;);for _eaad .Len ()> 0{if _ged ,_ccde =_begf (_eaad );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"");};_gaccg =_ged ._gcbbd ;
for _cbfbd =_ged ._cbag -1;_cbfbd >=0&&_geffb .GetPixel (_cbfbd ,_gaccg );_cbfbd --{if _ccde =_geffb .SetPixel (_cbfbd ,_gaccg ,0);_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cbfbd >=_ged ._cbag -1{for {for _cbfbd ++;
_cbfbd <=_ged ._bbebf +1&&_cbfbd <=_fcccg &&!_geffb .GetPixel (_cbfbd ,_gaccg );_cbfbd ++{};_fcffa =_cbfbd ;if !(_cbfbd <=_ged ._bbebf +1&&_cbfbd <=_fcccg ){break ;};for ;_cbfbd <=_fcccg &&_geffb .GetPixel (_cbfbd ,_gaccg );_cbfbd ++{if _ccde =_geffb .SetPixel (_cbfbd ,_gaccg ,0);
_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ccde =_aeeb (_eaad ,_fcffa ,_cbfbd -1,_ged ._gcbbd ,_ged ._ecdb ,_ggcca ,&_ebcef );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _cbfbd > _ged ._bbebf {if _ccde =_aeeb (_eaad ,_ged ._bbebf +1,_cbfbd -1,_ged ._gcbbd ,-_ged ._ecdb ,_ggcca ,&_ebcef );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_fcffa =_cbfbd +1;if _fcffa < _ged ._cbag {if _ccde =_aeeb (_eaad ,_fcffa ,_ged ._cbag -1,_ged ._gcbbd ,-_ged ._ecdb ,_ggcca ,&_ebcef );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cbfbd =_ged ._cbag ;for {for ;_cbfbd <=_fcccg &&_geffb .GetPixel (_cbfbd ,_gaccg );_cbfbd ++{if _ccde =_geffb .SetPixel (_cbfbd ,_gaccg ,0);_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ccde =_aeeb (_eaad ,_fcffa ,_cbfbd -1,_ged ._gcbbd ,_ged ._ecdb ,_ggcca ,&_ebcef );
_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cbfbd > _ged ._bbebf {if _ccde =_aeeb (_eaad ,_ged ._bbebf +1,_cbfbd -1,_ged ._gcbbd ,-_ged ._ecdb ,_ggcca ,&_ebcef );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_bfdf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cbfbd ++;_cbfbd <=_ged ._bbebf +1&&_cbfbd <=_fcccg &&!_geffb .GetPixel (_cbfbd ,_gaccg );_cbfbd ++{};_fcffa =_cbfbd ;if !(_cbfbd <=_ged ._bbebf +1&&_cbfbd <=_fcccg ){break ;};};};_ebcef .Max .X ++;_ebcef .Max .Y ++;return &_ebcef ,nil ;};func (_baeda Points )GetIntY (i int )(int ,error ){if i >=len (_baeda ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_baeda [i ].Y ),nil ;};func (_bgefa *byHeight )Less (i ,j int )bool {return _bgefa .Values [i ].Height < _bgefa .Values [j ].Height };func MakePixelSumTab8 ()[]int {return _fbb ()};func (_defba *Bitmaps )SortByHeight (){_gede :=(*byHeight )(_defba );
_ff .Sort (_gede )};func (_afdb *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _afdb .removeBorderGeneral (left ,right ,top ,bot );};func (_bga *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_bga .Width ,Height :_bga .Height ,RowStride :_bga .RowStride ,Color :_bga .Color ,Text :_bga .Text ,BitmapNumber :_bga .BitmapNumber ,Special :_bga .Special ,Data :make ([]byte ,len (_bga .Data ))};
};func (_gcc *Boxes )Get (i int )(*_cb .Rectangle ,error ){const _gfc ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _gcc ==nil {return nil ,_c .Error (_gfc ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_gcc )-1{return nil ,_c .Errorf (_gfc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_gcc )[i ],nil ;};func (_gecc *Bitmap )addBorderGeneral (_bbc ,_dfdf ,_gebd ,_abcd int ,_efd int )(*Bitmap ,error ){const _fgg ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _bbc < 0||_dfdf < 0||_gebd < 0||_abcd < 0{return nil ,_c .Error (_fgg ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_edg ,_afbc :=_gecc .Width ,_gecc .Height ;_cbdg :=_edg +_bbc +_dfdf ;_gfd :=_afbc +_gebd +_abcd ;
_eadf :=New (_cbdg ,_gfd );_eadf .Color =_gecc .Color ;_dede :=PixClr ;if _efd > 0{_dede =PixSet ;};_cffe :=_eadf .RasterOperation (0,0,_bbc ,_gfd ,_dede ,nil ,0,0);if _cffe !=nil {return nil ,_c .Wrap (_cffe ,_fgg ,"\u006c\u0065\u0066\u0074");};_cffe =_eadf .RasterOperation (_cbdg -_dfdf ,0,_dfdf ,_gfd ,_dede ,nil ,0,0);
if _cffe !=nil {return nil ,_c .Wrap (_cffe ,_fgg ,"\u0072\u0069\u0067h\u0074");};_cffe =_eadf .RasterOperation (0,0,_cbdg ,_gebd ,_dede ,nil ,0,0);if _cffe !=nil {return nil ,_c .Wrap (_cffe ,_fgg ,"\u0074\u006f\u0070");};_cffe =_eadf .RasterOperation (0,_gfd -_abcd ,_cbdg ,_abcd ,_dede ,nil ,0,0);
if _cffe !=nil {return nil ,_c .Wrap (_cffe ,_fgg ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_cffe =_eadf .RasterOperation (_bbc ,_gebd ,_edg ,_afbc ,PixSrc ,_gecc ,0,0);if _cffe !=nil {return nil ,_c .Wrap (_cffe ,_fgg ,"\u0063\u006f\u0070\u0079");};return _eadf ,nil ;
};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _ebabd (_adgd ,_fgdc *Bitmap ,_egcc ,_aadf int )(*Bitmap ,error ){const _acgge ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _fgdc ==nil {return nil ,_c .Error (_acgge ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _egcc < 1||_aadf < 1{return nil ,_c .Error (_acgge ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _egcc ==1&&_aadf ==1{return _fgdc .Copy (),nil ;};if _egcc ==1||_aadf ==1{_cgcg :=SelCreateBrick (_aadf ,_egcc ,_aadf /2,_egcc /2,SelHit );
var _eggf error ;_adgd ,_eggf =_cfgcc (_adgd ,_fgdc ,_cgcg );if _eggf !=nil {return nil ,_c .Wrap (_eggf ,_acgge ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _adgd ,nil ;};_cceg :=SelCreateBrick (1,_egcc ,0,_egcc /2,SelHit );_facbe :=SelCreateBrick (_aadf ,1,_aadf /2,0,SelHit );_bdccd ,_gbbb :=_bfcb (nil ,_fgdc ,_cceg );if _gbbb !=nil {return nil ,_c .Wrap (_gbbb ,_acgge ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _adgd ,_gbbb =_bfcb (_adgd ,_bdccd ,_facbe );_gbbb !=nil {return nil ,_c .Wrap (_gbbb ,_acgge ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_gbbb =_bdade (_bdccd ,_adgd ,_cceg );_gbbb !=nil {return nil ,_c .Wrap (_gbbb ,_acgge ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_gbbb =_bdade (_adgd ,_bdccd ,_facbe );_gbbb !=nil {return nil ,_c .Wrap (_gbbb ,_acgge ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _adgd ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bdgfe ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_efgb :=_geff (width ,height );_efgb .Data =data ;if len (data )< height *_efgb .RowStride {return nil ,_c .Errorf (_bdgfe ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_efgb .RowStride );
};return _efgb ,nil ;};func (_cfe *Bitmap )clearAll ()error {return _cfe .RasterOperation (0,0,_cfe .Width ,_cfe .Height ,PixClr ,nil ,0,0);};