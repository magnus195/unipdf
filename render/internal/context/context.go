//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_fa "errors";_be "github.com/unidoc/freetype/truetype";
	_ff "github.com/magnus195/unipdf/v3/core";
	_a "github.com/magnus195/unipdf/v3/internal/cmap";
	_ef "github.com/magnus195/unipdf/v3/internal/textencoding";
	_ea "github.com/magnus195/unipdf/v3/internal/transform";
	_bc "github.com/magnus195/unipdf/v3/model";_d "golang.org/x/image/font";_c "image";_f "image/color";_b "strings";);type TextRenderingMode int ;func (_gfc *TextState )ProcQ (data []byte ,ctx Context ){_gfc .ProcTStar ();_gfc .ProcTj (data ,ctx )};type Context interface{Push ();
Pop ();Matrix ()_ea .Matrix ;SetMatrix (_g _ea .Matrix );Translate (_bcd ,_ec float64 );Scale (_dd ,_bcg float64 );Rotate (_ae float64 );MoveTo (_ecc ,_aa float64 );LineTo (_ga ,_eff float64 );CubicTo (_eb ,_bf ,_ee ,_fg ,_bg ,_bfd float64 );QuadraticTo (_fe ,_cc ,_eg ,_fba float64 );
NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_gf float64 );SetLineCap (_gd LineCap );SetLineJoin (_eef LineJoin );SetDash (_dg ...float64 );SetDashOffset (_dfe float64 );Fill ();FillPreserve ();
Stroke ();StrokePreserve ();SetRGBA (_ce ,_ba ,_aab ,_bgb float64 );SetFillRGBA (_da ,_ece ,_ecb ,_cd float64 );SetFillStyle (_dag Pattern );SetFillRule (_fgb FillRule );SetStrokeRGBA (_cg ,_dfd ,_ffc ,_bff float64 );SetStrokeStyle (_dac Pattern );FillPattern ()Pattern ;
StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_bab string ,_fc _d .Face ,_bd ,_bec float64 );MeasureString (_cgg string ,_efa _d .Face )(_bfdc ,_fed float64 );DrawRectangle (_ad ,_baa ,_dfef ,_ebc float64 );DrawImage (_ebcd _c .Image ,_baag ,_dfee int );
DrawImageAnchored (_ecf _c .Image ,_bad ,_dff int ,_eeg ,_ed float64 );Height ()int ;Width ()int ;};type LineCap int ;const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_bcc *TextState )Reset (){_bcc .Tm =_ea .IdentityMatrix ();_bcc .Tlm =_ea .IdentityMatrix ()};
func (_gdb *TextFont )CharcodeToRunes (charcode _ef .CharCode )(_ef .CharCode ,[]rune ){_fad :=[]_ef .CharCode {charcode };if _gdb ._gdd ==nil ||_gdb ._gdd ==_gdb .Font {return _gdb .charcodeToRunesSimple (charcode );};_cdd :=_gdb ._gdd .CharcodesToUnicode (_fad );
_aff ,_ :=_gdb .Font .RunesToCharcodeBytes (_cdd );_eac :=_gdb .Font .BytesToCharcodes (_aff );_ag :=charcode ;if len (_eac )> 0&&_eac [0]!=0{_ag =_eac [0];};if string (_cdd )==string (_a .MissingCodeRune )&&_gdb ._gdd .BaseFont ()==_gdb .Font .BaseFont (){return _gdb .charcodeToRunesSimple (charcode );
};return _ag ,_cdd ;};func (_dc *TextState )ProcTd (tx ,ty float64 ){_dc .Tlm .Concat (_ea .TranslationMatrix (tx ,ty ));_dc .Tm =_dc .Tlm .Clone ();};func (_bgg *TextFont )NewFace (size float64 )_d .Face {return _be .NewFace (_bgg ._bed ,&_be .Options {Size :size });
};func (_bb *TextFont )WithSize (size float64 ,originalFont *_bc .PdfFont )*TextFont {return &TextFont {Font :_bb .Font ,Size :size ,_bed :_bb ._bed ,_gdd :originalFont };};func (_ead *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_ead .Tw =aw ;
_ead .Tc =ac ;_ead .ProcQ (data ,ctx );};func (_eeb *TextState )ProcTD (tx ,ty float64 ){_eeb .Tl =-ty ;_eeb .ProcTd (tx ,ty )};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;
TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func NewTextFont (font *_bc .PdfFont ,size float64 )(*TextFont ,error ){_daa :=font .FontDescriptor ();
if _daa ==nil {return nil ,_fa .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_dde ,_ddf :=_ff .GetStream (_daa .FontFile2 );if !_ddf {return nil ,_fa .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_af ,_fbf :=_ff .DecodeStream (_dde );if _fbf !=nil {return nil ,_fbf ;};_cfa ,_fbf :=_be .Parse (_af );if _fbf !=nil {return nil ,_fbf ;};_ade :=font .FontDescriptor ().FontName .String ();_gaf :=len (_ade )> 7&&_ade [6]=='+';if !_cfa .HasCmap ()&&(!_b .Contains (font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-")||!_gaf ){return nil ,_fa .New ("\u006e\u006f c\u006d\u0061\u0070 \u0061\u006e\u0064\u0020enc\u006fdi\u006e\u0067\u0020\u0069\u0073\u0020\u006eot\u0020\u0069\u0064\u0065\u006e\u0074\u0069t\u0079");
};return &TextFont {Font :font ,Size :size ,_bed :_cfa },nil ;};func (_cda *TextState )ProcTStar (){_cda .ProcTd (0,-_cda .Tl )};func (_fcf *TextFont )GetCharMetrics (code _ef .CharCode )(float64 ,float64 ,bool ){if _gaa ,_dda :=_fcf .Font .GetCharMetrics (code );
_dda &&_gaa .Wx !=0{return _gaa .Wx ,_gaa .Wy ,_dda ;};if _fcf ._gdd ==nil {return 0,0,false ;};_ffa ,_aac :=_fcf ._gdd .GetCharMetrics (code );return _ffa .Wx ,_ffa .Wy ,_aac &&_ffa .Wx !=0;};type LineJoin int ;func (_bbg *TextState )ProcTj (data []byte ,ctx Context ){_fgd :=_bbg .Tf .Size ;
_db :=_bbg .Th /100.0;_ceg :=_bbg .GlobalScale ;_bgga :=_ea .NewMatrix (_fgd *_db ,0,0,_fgd ,0,_bbg .Ts );_adf :=ctx .Matrix ();_dbc :=_adf .Clone ().Mult (_bbg .Tm .Clone ().Mult (_bgga )).ScalingFactorY ();_gg :=_bbg .Tf .NewFace (_dbc );_cca :=_bbg .Tf .BytesToCharcodes (data );
for _ ,_ace :=range _cca {_ega ,_geg :=_bbg .Tf .CharcodeToRunes (_ace );_fcb :=string (_geg );if _fcb =="\u0000"{continue ;};_gb :=_adf .Clone ().Mult (_bbg .Tm .Clone ().Mult (_bgga ));_gbb :=_gb .ScalingFactorY ();_gb =_gb .Scale (1/_gbb ,-1/_gbb );
if _bbg .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_gb );ctx .DrawString (_fcb ,_gg ,0,0);ctx .SetMatrix (_adf );};_dce :=0.0;if _fcb =="\u0020"{_dce =_bbg .Tw ;};_bdg ,_ ,_ceb :=_bbg .Tf .GetCharMetrics (_ega );if _ceb {_bdg =_bdg *0.001*_fgd ;
}else {_bdg ,_ =ctx .MeasureString (_fcb ,_gg );_bdg =_bdg /_ceg ;};_bbgc :=(_bdg +_bbg .Tc +_dce )*_db ;_bbg .Tm =_bbg .Tm .Mult (_ea .TranslationMatrix (_bbgc ,0));};};func (_gae *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_gae .Tm =_ea .NewMatrix (a ,b ,c ,d ,e ,f );
_gae .Tlm =_gae .Tm .Clone ();};type FillRule int ;type TextFont struct{Font *_bc .PdfFont ;Size float64 ;_bed *_be .Font ;_gdd *_bc .PdfFont ;};func (_efe *TextFont )charcodeToRunesSimple (_ca _ef .CharCode )(_ef .CharCode ,[]rune ){_ac :=[]_ef .CharCode {_ca };
if _efe .Font .IsSimple ()&&_efe ._bed !=nil {if _efd :=_efe ._bed .Index (rune (_ca ));_efd > 0{return _ca ,[]rune {rune (_ca )};};};if _efe ._bed !=nil &&!_efe ._bed .HasCmap ()&&_b .Contains (_efe .Font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-"){if _ege :=_efe ._bed .Index (rune (_ca ));
_ege > 0{return _ca ,[]rune {rune (_ca )};};};return _ca ,_efe .Font .CharcodesToUnicode (_ac );};func (_ecbg *TextState )ProcTf (font *TextFont ){_ecbg .Tf =font };type Gradient interface{Pattern ;AddColorStop (_fb float64 ,_df _f .Color );};func (_ab *TextState )Translate (tx ,ty float64 ){_ab .Tm =_ab .Tm .Mult (_ea .TranslationMatrix (tx ,ty ))};
type Pattern interface{ColorAt (_bca ,_cf int )_f .Color ;};func NewTextState ()TextState {return TextState {Th :100,Tm :_ea .IdentityMatrix (),Tlm :_ea .IdentityMatrix ()};};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;
Ts float64 ;Tm _ea .Matrix ;Tlm _ea .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_adee *TextFont )BytesToCharcodes (data []byte )[]_ef .CharCode {if _adee ._gdd !=nil {return _adee ._gdd .BytesToCharcodes (data );
};return _adee .Font .BytesToCharcodes (data );};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ge ,_cee :=_bc .NewPdfFontFromTTFFile (filePath );if _cee !=nil {return nil ,_cee ;};return NewTextFont (_ge ,size );};