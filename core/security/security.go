//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_eb "bytes";_fe "crypto/aes";_f "crypto/cipher";_ba "crypto/md5";_e "crypto/rand";_ce "crypto/rc4";_dc "crypto/sha256";_b "crypto/sha512";_ac "encoding/binary";_a "errors";_bd "fmt";
	_ed "github.com/magnus195/unipdf/v3/common";_d "hash";
_cb "io";_eg "math";);func _aeg (_bgg []byte ,_geg int ){_gegc :=_geg ;for _gegc < len (_bgg ){copy (_bgg [_gegc :],_bgg [:_gegc ]);_gegc *=2;};};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_ff stdHandlerR4 )alg5 (_aceb []byte ,_fa []byte )([]byte ,error ){_ddc :=_ba .New ();_ddc .Write ([]byte (_ef ));_ddc .Write ([]byte (_ff .ID0 ));_cgc :=_ddc .Sum (nil );_ed .Log .Trace ("\u0061\u006c\u0067\u0035");
_ed .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_aceb );_ed .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_ff .ID0 );if len (_cgc )!=16{return nil ,_a .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");
};_bcb ,_ecf :=_ce .NewCipher (_aceb );if _ecf !=nil {return nil ,_a .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_aac :=make ([]byte ,16);_bcb .XORKeyStream (_aac ,_cgc );_gcca :=make ([]byte ,len (_aceb ));
for _bbe :=0;_bbe < 19;_bbe ++{for _gfd :=0;_gfd < len (_aceb );_gfd ++{_gcca [_gfd ]=_aceb [_gfd ]^byte (_bbe +1);};_bcb ,_ecf =_ce .NewCipher (_gcca );if _ecf !=nil {return nil ,_a .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_bcb .XORKeyStream (_aac ,_aac );_ed .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_bbe ,_gcca );_ed .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_bbe ,_aac );
};_gada :=make ([]byte ,32);for _cgcd :=0;_cgcd < 16;_cgcd ++{_gada [_cgcd ]=_aac [_cgcd ];};_ ,_ecf =_e .Read (_gada [16:32]);if _ecf !=nil {return nil ,_a .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _gada ,nil ;};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_ae stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_ee :=_ae .alg3 (d .R ,upass ,opass );if _ee !=nil {_ed .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ee );
return nil ,_ee ;};d .O =O ;_ed .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_cabd :=_ae .alg2 (d ,upass );U ,_ee :=_ae .alg5 (_cabd ,upass );if _ee !=nil {_ed .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ee );
return nil ,_ee ;};d .U =U ;_ed .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _cabd ,nil ;};var _ StdHandler =stdHandlerR6 {};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;func (_ceb *ecbEncrypter )BlockSize ()int {return _ceb ._bb };type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};func (_ag *ecbDecrypter )BlockSize ()int {return _ag ._bb };var _ StdHandler =stdHandlerR4 {};
func _gfgd (_gccag ,_cag ,_fec []byte )([]byte ,error ){var (_acf ,_faa ,_eca _d .Hash ;);_acf =_dc .New ();_cbff :=make ([]byte ,64);_becg :=_acf ;_becg .Write (_gccag );K :=_becg .Sum (_cbff [:0]);_ecfc :=make ([]byte ,64*(127+64+48));_fdc :=func (_afc int )([]byte ,error ){_efe :=len (_cag )+len (K )+len (_fec );
_bdc :=_ecfc [:_efe ];_cgd :=copy (_bdc ,_cag );_cgd +=copy (_bdc [_cgd :],K [:]);_cgd +=copy (_bdc [_cgd :],_fec );if _cgd !=_efe {_ed .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_a .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_ecfc [:_efe *64];_aeg (K1 ,_efe );_gcag ,_cce :=_aea (K [0:16]);if _cce !=nil {return nil ,_cce ;};_fab :=_f .NewCBCEncrypter (_gcag ,K [16:32]);_fab .CryptBlocks (K1 ,K1 );
E :=K1 ;_eee :=0;for _cfb :=0;_cfb < 16;_cfb ++{_eee +=int (E [_cfb ]%3);};var _abb _d .Hash ;switch _eee %3{case 0:_abb =_acf ;case 1:if _faa ==nil {_faa =_b .New384 ();};_abb =_faa ;case 2:if _eca ==nil {_eca =_b .New ();};_abb =_eca ;};_abb .Reset ();
_abb .Write (E );K =_abb .Sum (_cbff [:0]);return E ,nil ;};for _bffb :=0;;{E ,_dca :=_fdc (_bffb );if _dca !=nil {return nil ,_dca ;};_bbed :=E [len (E )-1];_bffb ++;if _bffb >=64&&_bbed <=uint8 (_bffb -32){break ;};};return K [:32],nil ;};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");
EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););const _ef ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";func (_cgbe stdHandlerR6 )alg2b (R int ,_ede ,_efgc ,_bgbc []byte )([]byte ,error ){if R ==5{return _fdf (_ede );
};return _gfgd (_ede ,_efgc ,_bgbc );};type ecb struct{_cg _f .Block ;_bb int ;};func _fdf (_gae []byte )([]byte ,error ){_bfb :=_dc .New ();_bfb .Write (_gae );return _bfb .Sum (nil ),nil ;};

// Authenticate implements StdHandler interface.
func (_fed stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_ed .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_cc ,_ffg :=_fed .alg7 (d ,pass );if _ffg !=nil {return nil ,0,_ffg ;};if _cc !=nil {_ed .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _cc ,PermOwner ,nil ;
};_ed .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_cc ,_ffg =_fed .alg6 (d ,pass );if _ffg !=nil {return nil ,0,_ffg ;
};if _cc !=nil {_ed .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _cc ,d .P ,nil ;};return nil ,0,nil ;};const (PermOwner =Permissions (_eg .MaxUint32 );PermPrinting =Permissions (1<<2);
PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11);
);func (stdHandlerR4 )paddedPass (_ab []byte )[]byte {_ebb :=make ([]byte ,32);_feb :=copy (_ebb ,_ab );for ;_feb < 32;_feb ++{_ebb [_feb ]=_ef [_feb -len (_ab )];};return _ebb ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};func (_ad stdHandlerR4 )alg7 (_db *StdEncryptDict ,_cbfa []byte )([]byte ,error ){_fb :=_ad .alg3Key (_db .R ,_cbfa );_age :=make ([]byte ,len (_db .O ));
if _db .R ==2{_da ,_bgbe :=_ce .NewCipher (_fb );if _bgbe !=nil {return nil ,_a .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_da .XORKeyStream (_age ,_db .O );}else if _db .R >=3{_ffb :=append ([]byte {},_db .O ...);
for _bee :=0;_bee < 20;_bee ++{_aad :=append ([]byte {},_fb ...);for _daf :=0;_daf < len (_fb );_daf ++{_aad [_daf ]^=byte (19-_bee );};_bgf ,_def :=_ce .NewCipher (_aad );if _def !=nil {return nil ,_a .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_bgf .XORKeyStream (_age ,_ffb );_ffb =append ([]byte {},_age ...);};}else {return nil ,_a .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_cggf ,_cabb :=_ad .alg6 (_db ,_age );if _cabb !=nil {return nil ,nil ;};return _cggf ,nil ;};func (_ggd stdHandlerR6 )alg8 (_febe *StdEncryptDict ,_ebc []byte ,_feg []byte )error {if _gfa :=_cd ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_ebc );
_gfa !=nil {return _gfa ;};var _ced [16]byte ;if _ ,_gcd :=_cb .ReadFull (_e .Reader ,_ced [:]);_gcd !=nil {return _gcd ;};_deb :=_ced [0:8];_eeeb :=_ced [8:16];_dad :=make ([]byte ,len (_feg )+len (_deb ));_ead :=copy (_dad ,_feg );copy (_dad [_ead :],_deb );
_dab ,_dabb :=_ggd .alg2b (_febe .R ,_dad ,_feg ,nil );if _dabb !=nil {return _dabb ;};U :=make ([]byte ,len (_dab )+len (_deb )+len (_eeeb ));_ead =copy (U ,_dab [:32]);_ead +=copy (U [_ead :],_deb );copy (U [_ead :],_eeeb );_febe .U =U ;_ead =len (_feg );
copy (_dad [_ead :],_eeeb );_dab ,_dabb =_ggd .alg2b (_febe .R ,_dad ,_feg ,nil );if _dabb !=nil {return _dabb ;};_dbg ,_dabb :=_aea (_dab [:32]);if _dabb !=nil {return _dabb ;};_adg :=make ([]byte ,_fe .BlockSize );_abf :=_f .NewCBCEncrypter (_dbg ,_adg );
UE :=make ([]byte ,32);_abf .CryptBlocks (UE ,_ebc [:32]);_febe .UE =UE ;return nil ;};func (_dccc stdHandlerR6 )alg9 (_edg *StdEncryptDict ,_cca []byte ,_bdcb []byte )error {if _bad :=_cd ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_cca );_bad !=nil {return _bad ;
};if _gb :=_cd ("\u0061\u006c\u0067\u0039","\u0055",48,_edg .U );_gb !=nil {return _gb ;};var _gbb [16]byte ;if _ ,_adb :=_cb .ReadFull (_e .Reader ,_gbb [:]);_adb !=nil {return _adb ;};_acd :=_gbb [0:8];_eadc :=_gbb [8:16];_gbd :=_edg .U [:48];_ebfg :=make ([]byte ,len (_bdcb )+len (_acd )+len (_gbd ));
_afb :=copy (_ebfg ,_bdcb );_afb +=copy (_ebfg [_afb :],_acd );_afb +=copy (_ebfg [_afb :],_gbd );_bgc ,_bfc :=_dccc .alg2b (_edg .R ,_ebfg ,_bdcb ,_gbd );if _bfc !=nil {return _bfc ;};O :=make ([]byte ,len (_bgc )+len (_acd )+len (_eadc ));_afb =copy (O ,_bgc [:32]);
_afb +=copy (O [_afb :],_acd );_afb +=copy (O [_afb :],_eadc );_edg .O =O ;_afb =len (_bdcb );_afb +=copy (_ebfg [_afb :],_eadc );_bgc ,_bfc =_dccc .alg2b (_edg .R ,_ebfg ,_bdcb ,_gbd );if _bfc !=nil {return _bfc ;};_deba ,_bfc :=_aea (_bgc [:32]);if _bfc !=nil {return _bfc ;
};_fbd :=make ([]byte ,_fe .BlockSize );_cgeb :=_f .NewCBCEncrypter (_deba ,_fbd );OE :=make ([]byte ,32);_cgeb .CryptBlocks (OE ,_cca [:32]);_edg .OE =OE ;return nil ;};func (_gce stdHandlerR6 )alg10 (_eafe *StdEncryptDict ,_fcf []byte )error {if _cdf :=_cd ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_fcf );
_cdf !=nil {return _cdf ;};_acb :=uint64 (uint32 (_eafe .P ))|(_eg .MaxUint32 <<32);Perms :=make ([]byte ,16);_ac .LittleEndian .PutUint64 (Perms [:8],_acb );if _eafe .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");
if _ ,_bda :=_cb .ReadFull (_e .Reader ,Perms [12:16]);_bda !=nil {return _bda ;};_ege ,_daa :=_aea (_fcf [:32]);if _daa !=nil {return _daa ;};_ggcg :=_g (_ege );_ggcg .CryptBlocks (Perms ,Perms );_eafe .Perms =Perms [:16];return nil ;};func (_gcc stdHandlerR4 )alg4 (_bge []byte ,_bff []byte )([]byte ,error ){_egf ,_dd :=_ce .NewCipher (_bge );
if _dd !=nil {return nil ,_a .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_beb :=[]byte (_ef );_bec :=make ([]byte ,len (_beb ));_egf .XORKeyStream (_bec ,_beb );return _bec ,nil ;};

// Authenticate implements StdHandler interface.
func (_bcf stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _bcf .alg2a (d ,pass );};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_cgg errInvalidField )Error ()string {return _bd .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_cgg .Func ,_cgg .Field ,_cgg .Exp ,_cgg .Got );
};func _ge (_gd _f .Block )_f .BlockMode {return (*ecbDecrypter )(_bf (_gd ))};func (_ga stdHandlerR4 )alg2 (_gag *StdEncryptDict ,_gad []byte )[]byte {_ed .Log .Trace ("\u0061\u006c\u0067\u0032");_fd :=_ga .paddedPass (_gad );_gg :=_ba .New ();_gg .Write (_fd );
_gg .Write (_gag .O );var _fda [4]byte ;_ac .LittleEndian .PutUint32 (_fda [:],uint32 (_gag .P ));_gg .Write (_fda [:]);_ed .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_fda );_gg .Write ([]byte (_ga .ID0 ));_ed .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_gag .R ,_gag .EncryptMetadata );
if (_gag .R >=4)&&!_gag .EncryptMetadata {_gg .Write ([]byte {0xff,0xff,0xff,0xff});};_ebf :=_gg .Sum (nil );if _gag .R >=3{_gg =_ba .New ();for _cge :=0;_cge < 50;_cge ++{_gg .Reset ();_gg .Write (_ebf [0:_ga .Length /8]);_ebf =_gg .Sum (nil );};};if _gag .R >=3{return _ebf [0:_ga .Length /8];
};return _ebf [0:5];};type stdHandlerR4 struct{Length int ;ID0 string ;};func (_gca stdHandlerR4 )alg6 (_bgeb *StdEncryptDict ,_fde []byte )([]byte ,error ){var (_fgb []byte ;_bdd error ;);_efg :=_gca .alg2 (_bgeb ,_fde );if _bgeb .R ==2{_fgb ,_bdd =_gca .alg4 (_efg ,_fde );
}else if _bgeb .R >=3{_fgb ,_bdd =_gca .alg5 (_efg ,_fde );}else {return nil ,_a .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _bdd !=nil {return nil ,_bdd ;};_ed .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_fgb ),string (_bgeb .U ));
_ged :=_fgb ;_eda :=_bgeb .U ;if _bgeb .R >=3{if len (_ged )> 16{_ged =_ged [0:16];};if len (_eda )> 16{_eda =_eda [0:16];};};if !_eb .Equal (_ged ,_eda ){return nil ,nil ;};return _efg ,nil ;};func (_fc *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_fc ._bb !=0{_ed .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ed .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_fc ._cg .Encrypt (dst ,src [:_fc ._bb ]);src =src [_fc ._bb :];dst =dst [_fc ._bb :];};};func (_fgd stdHandlerR6 )alg11 (_ggf *StdEncryptDict ,_bbg []byte )([]byte ,error ){if _dda :=_cd ("\u0061\u006c\u00671\u0031","\u0055",48,_ggf .U );
_dda !=nil {return nil ,_dda ;};_dfgb :=make ([]byte ,len (_bbg )+8);_ebcc :=copy (_dfgb ,_bbg );_ebcc +=copy (_dfgb [_ebcc :],_ggf .U [32:40]);_fecd ,_feeb :=_fgd .alg2b (_ggf .R ,_dfgb ,_bbg ,nil );if _feeb !=nil {return nil ,_feeb ;};_fecd =_fecd [:32];
if !_eb .Equal (_fecd ,_ggf .U [:32]){return nil ,nil ;};return _fecd ,nil ;};func _g (_bc _f .Block )_f .BlockMode {return (*ecbEncrypter )(_bf (_bc ))};type ecbDecrypter ecb ;func (_bagd stdHandlerR6 )alg2a (_agg *StdEncryptDict ,_ea []byte )([]byte ,Permissions ,error ){if _agf :=_cd ("\u0061\u006c\u00672\u0061","\u004f",48,_agg .O );
_agf !=nil {return nil ,0,_agf ;};if _dec :=_cd ("\u0061\u006c\u00672\u0061","\u0055",48,_agg .U );_dec !=nil {return nil ,0,_dec ;};if len (_ea )> 127{_ea =_ea [:127];};_aed ,_bca :=_bagd .alg12 (_agg ,_ea );if _bca !=nil {return nil ,0,_bca ;};var (_df []byte ;
_aggc []byte ;_gfg []byte ;);var _bgbd Permissions ;if len (_aed )!=0{_bgbd =PermOwner ;_ddg :=make ([]byte ,len (_ea )+8+48);_ega :=copy (_ddg ,_ea );_ega +=copy (_ddg [_ega :],_agg .O [40:48]);copy (_ddg [_ega :],_agg .U [0:48]);_df =_ddg ;_aggc =_agg .OE ;
_gfg =_agg .U [0:48];}else {_aed ,_bca =_bagd .alg11 (_agg ,_ea );if _bca ==nil &&len (_aed )==0{_aed ,_bca =_bagd .alg11 (_agg ,[]byte (""));};if _bca !=nil {return nil ,0,_bca ;}else if len (_aed )==0{return nil ,0,nil ;};_bgbd =_agg .P ;_bdde :=make ([]byte ,len (_ea )+8);
_efge :=copy (_bdde ,_ea );copy (_bdde [_efge :],_agg .U [40:48]);_df =_bdde ;_aggc =_agg .UE ;_gfg =nil ;};if _dfg :=_cd ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_aggc );_dfg !=nil {return nil ,0,_dfg ;};_aggc =_aggc [:32];_dfc ,_bca :=_bagd .alg2b (_agg .R ,_df ,_ea ,_gfg );
if _bca !=nil {return nil ,0,_bca ;};_cga ,_bca :=_fe .NewCipher (_dfc [:32]);if _bca !=nil {return nil ,0,_bca ;};_begf :=make ([]byte ,_fe .BlockSize );_ccc :=_f .NewCBCDecrypter (_cga ,_begf );_dge :=make ([]byte ,32);_ccc .CryptBlocks (_dge ,_aggc );
if _agg .R ==5{return _dge ,_bgbd ,nil ;};_bca =_bagd .alg13 (_agg ,_dge );if _bca !=nil {return nil ,0,_bca ;};return _dge ,_bgbd ,nil ;};func _cd (_fg ,_gf string ,_fgf int ,_bag []byte )error {if len (_bag )< _fgf {return errInvalidField {Func :_fg ,Field :_gf ,Exp :_fgf ,Got :len (_bag )};
};return nil ;};func (_bg stdHandlerR4 )alg3Key (R int ,_ecd []byte )[]byte {_aca :=_ba .New ();_de :=_bg .paddedPass (_ecd );_aca .Write (_de );if R >=3{for _gdd :=0;_gdd < 50;_gdd ++{_ace :=_aca .Sum (nil );_aca =_ba .New ();_aca .Write (_ace );};};_fee :=_aca .Sum (nil );
if R ==2{_fee =_fee [0:5];}else {_fee =_fee [0:_bg .Length /8];};return _fee ;};func (_cab stdHandlerR4 )alg3 (R int ,_dcc ,_gge []byte )([]byte ,error ){var _beg []byte ;if len (_gge )> 0{_beg =_cab .alg3Key (R ,_gge );}else {_beg =_cab .alg3Key (R ,_dcc );
};_cbf ,_cgb :=_ce .NewCipher (_beg );if _cgb !=nil {return nil ,_a .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_cbd :=_cab .paddedPass (_dcc );_ece :=make ([]byte ,len (_cbd ));_cbf .XORKeyStream (_ece ,_cbd );
if R >=3{_abd :=make ([]byte ,len (_beg ));for _bgb :=0;_bgb < 19;_bgb ++{for _dgg :=0;_dgg < len (_beg );_dgg ++{_abd [_dgg ]=_beg [_dgg ]^byte (_bgb +1);};_fcb ,_gc :=_ce .NewCipher (_abd );if _gc !=nil {return nil ,_a .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_fcb .XORKeyStream (_ece ,_ece );};};return _ece ,nil ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_dfe stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_bac :=make ([]byte ,32);if _ ,_badd :=_cb .ReadFull (_e .Reader ,_bac );_badd !=nil {return nil ,_badd ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _cbdc :=_dfe .alg8 (d ,_bac ,upass );_cbdc !=nil {return nil ,_cbdc ;};if _fabc :=_dfe .alg9 (d ,_bac ,opass );_fabc !=nil {return nil ,_fabc ;};if d .R ==5{return _bac ,nil ;
};if _dbf :=_dfe .alg10 (d ,_bac );_dbf !=nil {return nil ,_dbf ;};return _bac ,nil ;};

// Allowed checks if a set of permissions can be granted.
func (_ec Permissions )Allowed (p2 Permissions )bool {return _ec &p2 ==p2 };func (_aeae stdHandlerR6 )alg12 (_bdca *StdEncryptDict ,_ffge []byte )([]byte ,error ){if _ccb :=_cd ("\u0061\u006c\u00671\u0032","\u0055",48,_bdca .U );_ccb !=nil {return nil ,_ccb ;
};if _bea :=_cd ("\u0061\u006c\u00671\u0032","\u004f",48,_bdca .O );_bea !=nil {return nil ,_bea ;};_cgf :=make ([]byte ,len (_ffge )+8+48);_bdf :=copy (_cgf ,_ffge );_bdf +=copy (_cgf [_bdf :],_bdca .O [32:40]);_bdf +=copy (_cgf [_bdf :],_bdca .U [0:48]);
_cbg ,_agc :=_aeae .alg2b (_bdca .R ,_cgf ,_ffge ,_bdca .U [0:48]);if _agc !=nil {return nil ,_agc ;};_cbg =_cbg [:32];if !_eb .Equal (_cbg ,_bdca .O [:32]){return nil ,nil ;};return _cbg ,nil ;};func _aea (_ggc []byte )(_f .Block ,error ){_ecea ,_gaa :=_fe .NewCipher (_ggc );
if _gaa !=nil {_ed .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_gaa );
return nil ,_gaa ;};return _ecea ,nil ;};func (_fad stdHandlerR6 )alg13 (_ccbd *StdEncryptDict ,_efef []byte )error {if _bfe :=_cd ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_efef );_bfe !=nil {return _bfe ;};if _efd :=_cd ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_ccbd .Perms );
_efd !=nil {return _efd ;};_ddb :=make ([]byte ,16);copy (_ddb ,_ccbd .Perms [:16]);_faag ,_fbdf :=_fe .NewCipher (_efef [:32]);if _fbdf !=nil {return _fbdf ;};_efgeg :=_ge (_faag );_efgeg .CryptBlocks (_ddb ,_ddb );if !_eb .Equal (_ddb [9:12],[]byte ("\u0061\u0064\u0062")){return _a .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_agca :=Permissions (_ac .LittleEndian .Uint32 (_ddb [0:4]));if _agca !=_ccbd .P {return _a .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _ccf bool ;if _ddb [8]=='T'{_ccf =true ;}else if _ddb [8]=='F'{_ccf =false ;}else {return _a .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _ccf !=_ccbd .EncryptMetadata {return _a .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func (_cebe *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_cebe ._bb !=0{_ed .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ed .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_cebe ._cg .Decrypt (dst ,src [:_cebe ._bb ]);src =src [_cebe ._bb :];dst =dst [_cebe ._bb :];};};type stdHandlerR6 struct{};func _bf (_ca _f .Block )*ecb {return &ecb {_cg :_ca ,_bb :_ca .BlockSize ()}};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;type ecbEncrypter ecb ;

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_gdg *StdEncryptDict ,_cec ,_be []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_aa *StdEncryptDict ,_af []byte )([]byte ,Permissions ,error );};